window.utility2.stateInit({"utility2":{"assetsDict":{"/assets.example.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<!-- \"assets.utility2.template.html\" -->\n<title>db-lite (0.0.1)</title>\n<style>\n/* jslint utility2:true */\n/*csslint\n*/\n/* csslint ignore:start */\n*,\n*:after,\n*:before {\n    box-sizing: border-box;\n}\n/* csslint ignore:end */\n@keyframes uiAnimateShake {\n    0%, 50% {\n        transform: translateX(10px);\n    }\n    25%, 75% {\n        transform: translateX(-10px);\n    }\n    100% {\n        transform: translateX(0);\n    }\n}\n@keyframes uiAnimateSpin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\na {\n    overflow-wrap: break-word;\n}\nbody {\n    background: #eef;\n    font-family: Arial, Helvetica, sans-serif;\n    margin: 0 40px;\n}\nbody > div,\nbody > form > div,\nbody > form > input,\nbody > form > pre,\nbody > form > textarea,\nbody > form > .button,\nbody > input,\nbody > pre,\nbody > textarea,\nbody > .button {\n    margin-bottom: 20px;\n}\nbody > form > input,\nbody > form > .button,\nbody > input,\nbody > .button {\n    width: 20rem;\n}\nbody > form > textarea,\nbody > textarea {\n    height: 10rem;\n    width: 100%;\n}\nbody > textarea[readonly] {\n    background: #ddd;\n}\ncode,\npre,\ntextarea {\n    font-family: Consolas, Menlo, monospace;\n    font-size: small;\n}\npre {\n    overflow-wrap: break-word;\n    white-space: pre-wrap;\n}\ntextarea {\n    overflow: auto;\n    white-space: pre;\n}\n.button {\n    background-color: #fff;\n    border: 1px solid;\n    border-bottom-color: rgb(186, 186, 186);\n    border-left-color: rgb(209, 209, 209);\n    border-radius: 4px;\n    border-right-color: rgb(209, 209, 209);\n    border-top-color: rgb(216, 216, 216);\n    color: #00d;\n    cursor: pointer;\n    display: inline-block;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: normal;\n    margin: 0;\n    padding: 2px 7px 3px 7px;\n    text-align: center;\n    text-decoration: underline;\n}\n.colorError {\n    color: #d00;\n}\n.uiAnimateShake {\n    animation-duration: 500ms;\n    animation-name: uiAnimateShake;\n}\n.uiAnimateSlide {\n    overflow-y: hidden;\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\n}\n.utility2FooterDiv {\n    text-align: center;\n}\n.zeroPixel {\n    border: 0;\n    height: 0;\n    margin: 0;\n    padding: 0;\n    width: 0;\n}\n</style>\n</head>\n<body>\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 500ms, width 1500ms; width: 0%; z-index: 1;\"></div>\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\n<a class=\"zeroPixel\" download=\"db.persistence.json\" href=\"\" id=\"dbExportA1\"></a>\n<input class=\"zeroPixel\" id=\"dbImportInput1\" type=\"file\">\n<script>\n/* jslint utility2:true */\n// init domOnEventWindowOnloadTimeElapsed\n(function () {\n/*\n * this function will measure and print the time-elapsed for window.onload\n */\n    \"use strict\";\n    if (window.domOnEventWindowOnloadTimeElapsed) {\n        return;\n    }\n    window.domOnEventWindowOnloadTimeElapsed = Date.now() + 100;\n    window.addEventListener(\"load\", function () {\n        setTimeout(function () {\n            window.domOnEventWindowOnloadTimeElapsed = (\n                Date.now()\n                - window.domOnEventWindowOnloadTimeElapsed\n            );\n            console.error(\n                \"domOnEventWindowOnloadTimeElapsed = \"\n                + window.domOnEventWindowOnloadTimeElapsed\n            );\n        }, 100);\n    });\n}());\n\n\n\n// init timerIntervalAjaxProgressUpdate\n(function () {\n/*\n * this function will increment the ajax-progress-bar\n * until the webpage has loaded\n */\n    \"use strict\";\n    var ajaxProgressDiv1;\n    var ajaxProgressState;\n    var ajaxProgressUpdate;\n    if (\n        window.timerIntervalAjaxProgressUpdate\n        || !document.querySelector(\n            \"#ajaxProgressDiv1\"\n        )\n    ) {\n        return;\n    }\n    ajaxProgressDiv1 = document.querySelector(\n        \"#ajaxProgressDiv1\"\n    );\n    setTimeout(function () {\n        ajaxProgressDiv1.style.width = \"25%\";\n    });\n    ajaxProgressState = 0;\n    ajaxProgressUpdate = (\n        window.local\n        && window.local.ajaxProgressUpdate\n    ) || function () {\n        ajaxProgressDiv1.style.width = \"100%\";\n        setTimeout(function () {\n            ajaxProgressDiv1.style.background = \"transparent\";\n            setTimeout(function () {\n                ajaxProgressDiv1.style.width = \"0%\";\n            }, 500);\n        }, 1000);\n    };\n    window.timerIntervalAjaxProgressUpdate = setInterval(function () {\n        ajaxProgressState += 1;\n        ajaxProgressDiv1.style.width = Math.max(\n            100 - 75 * Math.exp(-0.125 * ajaxProgressState),\n            ajaxProgressDiv1.style.width.slice(0, -1) | 0\n        ) + \"%\";\n    }, 1000);\n    window.addEventListener(\"load\", function () {\n        clearInterval(window.timerIntervalAjaxProgressUpdate);\n        ajaxProgressUpdate();\n    });\n}());\n\n\n\n// init domOnEventSelectAllWithinPre\n(function () {\n/*\n * this function will limit select-all within <pre tabIndex=\"0\"> elements\n * https://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\n */\n    \"use strict\";\n    if (window.domOnEventSelectAllWithinPre) {\n        return;\n    }\n    window.domOnEventSelectAllWithinPre = function (event) {\n        var range;\n        var selection;\n        if (\n            event\n            && event.key === \"a\"\n            && (event.ctrlKey || event.metaKey)\n            && event.target.closest(\"pre\")\n        ) {\n            range = document.createRange();\n            range.selectNodeContents(event.target.closest(\"pre\"));\n            selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n            event.preventDefault();\n        }\n    };\n    // init event-handling\n    document.addEventListener(\n        \"keydown\",\n        window.domOnEventSelectAllWithinPre\n    );\n}());\n</script>\n<h1>\n<!-- utility2-comment\n    <a\n        {{#if env.npm_package_homepage}}\n        href=\"{{env.npm_package_homepage}}\"\n        {{/if env.npm_package_homepage}}\n        target=\"_blank\"\n    >\nutility2-comment -->\n        db-lite (0.0.1)\n<!-- utility2-comment\n    </a>\nutility2-comment -->\n</h1>\n<h3>the greatest app in the world!</h3>\n<!-- utility2-comment\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\n<button class=\"button eventDelegateClick onreset\" data-onevent=\"testRunBrowser\" id=\"testRunButton1\">run internal test</button><br>\n<div class=\"uiAnimateSlide\" id=\"testReportDiv1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\nutility2-comment -->\n\n\n\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbResetButton1\" id=\"dbResetButton1\">\n    reset database\n</button><br>\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbExportButton1\" id=\"dbExportButton1\">\n    export database -&gt; file\n</button><br>\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbImportButton1\" id=\"dbImportButton1\">\n    import database &lt;- file\n</button><br>\n<label>edit or paste script below to\n    <a\n        href=\"https://kaizhu256.github.io/node-db-lite/build..beta..travis-ci.org/apidoc.html\"\n        target=\"_blank\"\n    >eval</a>\n</label>\n<textarea id=\"inputTextareaEval1\">\n/*jslint browser: true, node: true*/\n\"use strict\";\nvar dbTable1, modeNext, onNext;\nmodeNext = 0;\nonNext = function (error, data) {\n    modeNext = error\n        ? Infinity\n        : modeNext + 1;\n    switch (modeNext) {\n    case 1:\n        dbTable1 = window.dbTable1 = window.utility2_db.dbTableCreateOne({\n            name: \"dbTable1\"\n        }, onNext);\n        break;\n    case 2:\n        dbTable1.idIndexCreate({ name: \"field1\" }, onNext);\n        break;\n    case 3:\n        dbTable1.crudSetOneById({ field1: \"aa\", field2: 1, field3: \"foo\" }, onNext);\n        break;\n    case 4:\n        dbTable1.crudSetOneById({ field1: \"bb\", field2: 2, field3: \"bar\" }, onNext);\n        break;\n    case 5:\n        dbTable1.crudSetOneById({ field1: \"cc\", field2: 3, field3: \"baz\" }, onNext);\n        break;\n    case 6:\n        dbTable1.crudRemoveOneById({ field1: \"aa\" }, onNext);\n        break;\n    case 7:\n        dbTable1.crudUpdateOneById({ field1: \"bb\", field2: -1 }, onNext);\n        break;\n    case 8:\n        dbTable1.crudSetOneById({ field2: Math.random() }, onNext);\n        break;\n    case 9:\n        dbTable1.crudGetManyByQuery({\n            limit: Infinity,\n            query: { field2: { $gte: -Infinity, $lte: Infinity } },\n            skip: 0,\n            sort: [{ fieldName: \"_timeUpdated\", idDescending: true }]\n        }, onNext);\n        break;\n    case 10:\n        console.error(data);\n        dbTable1.crudCountAll(onNext);\n        break;\n    case 11:\n        console.error(\"number of rows: \" + data);\n        break;\n    default:\n        console.error(error.stack);\n    }\n};\nonNext();\n</textarea>\n<button class=\"button eventDelegateClick oneval onreset\" data-onevent=\"testRunBrowser\" id=\"dbEvalButton1\">eval script</button><br>\n<label>stderr and stdout</label>\n<textarea class=\"resettable\" id=\"outputStdoutTextarea1\" readonly></textarea>\n<!-- utility2-comment\n{{#if isRollup}}\n<script src=\"assets.app.js\"></script>\n{{#unless isRollup}}\nutility2-comment -->\n<script src=\"assets.utility2.rollup.js\"></script>\n<script>window.utility2_onReadyBefore.counter += 1;</script>\n<script src=\"jsonp.utility2.stateInit?callback=window.utility2.stateInit\"></script>\n<script src=\"assets.db.js\"></script>\n<script src=\"assets.example.js\"></script>\n<script src=\"assets.test.js\"></script>\n<script>window.utility2_onReadyBefore();</script>\n<!-- utility2-comment\n{{/if isRollup}}\nutility2-comment -->\n<div class=\"utility2FooterDiv\">\n    [ this app was created with\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\n    ]\n</div>\n</body>\n</html>\n","/assets.example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will run a web-demo of db-lite\n\ninstruction\n    1. save this script as example.js\n    2. run the shell-command:\n        $ npm install db-lite && PORT=8081 node example.js\n    3. open a browser to http://127.0.0.1:8081 and play with the web-demo\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package db */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw the error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-condition\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        Object.keys(source).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2_rollup\n    || globalThis.utility2_db\n    || globalThis.utility2_moduleExports\n);\n// init exports\nglobalThis.local = local;\n}());\n\n\n\n/* istanbul ignore next */\n// run browser js-env code - init-test\n(function () {\nif (!local.isBrowser) {\n    return;\n}\nlocal.testRunBrowser = function (event) {\n    if (!event || (\n        event\n        && event.currentTarget\n        && event.currentTarget.className\n        && event.currentTarget.className.includes\n        && event.currentTarget.className.includes(\"onreset\")\n    )) {\n        // reset output\n        Array.from(document.querySelectorAll(\n            \"body > .resettable\"\n        )).forEach(function (element) {\n            switch (element.tagName) {\n            case \"INPUT\":\n            case \"TEXTAREA\":\n                element.value = \"\";\n                break;\n            default:\n                element.textContent = \"\";\n            }\n        });\n    }\n    switch (event && event.currentTarget && event.currentTarget.id) {\n    case \"testRunButton1\":\n        // show tests\n        if (document.querySelector(\n            \"#testReportDiv1\"\n        ).style.maxHeight === \"0px\") {\n            local.uiAnimateSlideDown(document.querySelector(\n                \"#testReportDiv1\"\n            ));\n            document.querySelector(\n                \"#testRunButton1\"\n            ).textContent = \"hide internal test\";\n            local.modeTest = 1;\n            local.testRunDefault(local);\n        // hide tests\n        } else {\n            local.uiAnimateSlideUp(document.querySelector(\n                \"#testReportDiv1\"\n            ));\n            document.querySelector(\n                \"#testRunButton1\"\n            ).textContent = \"run internal test\";\n        }\n        break;\n    /* validateLineSortedReset */\n    // custom-case\n    case \"dbExportButton1\":\n    case \"dbImportButton1\":\n    case \"dbImportInput1\":\n    case \"dbResetButton1\":\n        local.db.onEventDomDb(event);\n        break;\n    }\n    if (document.querySelector(\n        \"#inputTextareaEval1\"\n    ) && (!event || (\n        event\n        && event.currentTarget\n        && event.currentTarget.className\n        && event.currentTarget.className.includes\n        && event.currentTarget.className.includes(\"oneval\")\n    ))) {\n        // try to eval input-code\n        try {\n            eval(document.querySelector( // jslint ignore:line\n                \"#inputTextareaEval1\"\n            ).value);\n        } catch (errorCaught) {\n            console.error(errorCaught);\n        }\n    }\n};\n\nlocal.uiEventDelegate = local.uiEventDelegate || function (event) {\n    // filter non-input keyup-event\n    event.targetOnEvent = event.target.closest(\"[data-onevent]\");\n    if (!event.targetOnEvent) {\n        return;\n    }\n    // rate-limit keyup\n    if (event.type === \"keyup\") {\n        local.uiEventDelegateKeyupEvent = event;\n        if (local.uiEventDelegateKeyupTimerTimeout !== 2) {\n            local.uiEventDelegateKeyupTimerTimeout = (\n                local.uiEventDelegateKeyupTimerTimeout\n                || setTimeout(function () {\n                    local.uiEventDelegateKeyupTimerTimeout = 2;\n                    local.uiEventDelegate(local.uiEventDelegateKeyupEvent);\n                }, 100)\n            );\n            return;\n        }\n        local.uiEventDelegateKeyupTimerTimeout = null;\n        if (!event.target.closest(\"input, option, select, textarea\")) {\n            return;\n        }\n    }\n    switch (event.targetOnEvent.tagName) {\n    case \"BUTTON\":\n    case \"FORM\":\n        event.preventDefault();\n        break;\n    }\n    event.stopPropagation();\n    local.uiEventListenerDict[event.targetOnEvent.dataset.onevent](event);\n};\n\nlocal.uiEventListenerDict = local.uiEventListenerDict || {};\n\nlocal.uiEventListenerDict.testRunBrowser = local.testRunBrowser;\n\n// log stderr and stdout to #outputStdoutTextarea1\n[\"error\", \"log\"].forEach(function (key) {\n    console[key + \"_original\"] = console[key + \"_original\"] || console[key];\n    console[key] = function () {\n        var argList;\n        var element;\n        argList = Array.from(arguments); // jslint ignore:line\n        console[key + \"_original\"].apply(console, argList);\n        element = document.querySelector(\n            \"#outputStdoutTextarea1\"\n        );\n        if (!element) {\n            return;\n        }\n        // append text to #outputStdoutTextarea1\n        element.value += argList.map(function (arg) {\n            return (\n                typeof arg === \"string\"\n                ? arg\n                : JSON.stringify(arg, null, 4)\n            );\n        }).join(\" \").replace((\n            /\\u001b\\[\\d*m/g\n        ), \"\") + \"\\n\";\n        // scroll textarea to bottom\n        element.scrollTop = element.scrollHeight;\n    };\n});\n// init event-handling\n[\"Change\", \"Click\", \"Keyup\", \"Submit\"].forEach(function (eventType) {\n    Array.from(document.querySelectorAll(\n        \".eventDelegate\" + eventType\n    )).forEach(function (element) {\n        element.addEventListener(eventType.toLowerCase(), local.uiEventDelegate);\n    });\n});\n// run tests\nlocal.testRunBrowser();\n}());\n\n\n\n/* istanbul ignore next */\n// run node js-env code - init-test\n(function () {\nif (local.isBrowser) {\n    return;\n}\n// init exports\nmodule.exports = local;\n/* validateLineSortedReset */\n// init assets\nlocal.assetsDict = local.assetsDict || {};\n[\n    \"assets.index.template.html\",\n    \"assets.swgg.swagger.json\",\n    \"assets.swgg.swagger.server.json\"\n].forEach(function (file) {\n    file = \"/\" + file;\n    local.assetsDict[file] = local.assetsDict[file] || \"\";\n    if (local.fs.existsSync(local.__dirname + file)) {\n        local.assetsDict[file] = local.fs.readFileSync(\n            local.__dirname + file,\n            \"utf8\"\n        );\n    }\n});\n/* jslint ignore:start */\nlocal.assetsDict[\"/assets.index.template.html\"] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"utf-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<!-- \"assets.utility2.template.html\" -->\\n\\\n<title>{{env.npm_package_name}} ({{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/* jslint utility2:true */\\n\\\n/*csslint\\n\\\n*/\\n\\\n/* csslint ignore:start */\\n\\\n*,\\n\\\n*:after,\\n\\\n*:before {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\n/* csslint ignore:end */\\n\\\n@keyframes uiAnimateShake {\\n\\\n    0%, 50% {\\n\\\n        transform: translateX(10px);\\n\\\n    }\\n\\\n    25%, 75% {\\n\\\n        transform: translateX(-10px);\\n\\\n    }\\n\\\n    100% {\\n\\\n        transform: translateX(0);\\n\\\n    }\\n\\\n}\\n\\\n@keyframes uiAnimateSpin {\\n\\\n    0% {\\n\\\n        transform: rotate(0deg);\\n\\\n    }\\n\\\n    100% {\\n\\\n        transform: rotate(360deg);\\n\\\n    }\\n\\\n}\\n\\\na {\\n\\\n    overflow-wrap: break-word;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #eef;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 0 40px;\\n\\\n}\\n\\\nbody > div,\\n\\\nbody > form > div,\\n\\\nbody > form > input,\\n\\\nbody > form > pre,\\n\\\nbody > form > textarea,\\n\\\nbody > form > .button,\\n\\\nbody > input,\\n\\\nbody > pre,\\n\\\nbody > textarea,\\n\\\nbody > .button {\\n\\\n    margin-bottom: 20px;\\n\\\n}\\n\\\nbody > form > input,\\n\\\nbody > form > .button,\\n\\\nbody > input,\\n\\\nbody > .button {\\n\\\n    width: 20rem;\\n\\\n}\\n\\\nbody > form > textarea,\\n\\\nbody > textarea {\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\nbody > textarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\ncode,\\n\\\npre,\\n\\\ntextarea {\\n\\\n    font-family: Consolas, Menlo, monospace;\\n\\\n    font-size: small;\\n\\\n}\\n\\\npre {\\n\\\n    overflow-wrap: break-word;\\n\\\n    white-space: pre-wrap;\\n\\\n}\\n\\\ntextarea {\\n\\\n    overflow: auto;\\n\\\n    white-space: pre;\\n\\\n}\\n\\\n.button {\\n\\\n    background-color: #fff;\\n\\\n    border: 1px solid;\\n\\\n    border-bottom-color: rgb(186, 186, 186);\\n\\\n    border-left-color: rgb(209, 209, 209);\\n\\\n    border-radius: 4px;\\n\\\n    border-right-color: rgb(209, 209, 209);\\n\\\n    border-top-color: rgb(216, 216, 216);\\n\\\n    color: #00d;\\n\\\n    cursor: pointer;\\n\\\n    display: inline-block;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    font-size: 12px;\\n\\\n    font-style: normal;\\n\\\n    font-weight: normal;\\n\\\n    margin: 0;\\n\\\n    padding: 2px 7px 3px 7px;\\n\\\n    text-align: center;\\n\\\n    text-decoration: underline;\\n\\\n}\\n\\\n.colorError {\\n\\\n    color: #d00;\\n\\\n}\\n\\\n.uiAnimateShake {\\n\\\n    animation-duration: 500ms;\\n\\\n    animation-name: uiAnimateShake;\\n\\\n}\\n\\\n.uiAnimateSlide {\\n\\\n    overflow-y: hidden;\\n\\\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    text-align: center;\\n\\\n}\\n\\\n.zeroPixel {\\n\\\n    border: 0;\\n\\\n    height: 0;\\n\\\n    margin: 0;\\n\\\n    padding: 0;\\n\\\n    width: 0;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 500ms, width 1500ms; width: 0%; z-index: 1;\"></div>\\n\\\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\\n\\\n<a class=\"zeroPixel\" download=\"db.persistence.json\" href=\"\" id=\"dbExportA1\"></a>\\n\\\n<input class=\"zeroPixel\" id=\"dbImportInput1\" type=\"file\">\\n\\\n<script>\\n\\\n/* jslint utility2:true */\\n\\\n// init domOnEventWindowOnloadTimeElapsed\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will measure and print the time-elapsed for window.onload\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    if (window.domOnEventWindowOnloadTimeElapsed) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventWindowOnloadTimeElapsed = Date.now() + 100;\\n\\\n    window.addEventListener(\"load\", function () {\\n\\\n        setTimeout(function () {\\n\\\n            window.domOnEventWindowOnloadTimeElapsed = (\\n\\\n                Date.now()\\n\\\n                - window.domOnEventWindowOnloadTimeElapsed\\n\\\n            );\\n\\\n            console.error(\\n\\\n                \"domOnEventWindowOnloadTimeElapsed = \"\\n\\\n                + window.domOnEventWindowOnloadTimeElapsed\\n\\\n            );\\n\\\n        }, 100);\\n\\\n    });\\n\\\n}());\\n\\\n\\n\\\n\\n\\\n\\n\\\n// init timerIntervalAjaxProgressUpdate\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will increment the ajax-progress-bar\\n\\\n * until the webpage has loaded\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    var ajaxProgressDiv1;\\n\\\n    var ajaxProgressState;\\n\\\n    var ajaxProgressUpdate;\\n\\\n    if (\\n\\\n        window.timerIntervalAjaxProgressUpdate\\n\\\n        || !document.querySelector(\\n\\\n            \"#ajaxProgressDiv1\"\\n\\\n        )\\n\\\n    ) {\\n\\\n        return;\\n\\\n    }\\n\\\n    ajaxProgressDiv1 = document.querySelector(\\n\\\n        \"#ajaxProgressDiv1\"\\n\\\n    );\\n\\\n    setTimeout(function () {\\n\\\n        ajaxProgressDiv1.style.width = \"25%\";\\n\\\n    });\\n\\\n    ajaxProgressState = 0;\\n\\\n    ajaxProgressUpdate = (\\n\\\n        window.local\\n\\\n        && window.local.ajaxProgressUpdate\\n\\\n    ) || function () {\\n\\\n        ajaxProgressDiv1.style.width = \"100%\";\\n\\\n        setTimeout(function () {\\n\\\n            ajaxProgressDiv1.style.background = \"transparent\";\\n\\\n            setTimeout(function () {\\n\\\n                ajaxProgressDiv1.style.width = \"0%\";\\n\\\n            }, 500);\\n\\\n        }, 1000);\\n\\\n    };\\n\\\n    window.timerIntervalAjaxProgressUpdate = setInterval(function () {\\n\\\n        ajaxProgressState += 1;\\n\\\n        ajaxProgressDiv1.style.width = Math.max(\\n\\\n            100 - 75 * Math.exp(-0.125 * ajaxProgressState),\\n\\\n            ajaxProgressDiv1.style.width.slice(0, -1) | 0\\n\\\n        ) + \"%\";\\n\\\n    }, 1000);\\n\\\n    window.addEventListener(\"load\", function () {\\n\\\n        clearInterval(window.timerIntervalAjaxProgressUpdate);\\n\\\n        ajaxProgressUpdate();\\n\\\n    });\\n\\\n}());\\n\\\n\\n\\\n\\n\\\n\\n\\\n// init domOnEventSelectAllWithinPre\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will limit select-all within <pre tabIndex=\"0\"> elements\\n\\\n * https://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    if (window.domOnEventSelectAllWithinPre) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventSelectAllWithinPre = function (event) {\\n\\\n        var range;\\n\\\n        var selection;\\n\\\n        if (\\n\\\n            event\\n\\\n            && event.key === \"a\"\\n\\\n            && (event.ctrlKey || event.metaKey)\\n\\\n            && event.target.closest(\"pre\")\\n\\\n        ) {\\n\\\n            range = document.createRange();\\n\\\n            range.selectNodeContents(event.target.closest(\"pre\"));\\n\\\n            selection = window.getSelection();\\n\\\n            selection.removeAllRanges();\\n\\\n            selection.addRange(range);\\n\\\n            event.preventDefault();\\n\\\n        }\\n\\\n    };\\n\\\n    // init event-handling\\n\\\n    document.addEventListener(\\n\\\n        \"keydown\",\\n\\\n        window.domOnEventSelectAllWithinPre\\n\\\n    );\\n\\\n}());\\n\\\n</script>\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} ({{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\\n\\\n<button class=\"button eventDelegateClick onreset\" data-onevent=\"testRunBrowser\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div class=\"uiAnimateSlide\" id=\"testReportDiv1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbResetButton1\" id=\"dbResetButton1\">\\n\\\n    reset database\\n\\\n</button><br>\\n\\\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbExportButton1\" id=\"dbExportButton1\">\\n\\\n    export database -&gt; file\\n\\\n</button><br>\\n\\\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbImportButton1\" id=\"dbImportButton1\">\\n\\\n    import database &lt;- file\\n\\\n</button><br>\\n\\\n<label>edit or paste script below to\\n\\\n    <a\\n\\\n        href=\"https://kaizhu256.github.io/node-db-lite/build..beta..travis-ci.org/apidoc.html\"\\n\\\n        target=\"_blank\"\\n\\\n    >eval</a>\\n\\\n</label>\\n\\\n<textarea id=\"inputTextareaEval1\">\\n\\\n/*jslint browser: true, node: true*/\\n\\\n\"use strict\";\\n\\\nvar dbTable1, modeNext, onNext;\\n\\\nmodeNext = 0;\\n\\\nonNext = function (error, data) {\\n\\\n    modeNext = error\\n\\\n        ? Infinity\\n\\\n        : modeNext + 1;\\n\\\n    switch (modeNext) {\\n\\\n    case 1:\\n\\\n        dbTable1 = window.dbTable1 = window.utility2_db.dbTableCreateOne({\\n\\\n            name: \"dbTable1\"\\n\\\n        }, onNext);\\n\\\n        break;\\n\\\n    case 2:\\n\\\n        dbTable1.idIndexCreate({ name: \"field1\" }, onNext);\\n\\\n        break;\\n\\\n    case 3:\\n\\\n        dbTable1.crudSetOneById({ field1: \"aa\", field2: 1, field3: \"foo\" }, onNext);\\n\\\n        break;\\n\\\n    case 4:\\n\\\n        dbTable1.crudSetOneById({ field1: \"bb\", field2: 2, field3: \"bar\" }, onNext);\\n\\\n        break;\\n\\\n    case 5:\\n\\\n        dbTable1.crudSetOneById({ field1: \"cc\", field2: 3, field3: \"baz\" }, onNext);\\n\\\n        break;\\n\\\n    case 6:\\n\\\n        dbTable1.crudRemoveOneById({ field1: \"aa\" }, onNext);\\n\\\n        break;\\n\\\n    case 7:\\n\\\n        dbTable1.crudUpdateOneById({ field1: \"bb\", field2: -1 }, onNext);\\n\\\n        break;\\n\\\n    case 8:\\n\\\n        dbTable1.crudSetOneById({ field2: Math.random() }, onNext);\\n\\\n        break;\\n\\\n    case 9:\\n\\\n        dbTable1.crudGetManyByQuery({\\n\\\n            limit: Infinity,\\n\\\n            query: { field2: { $gte: -Infinity, $lte: Infinity } },\\n\\\n            skip: 0,\\n\\\n            sort: [{ fieldName: \"_timeUpdated\", idDescending: true }]\\n\\\n        }, onNext);\\n\\\n        break;\\n\\\n    case 10:\\n\\\n        console.error(data);\\n\\\n        dbTable1.crudCountAll(onNext);\\n\\\n        break;\\n\\\n    case 11:\\n\\\n        console.error(\"number of rows: \" + data);\\n\\\n        break;\\n\\\n    default:\\n\\\n        console.error(error.stack);\\n\\\n    }\\n\\\n};\\n\\\nonNext();\\n\\\n</textarea>\\n\\\n<button class=\"button eventDelegateClick oneval onreset\" data-onevent=\"testRunBrowser\" id=\"dbEvalButton1\">eval script</button><br>\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputStdoutTextarea1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script>window.utility2_onReadyBefore.counter += 1;</script>\\n\\\n<script src=\"jsonp.utility2.stateInit?callback=window.utility2.stateInit\"></script>\\n\\\n<script src=\"assets.db.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<script>window.utility2_onReadyBefore();</script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n/* jslint ignore:end */\n/* validateLineSortedReset */\n/* jslint ignore:start */\nlocal.assetsDict[\"/assets.db.js\"] =\n    local.assetsDict[\"/assets.db.js\"] ||\n    local.fs.readFileSync(local.__dirname + \"/lib.db.js\", \"utf8\"\n).replace((/^#!\\//), \"// \");\n/* jslint ignore:end */\n/* validateLineSortedReset */\nlocal.assetsDict[\"/\"] = local.assetsDict[\"/assets.index.template.html\"]\n.replace((\n    /\\{\\{env\\.(\\w+?)\\}\\}/g\n), function (match0, match1) {\n    switch (match1) {\n    case \"npm_package_description\":\n        return \"the greatest app in the world!\";\n    case \"npm_package_name\":\n        return \"db-lite\";\n    case \"npm_package_nameLib\":\n        return \"db\";\n    case \"npm_package_version\":\n        return \"0.0.1\";\n    default:\n        return match0;\n    }\n});\nlocal.assetsDict[\"/assets.example.html\"] = local.assetsDict[\"/\"];\nlocal.assetsDict[\"/index.html\"] = local.assetsDict[\"/\"];\n// init cli\nif (module !== require.main || globalThis.utility2_rollup) {\n    return;\n}\n/* validateLineSortedReset */\nlocal.assetsDict[\"/assets.example.js\"] = (\n    local.assetsDict[\"/assets.example.js\"]\n    || local.fs.readFileSync(__filename, \"utf8\")\n);\nlocal.assetsDict[\"/favicon.ico\"] = local.assetsDict[\"/favicon.ico\"] || \"\";\n// if $npm_config_timeout_exit exists,\n// then exit this process after $npm_config_timeout_exit ms\nif (Number(process.env.npm_config_timeout_exit)) {\n    setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n}\n// start server\nif (globalThis.utility2_serverHttp1) {\n    return;\n}\nprocess.env.PORT = process.env.PORT || \"8081\";\nconsole.error(\"server starting on port \" + process.env.PORT);\nlocal.http.createServer(function (request, response) {\n    request.urlParsed = local.url.parse(request.url);\n    if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n        response.end(local.assetsDict[request.urlParsed.pathname]);\n        return;\n    }\n    response.statusCode = 404;\n    response.end();\n}).listen(process.env.PORT);\n}());\n\n\n\n}());","/assets.swgg.swagger.json":"","/assets.test.js":"/* istanbul instrument in package db */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw the error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-condition\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        Object.keys(source).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (globalThis.utility2 || require(\"utility2\")).requireReadme();\nglobalThis.local = local;\n// init test\nlocal.testRunDefault(local);\n}());\n\n\n\n// run shared js-env code - function\n(function () {\nlocal.testCase_dbLoad_error = function (options, onError) {\n/*\n * this function will test dbLoad's error handling-behavior\n */\n    local.testMock([\n        [local, {\n            storageKeys: function (fnc) {\n                fnc(local.errorDefault);\n            }\n        }]\n    ], function (onError) {\n        local.dbLoad(function (error) {\n            // validate error occurred\n            local.assertThrow(error, error);\n        });\n        onError(null, options);\n    }, onError);\n};\n\nlocal.testCase_dbTable_crudGetManyByQuery = function (options, onError) {\n/*\n * this function will test dbTable's crudGetManyByQuery handling-behavior\n */\n    options = {};\n    // test dbTableCreateOne's create handling-behavior\n    options.dbTable = local.dbTableCreateOne({\n        name: \"testCase_dbTable_crudGetManyByQuery\"\n    });\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // test isDirty handling-behavior\n    options.dbTable.crudRemoveOneById(options.dbTable.crudSetOneById({\n        field1: \"dirty\"\n    }));\n    // test null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        // test shuffle handling-behavior\n        shuffle: true\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    options.data = local.identity([\n        [],\n        [[], \"\", 0, {}, false, null, undefined],\n        -0.5,\n        -1,\n        -Infinity,\n        0,\n        0.5,\n        1,\n        Infinity,\n        NaN,\n        {},\n        false,\n        null,\n        true,\n        undefined\n    ]).sort().map(function (element) {\n        return {\n            field1: element\n        };\n    });\n    options.data = options.data.concat(options.data.map(function (dbRow) {\n        return {\n            field1: JSON.stringify(dbRow.field1)\n        };\n    }));\n    // test dbTableCreateOne's crudSetManyById handling-behavior\n    options.data = options.dbTable.crudSetManyById(options.data);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 30);\n    // validate data\n    [\n        [],\n        [[], \"\", 0, {}, false, null, undefined],\n        -0.5,\n        -1,\n        undefined,\n        0,\n        0.5,\n        1,\n        undefined,\n        undefined,\n        {},\n        false,\n        undefined,\n        true,\n        undefined,\n        \"[]\",\n        \"[[],\\\"\\\",0,{},false,null,null]\",\n        \"-0.5\",\n        \"-1\",\n        \"null\",\n        \"0\",\n        \"0.5\",\n        \"1\",\n        \"null\",\n        \"null\",\n        \"{}\",\n        \"false\",\n        \"null\",\n        \"true\",\n        undefined\n    ].forEach(function (element, ii) {\n        local.assertJsonEqual(element, options.data[ii].field1);\n    });\n    // test null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $undefined: null}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $undefined: {}\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $eq's boolean handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: true\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 1);\n    local.assertJsonEqual(options.data, [true]);\n    // test $eq's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: null\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 7);\n    local.assertJsonEqual(\n        options.data.slice(0, -1),\n        [null, null, null, null, null, null]\n    );\n    // test $eq's number handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: 0\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 2);\n    local.assertJsonEqual(options.data.slice(0, -1), [0]);\n    // test $eq's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: \"{}\"\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 1);\n    local.assertJsonEqual(options.data, [\"{}\"]);\n    // test $exists's false handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $exists: false}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 7);\n    // test $exists's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $exists: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 7);\n    // test $exists's true handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $exists: true\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 23);\n    // test $gt's boolean handling-behavior\n    // test $lt's boolean handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $gt: false, $lt: true}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $gt's null-case handling-behavior\n    // test $lt's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gt: false,\n                $lt: true\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $gt's number handling-behavior\n    // test $lt's number handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gt: -1,\n                $lt: 1\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 4);\n    local.assertJsonEqual(options.data.slice(0, -1), [-0.5, 0, 0.5]);\n    // test $gt's string handling-behavior\n    // test $lt's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gt: \"false\",\n                $lt: \"true\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 4);\n    local.assertJsonEqual(options.data, [\"null\", \"null\", \"null\", \"null\"]);\n    // test $gte's boolean handling-behavior\n    // test $lte's boolean handling-behavior\n    // test $ne's boolean handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $gte: false, $lte: true, $ne: false}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 2);\n    local.assertJsonEqual(options.data.slice(0, -1), [true]);\n    // test $gte's null-case handling-behavior\n    // test $lte's null-case handling-behavior\n    // test $ne's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gte: null,\n                $lte: null,\n                $ne: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 1);\n    local.assertJsonEqual(options.data.slice(0, -1), []);\n    // test $gte's number handling-behavior\n    // test $lte's number handling-behavior\n    // test $ne's number handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gte: -1,\n                $lte: 1,\n                $ne: 0\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 5);\n    local.assertJsonEqual(options.data.slice(0, -1), [-1, -0.5, 0.5, 1]);\n    // test $gte's number handling-behavior\n    // test $lte's number handling-behavior\n    // test $ne's number handling-behavior\n    // test fieldList handling-behavior\n    // test limit handling-behavior\n    // test skip handling-behavior\n    // test sort's isDescending handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        fieldList: [\"field1\"],\n        limit: 2,\n        query: {\n            field1: {\n                $gte: -1,\n                $lte: 1,\n                $ne: 0\n            }\n        },\n        skip: 2,\n        sort: [{\n            fieldName: \"field1\",\n            isDescending: true\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 2);\n    local.assertJsonEqual(options.data.slice(), [0.5, -0.5]);\n    // test $gte's string handling-behavior\n    // test $lte's string handling-behavior\n    // test $ne's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gte: \"false\",\n                $lte: \"true\",\n                $ne: \"null\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 2);\n    local.assertJsonEqual(options.data, [\"false\", \"true\"]);\n    // test $in's list handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $in: [true, 1]}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 2);\n    local.assertJsonEqual(options.data, [true, 1]);\n    // test $in's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $in: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $in's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $in: \"0.5\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 3);\n    local.assertJsonEqual(options.data.slice(0, -1), [\"0\", \"0.5\"]);\n    // test $nin's list handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $nin: [0, null]}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 22);\n    // test $nin's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $nin: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $nin's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $nin: \"[[],\\\"\\\",0,1,{},false,null,true]\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 4);\n    local.assertJsonEqual(options.data.slice(0, -1), [\"-0.5\", \"-1\", \"0.5\"]);\n    // test $not's number handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n            $not: {\n                    $gte: 0\n                }\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 26);\n    local.assertJsonEqual(options.data.slice(0, 15), [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        false,\n        true,\n        -1,\n        -0.5,\n        \"-0.5\",\n        \"-1\",\n        \"0\",\n        \"0.5\",\n        \"1\"\n    ]);\n    // test $not's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $not: {\n                    $gte: \"0\"\n                }\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 17);\n    local.assertJsonEqual(options.data.slice(0, -1), [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        false,\n        true,\n        -1,\n        -0.5,\n        0,\n        0.5,\n        1,\n        \"-0.5\",\n        \"-1\",\n        {}\n    ]);\n    // test $or's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: { $or: null},\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $or's empty-list handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            $or: []\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $or's list handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            $or: [{\n                field1: { $eq: -0.5}\n            }, {\n                field1: {\n                    $eq: 0\n                }\n            }, {\n                field1: {\n                    $eq: 0.5\n                }\n            }]\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 4);\n    local.assertJsonEqual(options.data.slice(0, -1), [-0.5, 0, 0.5]);\n    // test $regex's regex handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $regex: (\n                /1|true/\n            )}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 6);\n    local.assertJsonEqual(options.data, [true, -1, 1, \"-1\", \"1\", \"true\"]);\n    // test $regex's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $regex: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $typeof's boolean handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $typeof: \"boolean\"}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 3);\n    // test $typeof's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $typeof's number handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: \"number\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 6);\n    // test $typeof's object handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: \"object\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 8);\n    // test $typeof's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: \"string\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 15);\n    // test $typeof's symbol handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: \"symbol\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $typeof's undefined handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: \"undefined\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    onError();\n};\n\nlocal.testCase_dbTable_crudNullCase = function (options, onError) {\n/*\n * this function will test dbTable's crud null-case handling-behavior\n */\n    options = {};\n    // test dbTableCreateMany's null-case handling-behavior\n    local.dbTableCreateMany();\n    // test dbTableCreateOne's onError handling-behavior\n    options.dbTable = local.dbTableCreateOne({\n        name: \"testCase_dbTable_crudNullCase\"\n    }, local.onErrorDefault);\n    // test dbTableCreateOne's null-case handling-behavior\n    options.dbTable = local.dbTableCreateOne({\n        name: \"testCase_dbTable_crudNullCase\"\n    });\n    // test crudRemoveAll's null-case handling-behavior\n    options.dbTable.crudRemoveAll();\n    // test cancel-pending-save handling-behavior\n    options.dbTable.save(local.nop);\n    // test drop's null-case handling-behavior\n    options.dbTable.drop();\n    // test idIndexCreate's null-case handling-behavior\n    options.dbTable.idIndexCreate({\n        name: \"_id\"\n    });\n    // test idIndexRemove's null-case handling-behavior\n    options.dbTable.idIndexRemove({\n        name: \"_id\"\n    });\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // test crudCountManyByQuery's null-case handling-behavior\n    options.data = options.dbTable.crudCountManyByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, 0);\n    // test crudGetManyById's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyById();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudGetManyByQuery's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudGetOneById's null-case handling-behavior\n    options.data = options.dbTable.crudGetOneById();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    // test crudGetOneByRandom's null-case handling-behavior\n    options.data = options.dbTable.crudGetOneByRandom();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    // test crudGetOneByQuery's null-case handling-behavior\n    options.data = options.dbTable.crudGetOneByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    // test crudRemoveManyById's null-case handling-behavior\n    options.data = options.dbTable.crudRemoveManyById();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudRemoveManyByQuery's null-case handling-behavior\n    options.data = options.dbTable.crudRemoveManyByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudRemoveOneById's null-case handling-behavior\n    options.data = options.dbTable.crudRemoveOneById();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    // test crudUpdateManyById's null-case handling-behavior\n    options.data = options.dbTable.crudUpdateManyById();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudUpdateManyByQuery's null-case handling-behavior\n    options.data = options.dbTable.crudUpdateManyByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudSetOneById's and crudUpdateOneById's null-case handling-behavior\n    [\"crudSetOneById\", \"crudUpdateOneById\"].forEach(function (operation) {\n        options.data = options.dbTable[operation]();\n        // validate dbRowCount\n        local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n        options._id = options.data._id;\n        // validate timestamp\n        local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n        // test crudRemoveOneById's soft-delete handling-behavior\n        options.data = options.dbTable.crudRemoveOneById(options);\n        // validate dbRowCount\n        local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n        // validate data\n        local.assertJsonEqual(options.data._id, options._id);\n    });\n    // test crudGetOneById's null-case handling-behavior\n    options.data = options.dbTable.crudGetOneById(options);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    // test crudRemoveOneById's null-case handling-behavior\n    options.data = options.dbTable.crudRemoveOneById(options);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    onError();\n};\n\nlocal.testCase_dbTable_crudXxxById = function (options, onError) {\n/*\n * this function will test dbTable's crudXxxById handling-behavior\n */\n    options = {};\n    // test dbTableCreateMany's create handling-behavior\n    options.dbTable = local.dbTableCreateMany([{\n        idIndexCreateList: [null],\n        idIndexRemoveList: [null],\n        name: \"testCase_dbTable_crudXxxById\"\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // test crudSetManyById's insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([null, null]);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate data\n    local.assertJsonEqual(options.data.length, 2);\n    // test crudRemoveManyById's soft-delete handling-behavior\n    options.data = options.dbTable.crudRemoveManyById(options.data);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data.length, 2);\n    // test crudSetManyById's insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([null, {\n        field1: 1,\n        field2: 2,\n        field3: 3\n    }])[1];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonNotEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, undefined);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, 2);\n    local.assertJsonEqual(options.data.field3, 3);\n    // test idIndexCreate's create handling-behavior\n    // coverage-hack - $isRemoved\n    options.dbTable.crudSetOneById({\n        _id: \"undefined\"\n    });\n    options.dbTable.crudRemoveOneById({\n        _id: \"undefined\"\n    });\n    options._id = options.data._id;\n    options.dbTable.idIndexCreate({\n        isInteger: true,\n        name: \"id2\"\n    });\n    // test crudGetManyById's get handling-behavior\n    options.data = options.dbTable.crudGetManyById([{\n        _id: options._id\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonNotEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, 2);\n    // test crudUpdateManyById's update handling-behavior\n    options.id2 = options.data.id2;\n    options.data = options.dbTable.crudUpdateManyById([{\n        id2: options.id2,\n        field2: NaN,\n        field3: [new Date(0)]\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate timestamp\n    local.assertThrow(options.data._timeCreated <= options.data._timeUpdated, options.data);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, [\"1970-01-01T00:00:00.000Z\"]);\n    // test crudSetManyById's replace handling-behavior\n    options.data = options.dbTable.crudSetManyById([{\n        id2: options.id2\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudUpdateManyById's update handling-behavior\n    options.data = options.dbTable.crudUpdateManyById([{\n        id2: options.id2,\n        field1: 1\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate timestamp\n    local.assertThrow(options.data._timeCreated <= options.data._timeUpdated, options.data);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudRemoveManyById's soft-delete handling-behavior\n    options.data = options.dbTable.crudRemoveManyById([options])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudSetManyById's re-insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([{\n        id2: options.id2\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonNotEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudRemoveManyById's soft-delete handling-behavior\n    options._id = options.data._id;\n    options.data = options.dbTable.crudRemoveManyById([options])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    onError();\n};\n\nlocal.testCase_dbTable_crudXxxByQuery = function (options, onError) {\n/*\n * this function will test dbTable's crudXxxByQuery handling-behavior\n */\n    options = {};\n    // test dbTableCreateMany's create handling-behavior\n    options.dbTable = local.dbTableCreateMany([{\n        idIndexCreateList: [null],\n        idIndexRemoveList: [null],\n        name: \"testCase_dbTable_crudXxxByQuery\"\n    }])[0];\n    // drop dbTable\n    options.dbTable.drop();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 0);\n    // test crudSetManyById's insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([null, null]);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate data\n    local.assertJsonEqual(options.data.length, 2);\n    // test crudRemoveManyByQuery's soft-delete handling-behavior\n    options.data = options.dbTable.crudRemoveManyByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 0);\n    // validate data\n    local.assertJsonEqual(options.data.length, 2);\n    // test crudSetManyById's insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([null, {\n        field1: 1,\n        field2: 2,\n        field3: 3\n    }])[1];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonNotEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, undefined);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, 2);\n    local.assertJsonEqual(options.data.field3, 3);\n    // test idIndexCreate's create handling-behavior\n    options._id = options.data._id;\n    options.dbTable.idIndexCreate({\n        isInteger: true,\n        name: \"id2\"\n    });\n    // test crudGetManyByQuery's get handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            _id: options._id\n        }\n    })[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonNotEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, 2);\n    // test crudGetOneByQuery's get handling-behavior\n    options.data = options.dbTable.crudGetOneByQuery({\n        _id: options._id\n    });\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonNotEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, 2);\n    // test crudUpdateManyByQuery's update handling-behavior\n    options.id2 = options.data.id2;\n    options.data = options.dbTable.crudUpdateManyByQuery({\n        id2: options.id2\n    }, {\n        id2: options.id2,\n        field2: NaN,\n        field3: [new Date(0)]\n    })[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate timestamp\n    local.assertThrow(options.data._timeCreated <= options.data._timeUpdated, options.data);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, [\"1970-01-01T00:00:00.000Z\"]);\n    // test crudSetManyById's replace handling-behavior\n    options.data = options.dbTable.crudSetManyById([{\n        id2: options.id2\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudUpdateManyByQuery's update handling-behavior\n    options.data = options.dbTable.crudUpdateManyByQuery({\n        id2: options.id2\n    }, {\n        id2: options.id2,\n        field1: 1\n    })[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate timestamp\n    local.assertThrow(options.data._timeCreated <= options.data._timeUpdated, options.data);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudRemoveManyByQuery's soft-delete handling-behavior\n    options.data = options.dbTable.crudRemoveManyByQuery({\n        _id: options._id\n    })[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 1);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudSetManyById's re-insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([{\n        id2: options.id2\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonNotEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudRemoveManyByQuery's soft-delete handling-behavior\n    options._id = options.data._id;\n    options.data = options.dbTable.crudRemoveManyByQuery({\n        _id: options._id\n    })[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 1);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    onError();\n};\n\nlocal.testCase_dbTable_persistence = function (options, onError) {\n/*\n * this function will test dbTable's persistence handling-behavior\n */\n    options = {};\n    // remove all dbRow's from db\n    local.dbCrudRemoveAll();\n    // drop db\n    local.dbDrop();\n    // save db\n    local.dbSave();\n    // load db\n    local.dbLoad();\n    // import db\n    local.dbImport(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"name\\\":\\\"_id\\\"}\\n\"\n        + \"testCase_dbTable_persistence idIndexCreate {\\\"name\\\":\\\"id2\\\"}\\n\"\n        + \"testCase_dbTable_persistence sizeLimit 0\\n\"\n        + \"testCase_dbTable_persistence sortDefault []\\n\"\n        + \"testCase_dbTable_persistence dbRowSet {\\\"_id\\\":\\\"id1\\\"}\\n\"\n        + \"undefined undefined undefined\"\n    );\n    options.dbTable = local.dbTableCreateOne({\n        name: \"testCase_dbTable_persistence\"\n    });\n    options.data = local.dbExport();\n    // validate dbTable has idIndex._id\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"_id\\\"}\"\n    ) >= 0, options.data);\n    // validate dbTable has idIndex.id2\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"id2\\\"}\"\n    ) >= 0, options.data);\n    // validate dbTable has dbRow1\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence dbRowSet {\\\"_id\\\":\\\"id1\\\",\"\n    ) >= 0, options.data);\n    // remove all dbRow's from dbTable\n    options.dbTable.crudRemoveAll();\n    options.data = options.dbTable.export();\n    // validate dbTable has idIndex._id\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"_id\\\"}\"\n    ) >= 0, options.data);\n    // validate dbTable has idIndex.id2\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"id2\\\"}\"\n    ) >= 0, options.data);\n    // validate dbTable has no dbRow1\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence dbRowSet {\\\"_id\\\":\\\"id1\\\",\"\n    ) < 0, options.data);\n    // drop dbTable\n    options.dbTable.drop();\n    options.data = options.dbTable.export();\n    // validate dbTable has idIndex._id\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"_id\\\"}\"\n    ) >= 0, options.data);\n    // validate dbTable has no idIndex.id2\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"id2\\\"}\"\n    ) < 0, options.data);\n    // validate dbTable has no dbRow1\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence dbRowSet {\\\"_id\\\":\\\"id1\\\",\"\n    ) < 0, options.data);\n    // save db\n    options.dbTable.save(function (error) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        // load db\n        local.dbLoad(onError);\n    });\n};\n\nlocal.testCase_dbTable_sizeLimit = function (options, onError) {\n/*\n * this function will test dbTable's sizeLimit handling-behavior\n */\n    options = {};\n    options.dbTable = local.dbTableCreateOne({\n        name: \"testCase_dbTable_sizeLimit\",\n        sizeLimit: 2\n    });\n    options.dbTable.crudSetOneById({});\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n    options.dbTable.crudSetOneById({});\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    options.dbTable.crudSetOneById({});\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    onError();\n};\n\nlocal.testCase_onEventDomDb_default = function (options, onError) {\n/*\n * this function will test onEventDomDb's default handling-behavior\n */\n    if (!local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    options = {};\n    options.addEventListener = local.nop;\n    options.click = local.nop;\n    options.files = [];\n    local.testMock([\n        [document, {\n            querySelector: function () {\n                return options;\n            }\n        }],\n        [local, {\n            dbDrop: function (onError) {\n                onError();\n            },\n            dbExport: local.nop,\n            dbImport: local.nop\n        }],\n        [globalThis, {\n            FileReader: function () {\n                this.addEventListener = function (_, fnc) {\n                    fnc(_);\n                };\n                this.readAsText = local.nop;\n            },\n            setTimeout: function (fnc) {\n                fnc();\n            },\n            utility2: null,\n            utility2_dbSeedList: null,\n            utility2_onReadyAfter: null,\n            utility2_onReadyBefore: null\n        }]\n    ], function (onError) {\n        [\n            \"dbExportButton1\",\n            \"dbImportButton1\",\n            \"dbImportInput1\",\n            \"dbResetButton1\"\n        ].forEach(function (id) {\n            [\"change\", \"click\"].forEach(function (type) {\n                [0, 1].forEach(function (ii) {\n                    options.files[0] = ii;\n                    local.onEventDomDb({\n                        target: {\n                            dataset: {},\n                            id: id\n                        },\n                        type: type\n                    });\n                    globalThis.utility2_dbSeedList = ii && [{\n                        name: \"dbTable1\"\n                    }];\n                });\n            });\n        });\n        onError();\n    }, onError);\n};\n\nlocal.testCase_sortCompare_default = function (options, onError) {\n/*\n * this function will test sortCompare's default handling-behavior\n */\n    options = {};\n    options.data = local.identity([\n        undefined,\n        [],\n        \"\",\n        -1, -Infinity, 0, 0, 1, Infinity,\n        {},\n        \"a\", \"aa\",\n        false, false, null, null, true, true\n    ]).sort();\n    options.data = options.data.sort(local.sortCompare);\n    local.assertJsonEqual(options.data.slice(0, -3), [\n        null, null,\n        false, false, true, true,\n        -Infinity, -1, 0, 0, 1, Infinity,\n        \"\", \"a\", \"aa\"\n    ]);\n    options.data = options.data.reverse().sort(local.sortCompare);\n    local.assertJsonEqual(options.data.slice(0, -3), [\n        null, null,\n        false, false, true, true,\n        -Infinity, -1, 0, 0, 1, Infinity,\n        \"\", \"a\", \"aa\"\n    ]);\n    // coverage-hack\n    options.data.forEach(function (aa) {\n        [{}, null, Symbol()].forEach(function (bb) {\n            local.sortCompare(aa, bb);\n            local.sortCompare(bb, aa);\n        });\n    });\n    onError();\n};\n\nlocal.testCase_storageXxx_misc = function (options, onError) {\n/*\n * this function will test storageXxx's misc handling-behavior\n */\n    var onParallel;\n    // jslint-hack\n    local.nop(options);\n    onParallel = local.onParallel(onError);\n    onParallel.counter += 1;\n    // test storageInit's init handling-behavior\n    local.storageInit();\n    // test storageInit's re-init handling-behavior\n    local.storageInit();\n    // test crud handling-behavior\n    onParallel.counter += 1;\n    local.storageClear(onParallel);\n    onParallel.counter += 1;\n    local.storageGetItem(\"undefined\", onParallel);\n    onParallel.counter += 1;\n    local.storageKeys(onParallel);\n    onParallel.counter += 1;\n    local.storageLength(onParallel);\n    onParallel.counter += 1;\n    local.storageRemoveItem(\"undefined\", onParallel);\n    onParallel.counter += 1;\n    local.storageSetItem(\"undefined\", \"undefined\", onParallel);\n    //!! onParallel.counter += 1;\n    //!! local.storageKeys(function () {\n        //!! if (local.isBrowser) {\n            //!! // test indexedDB's onupgradeneeded handling-behavior\n            //!! local._debugStorageRequestIndexedDB.onupgradeneeded();\n        //!! }\n        //!! onParallel();\n    //!! });\n    onParallel();\n};\n}());\n\n\n\n}());\n","/assets.utility2.base.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<!-- \"assets.utility2.template.html\" -->\n<title>db-lite (2018.12.30)</title>\n<style>\n/* jslint utility2:true */\n/*csslint\n*/\n/* csslint ignore:start */\n*,\n*:after,\n*:before {\n    box-sizing: border-box;\n}\n/* csslint ignore:end */\n@keyframes uiAnimateShake {\n    0%, 50% {\n        transform: translateX(10px);\n    }\n    25%, 75% {\n        transform: translateX(-10px);\n    }\n    100% {\n        transform: translateX(0);\n    }\n}\n@keyframes uiAnimateSpin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\na {\n    overflow-wrap: break-word;\n}\nbody {\n    background: #eef;\n    font-family: Arial, Helvetica, sans-serif;\n    margin: 0 40px;\n}\nbody > div,\nbody > form > div,\nbody > form > input,\nbody > form > pre,\nbody > form > textarea,\nbody > form > .button,\nbody > input,\nbody > pre,\nbody > textarea,\nbody > .button {\n    margin-bottom: 20px;\n}\nbody > form > input,\nbody > form > .button,\nbody > input,\nbody > .button {\n    width: 20rem;\n}\nbody > form > textarea,\nbody > textarea {\n    height: 10rem;\n    width: 100%;\n}\nbody > textarea[readonly] {\n    background: #ddd;\n}\ncode,\npre,\ntextarea {\n    font-family: Consolas, Menlo, monospace;\n    font-size: small;\n}\npre {\n    overflow-wrap: break-word;\n    white-space: pre-wrap;\n}\ntextarea {\n    overflow: auto;\n    white-space: pre;\n}\n.button {\n    background-color: #fff;\n    border: 1px solid;\n    border-bottom-color: rgb(186, 186, 186);\n    border-left-color: rgb(209, 209, 209);\n    border-radius: 4px;\n    border-right-color: rgb(209, 209, 209);\n    border-top-color: rgb(216, 216, 216);\n    color: #00d;\n    cursor: pointer;\n    display: inline-block;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: normal;\n    margin: 0;\n    padding: 2px 7px 3px 7px;\n    text-align: center;\n    text-decoration: underline;\n}\n.colorError {\n    color: #d00;\n}\n.uiAnimateShake {\n    animation-duration: 500ms;\n    animation-name: uiAnimateShake;\n}\n.uiAnimateSlide {\n    overflow-y: hidden;\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\n}\n.utility2FooterDiv {\n    text-align: center;\n}\n.zeroPixel {\n    border: 0;\n    height: 0;\n    margin: 0;\n    padding: 0;\n    width: 0;\n}\n</style>\n</head>\n<body>\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 500ms, width 1500ms; width: 0%; z-index: 1;\"></div>\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\n<a class=\"zeroPixel\" download=\"db.persistence.json\" href=\"\" id=\"dbExportA1\"></a>\n<input class=\"zeroPixel\" id=\"dbImportInput1\" type=\"file\">\n<script>\n/* jslint utility2:true */\n// init domOnEventWindowOnloadTimeElapsed\n(function () {\n/*\n * this function will measure and print the time-elapsed for window.onload\n */\n    \"use strict\";\n    if (window.domOnEventWindowOnloadTimeElapsed) {\n        return;\n    }\n    window.domOnEventWindowOnloadTimeElapsed = Date.now() + 100;\n    window.addEventListener(\"load\", function () {\n        setTimeout(function () {\n            window.domOnEventWindowOnloadTimeElapsed = (\n                Date.now()\n                - window.domOnEventWindowOnloadTimeElapsed\n            );\n            console.error(\n                \"domOnEventWindowOnloadTimeElapsed = \"\n                + window.domOnEventWindowOnloadTimeElapsed\n            );\n        }, 100);\n    });\n}());\n\n\n\n// init timerIntervalAjaxProgressUpdate\n(function () {\n/*\n * this function will increment the ajax-progress-bar\n * until the webpage has loaded\n */\n    \"use strict\";\n    var ajaxProgressDiv1;\n    var ajaxProgressState;\n    var ajaxProgressUpdate;\n    if (\n        window.timerIntervalAjaxProgressUpdate\n        || !document.querySelector(\n            \"#ajaxProgressDiv1\"\n        )\n    ) {\n        return;\n    }\n    ajaxProgressDiv1 = document.querySelector(\n        \"#ajaxProgressDiv1\"\n    );\n    setTimeout(function () {\n        ajaxProgressDiv1.style.width = \"25%\";\n    });\n    ajaxProgressState = 0;\n    ajaxProgressUpdate = (\n        window.local\n        && window.local.ajaxProgressUpdate\n    ) || function () {\n        ajaxProgressDiv1.style.width = \"100%\";\n        setTimeout(function () {\n            ajaxProgressDiv1.style.background = \"transparent\";\n            setTimeout(function () {\n                ajaxProgressDiv1.style.width = \"0%\";\n            }, 500);\n        }, 1000);\n    };\n    window.timerIntervalAjaxProgressUpdate = setInterval(function () {\n        ajaxProgressState += 1;\n        ajaxProgressDiv1.style.width = Math.max(\n            100 - 75 * Math.exp(-0.125 * ajaxProgressState),\n            ajaxProgressDiv1.style.width.slice(0, -1) | 0\n        ) + \"%\";\n    }, 1000);\n    window.addEventListener(\"load\", function () {\n        clearInterval(window.timerIntervalAjaxProgressUpdate);\n        ajaxProgressUpdate();\n    });\n}());\n\n\n\n// init domOnEventSelectAllWithinPre\n(function () {\n/*\n * this function will limit select-all within <pre tabIndex=\"0\"> elements\n * https://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\n */\n    \"use strict\";\n    if (window.domOnEventSelectAllWithinPre) {\n        return;\n    }\n    window.domOnEventSelectAllWithinPre = function (event) {\n        var range;\n        var selection;\n        if (\n            event\n            && event.key === \"a\"\n            && (event.ctrlKey || event.metaKey)\n            && event.target.closest(\"pre\")\n        ) {\n            range = document.createRange();\n            range.selectNodeContents(event.target.closest(\"pre\"));\n            selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n            event.preventDefault();\n        }\n    };\n    // init event-handling\n    document.addEventListener(\n        \"keydown\",\n        window.domOnEventSelectAllWithinPre\n    );\n}());\n</script>\n<h1>\n\n    <a\n        \n        href=\"https://github.com/kaizhu256/node-db-lite\"\n        \n        target=\"_blank\"\n    >\n\n        db-lite (2018.12.30)\n\n    </a>\n\n</h1>\n<h3>this zero-dependency package will provide a persistent, in-browser database, with a working web-demo</h3>\n\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\n<button class=\"button eventDelegateClick onreset\" data-onevent=\"testRunBrowser\" id=\"testRunButton1\">run internal test</button><br>\n<div class=\"uiAnimateSlide\" id=\"testReportDiv1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\n\n\n\n\n<label>stderr and stdout</label>\n<textarea class=\"resettable\" id=\"outputStdoutTextarea1\" readonly></textarea>\n\n\n<script src=\"assets.app.js\"></script>\n\n\n<div class=\"utility2FooterDiv\">\n    [ this app was created with\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\n    ]\n</div>\n</body>\n</html>\n","/index.rollup.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<!-- \"assets.utility2.template.html\" -->\n<title>db-lite (2018.12.30)</title>\n<style>\n/* jslint utility2:true */\n/*csslint\n*/\n/* csslint ignore:start */\n*,\n*:after,\n*:before {\n    box-sizing: border-box;\n}\n/* csslint ignore:end */\n@keyframes uiAnimateShake {\n    0%, 50% {\n        transform: translateX(10px);\n    }\n    25%, 75% {\n        transform: translateX(-10px);\n    }\n    100% {\n        transform: translateX(0);\n    }\n}\n@keyframes uiAnimateSpin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\na {\n    overflow-wrap: break-word;\n}\nbody {\n    background: #eef;\n    font-family: Arial, Helvetica, sans-serif;\n    margin: 0 40px;\n}\nbody > div,\nbody > form > div,\nbody > form > input,\nbody > form > pre,\nbody > form > textarea,\nbody > form > .button,\nbody > input,\nbody > pre,\nbody > textarea,\nbody > .button {\n    margin-bottom: 20px;\n}\nbody > form > input,\nbody > form > .button,\nbody > input,\nbody > .button {\n    width: 20rem;\n}\nbody > form > textarea,\nbody > textarea {\n    height: 10rem;\n    width: 100%;\n}\nbody > textarea[readonly] {\n    background: #ddd;\n}\ncode,\npre,\ntextarea {\n    font-family: Consolas, Menlo, monospace;\n    font-size: small;\n}\npre {\n    overflow-wrap: break-word;\n    white-space: pre-wrap;\n}\ntextarea {\n    overflow: auto;\n    white-space: pre;\n}\n.button {\n    background-color: #fff;\n    border: 1px solid;\n    border-bottom-color: rgb(186, 186, 186);\n    border-left-color: rgb(209, 209, 209);\n    border-radius: 4px;\n    border-right-color: rgb(209, 209, 209);\n    border-top-color: rgb(216, 216, 216);\n    color: #00d;\n    cursor: pointer;\n    display: inline-block;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: normal;\n    margin: 0;\n    padding: 2px 7px 3px 7px;\n    text-align: center;\n    text-decoration: underline;\n}\n.colorError {\n    color: #d00;\n}\n.uiAnimateShake {\n    animation-duration: 500ms;\n    animation-name: uiAnimateShake;\n}\n.uiAnimateSlide {\n    overflow-y: hidden;\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\n}\n.utility2FooterDiv {\n    text-align: center;\n}\n.zeroPixel {\n    border: 0;\n    height: 0;\n    margin: 0;\n    padding: 0;\n    width: 0;\n}\n</style>\n</head>\n<body>\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 500ms, width 1500ms; width: 0%; z-index: 1;\"></div>\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\n<a class=\"zeroPixel\" download=\"db.persistence.json\" href=\"\" id=\"dbExportA1\"></a>\n<input class=\"zeroPixel\" id=\"dbImportInput1\" type=\"file\">\n<script>\n/* jslint utility2:true */\n// init domOnEventWindowOnloadTimeElapsed\n(function () {\n/*\n * this function will measure and print the time-elapsed for window.onload\n */\n    \"use strict\";\n    if (window.domOnEventWindowOnloadTimeElapsed) {\n        return;\n    }\n    window.domOnEventWindowOnloadTimeElapsed = Date.now() + 100;\n    window.addEventListener(\"load\", function () {\n        setTimeout(function () {\n            window.domOnEventWindowOnloadTimeElapsed = (\n                Date.now()\n                - window.domOnEventWindowOnloadTimeElapsed\n            );\n            console.error(\n                \"domOnEventWindowOnloadTimeElapsed = \"\n                + window.domOnEventWindowOnloadTimeElapsed\n            );\n        }, 100);\n    });\n}());\n\n\n\n// init timerIntervalAjaxProgressUpdate\n(function () {\n/*\n * this function will increment the ajax-progress-bar\n * until the webpage has loaded\n */\n    \"use strict\";\n    var ajaxProgressDiv1;\n    var ajaxProgressState;\n    var ajaxProgressUpdate;\n    if (\n        window.timerIntervalAjaxProgressUpdate\n        || !document.querySelector(\n            \"#ajaxProgressDiv1\"\n        )\n    ) {\n        return;\n    }\n    ajaxProgressDiv1 = document.querySelector(\n        \"#ajaxProgressDiv1\"\n    );\n    setTimeout(function () {\n        ajaxProgressDiv1.style.width = \"25%\";\n    });\n    ajaxProgressState = 0;\n    ajaxProgressUpdate = (\n        window.local\n        && window.local.ajaxProgressUpdate\n    ) || function () {\n        ajaxProgressDiv1.style.width = \"100%\";\n        setTimeout(function () {\n            ajaxProgressDiv1.style.background = \"transparent\";\n            setTimeout(function () {\n                ajaxProgressDiv1.style.width = \"0%\";\n            }, 500);\n        }, 1000);\n    };\n    window.timerIntervalAjaxProgressUpdate = setInterval(function () {\n        ajaxProgressState += 1;\n        ajaxProgressDiv1.style.width = Math.max(\n            100 - 75 * Math.exp(-0.125 * ajaxProgressState),\n            ajaxProgressDiv1.style.width.slice(0, -1) | 0\n        ) + \"%\";\n    }, 1000);\n    window.addEventListener(\"load\", function () {\n        clearInterval(window.timerIntervalAjaxProgressUpdate);\n        ajaxProgressUpdate();\n    });\n}());\n\n\n\n// init domOnEventSelectAllWithinPre\n(function () {\n/*\n * this function will limit select-all within <pre tabIndex=\"0\"> elements\n * https://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\n */\n    \"use strict\";\n    if (window.domOnEventSelectAllWithinPre) {\n        return;\n    }\n    window.domOnEventSelectAllWithinPre = function (event) {\n        var range;\n        var selection;\n        if (\n            event\n            && event.key === \"a\"\n            && (event.ctrlKey || event.metaKey)\n            && event.target.closest(\"pre\")\n        ) {\n            range = document.createRange();\n            range.selectNodeContents(event.target.closest(\"pre\"));\n            selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n            event.preventDefault();\n        }\n    };\n    // init event-handling\n    document.addEventListener(\n        \"keydown\",\n        window.domOnEventSelectAllWithinPre\n    );\n}());\n</script>\n<h1>\n\n    <a\n        \n        href=\"https://github.com/kaizhu256/node-db-lite\"\n        \n        target=\"_blank\"\n    >\n\n        db-lite (2018.12.30)\n\n    </a>\n\n</h1>\n<h3>this zero-dependency package will provide a persistent, in-browser database, with a working web-demo</h3>\n\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\n<button class=\"button eventDelegateClick onreset\" data-onevent=\"testRunBrowser\" id=\"testRunButton1\">run internal test</button><br>\n<div class=\"uiAnimateSlide\" id=\"testReportDiv1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\n\n\n\n\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbResetButton1\" id=\"dbResetButton1\">\n    reset database\n</button><br>\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbExportButton1\" id=\"dbExportButton1\">\n    export database -&gt; file\n</button><br>\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbImportButton1\" id=\"dbImportButton1\">\n    import database &lt;- file\n</button><br>\n<label>edit or paste script below to\n    <a\n        href=\"https://kaizhu256.github.io/node-db-lite/build..beta..travis-ci.org/apidoc.html\"\n        target=\"_blank\"\n    >eval</a>\n</label>\n<textarea id=\"inputTextareaEval1\">\n/*jslint browser: true, node: true*/\n\"use strict\";\nvar dbTable1, modeNext, onNext;\nmodeNext = 0;\nonNext = function (error, data) {\n    modeNext = error\n        ? Infinity\n        : modeNext + 1;\n    switch (modeNext) {\n    case 1:\n        dbTable1 = window.dbTable1 = window.utility2_db.dbTableCreateOne({\n            name: \"dbTable1\"\n        }, onNext);\n        break;\n    case 2:\n        dbTable1.idIndexCreate({ name: \"field1\" }, onNext);\n        break;\n    case 3:\n        dbTable1.crudSetOneById({ field1: \"aa\", field2: 1, field3: \"foo\" }, onNext);\n        break;\n    case 4:\n        dbTable1.crudSetOneById({ field1: \"bb\", field2: 2, field3: \"bar\" }, onNext);\n        break;\n    case 5:\n        dbTable1.crudSetOneById({ field1: \"cc\", field2: 3, field3: \"baz\" }, onNext);\n        break;\n    case 6:\n        dbTable1.crudRemoveOneById({ field1: \"aa\" }, onNext);\n        break;\n    case 7:\n        dbTable1.crudUpdateOneById({ field1: \"bb\", field2: -1 }, onNext);\n        break;\n    case 8:\n        dbTable1.crudSetOneById({ field2: Math.random() }, onNext);\n        break;\n    case 9:\n        dbTable1.crudGetManyByQuery({\n            limit: Infinity,\n            query: { field2: { $gte: -Infinity, $lte: Infinity } },\n            skip: 0,\n            sort: [{ fieldName: \"_timeUpdated\", idDescending: true }]\n        }, onNext);\n        break;\n    case 10:\n        console.error(data);\n        dbTable1.crudCountAll(onNext);\n        break;\n    case 11:\n        console.error(\"number of rows: \" + data);\n        break;\n    default:\n        console.error(error.stack);\n    }\n};\nonNext();\n</textarea>\n<button class=\"button eventDelegateClick oneval onreset\" data-onevent=\"testRunBrowser\" id=\"dbEvalButton1\">eval script</button><br>\n<label>stderr and stdout</label>\n<textarea class=\"resettable\" id=\"outputStdoutTextarea1\" readonly></textarea>\n\n\n<script src=\"assets.app.js\"></script>\n\n\n<div class=\"utility2FooterDiv\">\n    [ this app was created with\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\n    ]\n</div>\n</body>\n</html>\n","/":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<!-- \"assets.utility2.template.html\" -->\n<title>db-lite (2018.12.30)</title>\n<style>\n/* jslint utility2:true */\n/*csslint\n*/\n/* csslint ignore:start */\n*,\n*:after,\n*:before {\n    box-sizing: border-box;\n}\n/* csslint ignore:end */\n@keyframes uiAnimateShake {\n    0%, 50% {\n        transform: translateX(10px);\n    }\n    25%, 75% {\n        transform: translateX(-10px);\n    }\n    100% {\n        transform: translateX(0);\n    }\n}\n@keyframes uiAnimateSpin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\na {\n    overflow-wrap: break-word;\n}\nbody {\n    background: #eef;\n    font-family: Arial, Helvetica, sans-serif;\n    margin: 0 40px;\n}\nbody > div,\nbody > form > div,\nbody > form > input,\nbody > form > pre,\nbody > form > textarea,\nbody > form > .button,\nbody > input,\nbody > pre,\nbody > textarea,\nbody > .button {\n    margin-bottom: 20px;\n}\nbody > form > input,\nbody > form > .button,\nbody > input,\nbody > .button {\n    width: 20rem;\n}\nbody > form > textarea,\nbody > textarea {\n    height: 10rem;\n    width: 100%;\n}\nbody > textarea[readonly] {\n    background: #ddd;\n}\ncode,\npre,\ntextarea {\n    font-family: Consolas, Menlo, monospace;\n    font-size: small;\n}\npre {\n    overflow-wrap: break-word;\n    white-space: pre-wrap;\n}\ntextarea {\n    overflow: auto;\n    white-space: pre;\n}\n.button {\n    background-color: #fff;\n    border: 1px solid;\n    border-bottom-color: rgb(186, 186, 186);\n    border-left-color: rgb(209, 209, 209);\n    border-radius: 4px;\n    border-right-color: rgb(209, 209, 209);\n    border-top-color: rgb(216, 216, 216);\n    color: #00d;\n    cursor: pointer;\n    display: inline-block;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: normal;\n    margin: 0;\n    padding: 2px 7px 3px 7px;\n    text-align: center;\n    text-decoration: underline;\n}\n.colorError {\n    color: #d00;\n}\n.uiAnimateShake {\n    animation-duration: 500ms;\n    animation-name: uiAnimateShake;\n}\n.uiAnimateSlide {\n    overflow-y: hidden;\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\n}\n.utility2FooterDiv {\n    text-align: center;\n}\n.zeroPixel {\n    border: 0;\n    height: 0;\n    margin: 0;\n    padding: 0;\n    width: 0;\n}\n</style>\n</head>\n<body>\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 500ms, width 1500ms; width: 0%; z-index: 1;\"></div>\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\n<a class=\"zeroPixel\" download=\"db.persistence.json\" href=\"\" id=\"dbExportA1\"></a>\n<input class=\"zeroPixel\" id=\"dbImportInput1\" type=\"file\">\n<script>\n/* jslint utility2:true */\n// init domOnEventWindowOnloadTimeElapsed\n(function () {\n/*\n * this function will measure and print the time-elapsed for window.onload\n */\n    \"use strict\";\n    if (window.domOnEventWindowOnloadTimeElapsed) {\n        return;\n    }\n    window.domOnEventWindowOnloadTimeElapsed = Date.now() + 100;\n    window.addEventListener(\"load\", function () {\n        setTimeout(function () {\n            window.domOnEventWindowOnloadTimeElapsed = (\n                Date.now()\n                - window.domOnEventWindowOnloadTimeElapsed\n            );\n            console.error(\n                \"domOnEventWindowOnloadTimeElapsed = \"\n                + window.domOnEventWindowOnloadTimeElapsed\n            );\n        }, 100);\n    });\n}());\n\n\n\n// init timerIntervalAjaxProgressUpdate\n(function () {\n/*\n * this function will increment the ajax-progress-bar\n * until the webpage has loaded\n */\n    \"use strict\";\n    var ajaxProgressDiv1;\n    var ajaxProgressState;\n    var ajaxProgressUpdate;\n    if (\n        window.timerIntervalAjaxProgressUpdate\n        || !document.querySelector(\n            \"#ajaxProgressDiv1\"\n        )\n    ) {\n        return;\n    }\n    ajaxProgressDiv1 = document.querySelector(\n        \"#ajaxProgressDiv1\"\n    );\n    setTimeout(function () {\n        ajaxProgressDiv1.style.width = \"25%\";\n    });\n    ajaxProgressState = 0;\n    ajaxProgressUpdate = (\n        window.local\n        && window.local.ajaxProgressUpdate\n    ) || function () {\n        ajaxProgressDiv1.style.width = \"100%\";\n        setTimeout(function () {\n            ajaxProgressDiv1.style.background = \"transparent\";\n            setTimeout(function () {\n                ajaxProgressDiv1.style.width = \"0%\";\n            }, 500);\n        }, 1000);\n    };\n    window.timerIntervalAjaxProgressUpdate = setInterval(function () {\n        ajaxProgressState += 1;\n        ajaxProgressDiv1.style.width = Math.max(\n            100 - 75 * Math.exp(-0.125 * ajaxProgressState),\n            ajaxProgressDiv1.style.width.slice(0, -1) | 0\n        ) + \"%\";\n    }, 1000);\n    window.addEventListener(\"load\", function () {\n        clearInterval(window.timerIntervalAjaxProgressUpdate);\n        ajaxProgressUpdate();\n    });\n}());\n\n\n\n// init domOnEventSelectAllWithinPre\n(function () {\n/*\n * this function will limit select-all within <pre tabIndex=\"0\"> elements\n * https://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\n */\n    \"use strict\";\n    if (window.domOnEventSelectAllWithinPre) {\n        return;\n    }\n    window.domOnEventSelectAllWithinPre = function (event) {\n        var range;\n        var selection;\n        if (\n            event\n            && event.key === \"a\"\n            && (event.ctrlKey || event.metaKey)\n            && event.target.closest(\"pre\")\n        ) {\n            range = document.createRange();\n            range.selectNodeContents(event.target.closest(\"pre\"));\n            selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n            event.preventDefault();\n        }\n    };\n    // init event-handling\n    document.addEventListener(\n        \"keydown\",\n        window.domOnEventSelectAllWithinPre\n    );\n}());\n</script>\n<h1>\n\n    <a\n        \n        href=\"https://github.com/kaizhu256/node-db-lite\"\n        \n        target=\"_blank\"\n    >\n\n        db-lite (2018.12.30)\n\n    </a>\n\n</h1>\n<h3>this zero-dependency package will provide a persistent, in-browser database, with a working web-demo</h3>\n\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\n<button class=\"button eventDelegateClick onreset\" data-onevent=\"testRunBrowser\" id=\"testRunButton1\">run internal test</button><br>\n<div class=\"uiAnimateSlide\" id=\"testReportDiv1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\n\n\n\n\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbResetButton1\" id=\"dbResetButton1\">\n    reset database\n</button><br>\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbExportButton1\" id=\"dbExportButton1\">\n    export database -&gt; file\n</button><br>\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbImportButton1\" id=\"dbImportButton1\">\n    import database &lt;- file\n</button><br>\n<label>edit or paste script below to\n    <a\n        href=\"https://kaizhu256.github.io/node-db-lite/build..beta..travis-ci.org/apidoc.html\"\n        target=\"_blank\"\n    >eval</a>\n</label>\n<textarea id=\"inputTextareaEval1\">\n/*jslint browser: true, node: true*/\n\"use strict\";\nvar dbTable1, modeNext, onNext;\nmodeNext = 0;\nonNext = function (error, data) {\n    modeNext = error\n        ? Infinity\n        : modeNext + 1;\n    switch (modeNext) {\n    case 1:\n        dbTable1 = window.dbTable1 = window.utility2_db.dbTableCreateOne({\n            name: \"dbTable1\"\n        }, onNext);\n        break;\n    case 2:\n        dbTable1.idIndexCreate({ name: \"field1\" }, onNext);\n        break;\n    case 3:\n        dbTable1.crudSetOneById({ field1: \"aa\", field2: 1, field3: \"foo\" }, onNext);\n        break;\n    case 4:\n        dbTable1.crudSetOneById({ field1: \"bb\", field2: 2, field3: \"bar\" }, onNext);\n        break;\n    case 5:\n        dbTable1.crudSetOneById({ field1: \"cc\", field2: 3, field3: \"baz\" }, onNext);\n        break;\n    case 6:\n        dbTable1.crudRemoveOneById({ field1: \"aa\" }, onNext);\n        break;\n    case 7:\n        dbTable1.crudUpdateOneById({ field1: \"bb\", field2: -1 }, onNext);\n        break;\n    case 8:\n        dbTable1.crudSetOneById({ field2: Math.random() }, onNext);\n        break;\n    case 9:\n        dbTable1.crudGetManyByQuery({\n            limit: Infinity,\n            query: { field2: { $gte: -Infinity, $lte: Infinity } },\n            skip: 0,\n            sort: [{ fieldName: \"_timeUpdated\", idDescending: true }]\n        }, onNext);\n        break;\n    case 10:\n        console.error(data);\n        dbTable1.crudCountAll(onNext);\n        break;\n    case 11:\n        console.error(\"number of rows: \" + data);\n        break;\n    default:\n        console.error(error.stack);\n    }\n};\nonNext();\n</textarea>\n<button class=\"button eventDelegateClick oneval onreset\" data-onevent=\"testRunBrowser\" id=\"dbEvalButton1\">eval script</button><br>\n<label>stderr and stdout</label>\n<textarea class=\"resettable\" id=\"outputStdoutTextarea1\" readonly></textarea>\n\n\n\n<script src=\"assets.utility2.rollup.js\"></script>\n<script>window.utility2_onReadyBefore.counter += 1;</script>\n<script src=\"jsonp.utility2.stateInit?callback=window.utility2.stateInit\"></script>\n<script src=\"assets.db.js\"></script>\n<script src=\"assets.example.js\"></script>\n<script src=\"assets.test.js\"></script>\n<script>window.utility2_onReadyBefore();</script>\n\n\n\n<div class=\"utility2FooterDiv\">\n    [ this app was created with\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\n    ]\n</div>\n</body>\n</html>\n"},"env":{"NODE_ENV":"test","npm_package_description":"this zero-dependency package will provide a persistent, in-browser database, with a working web-demo","npm_package_homepage":"https://github.com/kaizhu256/node-db-lite","npm_package_name":"db-lite","npm_package_nameLib":"db","npm_package_version":"2018.12.30"}}});