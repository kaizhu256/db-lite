{"/home/travis/build/kaizhu256/node-db-lite/test.js":"/* istanbul instrument in package db */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw the error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-condition\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        Object.keys(source).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (globalThis.utility2 || require(\"utility2\")).requireReadme();\nglobalThis.local = local;\n// init test\nlocal.testRunDefault(local);\n}());\n\n\n\n// run shared js-env code - function\n(function () {\nlocal.testCase_dbLoad_error = function (options, onError) {\n/*\n * this function will test dbLoad's error handling-behavior\n */\n    local.testMock([\n        [local, {\n            storageKeys: function (fnc) {\n                fnc(local.errorDefault);\n            }\n        }]\n    ], function (onError) {\n        local.dbLoad(function (error) {\n            // validate error occurred\n            local.assertThrow(error, error);\n        });\n        onError(null, options);\n    }, onError);\n};\n\nlocal.testCase_dbTable_crudGetManyByQuery = function (options, onError) {\n/*\n * this function will test dbTable's crudGetManyByQuery handling-behavior\n */\n    options = {};\n    // test dbTableCreateOne's create handling-behavior\n    options.dbTable = local.dbTableCreateOne({\n        name: \"testCase_dbTable_crudGetManyByQuery\"\n    });\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // test isDirty handling-behavior\n    options.dbTable.crudRemoveOneById(options.dbTable.crudSetOneById({\n        field1: \"dirty\"\n    }));\n    // test null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        // test shuffle handling-behavior\n        shuffle: true\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    options.data = local.identity([\n        [],\n        [[], \"\", 0, {}, false, null, undefined],\n        -0.5,\n        -1,\n        -Infinity,\n        0,\n        0.5,\n        1,\n        Infinity,\n        NaN,\n        {},\n        false,\n        null,\n        true,\n        undefined\n    ]).sort().map(function (element) {\n        return {\n            field1: element\n        };\n    });\n    options.data = options.data.concat(options.data.map(function (dbRow) {\n        return {\n            field1: JSON.stringify(dbRow.field1)\n        };\n    }));\n    // test dbTableCreateOne's crudSetManyById handling-behavior\n    options.data = options.dbTable.crudSetManyById(options.data);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 30);\n    // validate data\n    [\n        [],\n        [[], \"\", 0, {}, false, null, undefined],\n        -0.5,\n        -1,\n        undefined,\n        0,\n        0.5,\n        1,\n        undefined,\n        undefined,\n        {},\n        false,\n        undefined,\n        true,\n        undefined,\n        \"[]\",\n        \"[[],\\\"\\\",0,{},false,null,null]\",\n        \"-0.5\",\n        \"-1\",\n        \"null\",\n        \"0\",\n        \"0.5\",\n        \"1\",\n        \"null\",\n        \"null\",\n        \"{}\",\n        \"false\",\n        \"null\",\n        \"true\",\n        undefined\n    ].forEach(function (element, ii) {\n        local.assertJsonEqual(element, options.data[ii].field1);\n    });\n    // test null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $undefined: null}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $undefined: {}\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $eq's boolean handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: true\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 1);\n    local.assertJsonEqual(options.data, [true]);\n    // test $eq's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: null\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 7);\n    local.assertJsonEqual(\n        options.data.slice(0, -1),\n        [null, null, null, null, null, null]\n    );\n    // test $eq's number handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: 0\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 2);\n    local.assertJsonEqual(options.data.slice(0, -1), [0]);\n    // test $eq's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: \"{}\"\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 1);\n    local.assertJsonEqual(options.data, [\"{}\"]);\n    // test $exists's false handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $exists: false}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 7);\n    // test $exists's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $exists: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 7);\n    // test $exists's true handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $exists: true\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 23);\n    // test $gt's boolean handling-behavior\n    // test $lt's boolean handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $gt: false, $lt: true}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $gt's null-case handling-behavior\n    // test $lt's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gt: false,\n                $lt: true\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $gt's number handling-behavior\n    // test $lt's number handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gt: -1,\n                $lt: 1\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 4);\n    local.assertJsonEqual(options.data.slice(0, -1), [-0.5, 0, 0.5]);\n    // test $gt's string handling-behavior\n    // test $lt's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gt: \"false\",\n                $lt: \"true\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 4);\n    local.assertJsonEqual(options.data, [\"null\", \"null\", \"null\", \"null\"]);\n    // test $gte's boolean handling-behavior\n    // test $lte's boolean handling-behavior\n    // test $ne's boolean handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $gte: false, $lte: true, $ne: false}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 2);\n    local.assertJsonEqual(options.data.slice(0, -1), [true]);\n    // test $gte's null-case handling-behavior\n    // test $lte's null-case handling-behavior\n    // test $ne's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gte: null,\n                $lte: null,\n                $ne: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 1);\n    local.assertJsonEqual(options.data.slice(0, -1), []);\n    // test $gte's number handling-behavior\n    // test $lte's number handling-behavior\n    // test $ne's number handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gte: -1,\n                $lte: 1,\n                $ne: 0\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 5);\n    local.assertJsonEqual(options.data.slice(0, -1), [-1, -0.5, 0.5, 1]);\n    // test $gte's number handling-behavior\n    // test $lte's number handling-behavior\n    // test $ne's number handling-behavior\n    // test fieldList handling-behavior\n    // test limit handling-behavior\n    // test skip handling-behavior\n    // test sort's isDescending handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        fieldList: [\"field1\"],\n        limit: 2,\n        query: {\n            field1: {\n                $gte: -1,\n                $lte: 1,\n                $ne: 0\n            }\n        },\n        skip: 2,\n        sort: [{\n            fieldName: \"field1\",\n            isDescending: true\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 2);\n    local.assertJsonEqual(options.data.slice(), [0.5, -0.5]);\n    // test $gte's string handling-behavior\n    // test $lte's string handling-behavior\n    // test $ne's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $gte: \"false\",\n                $lte: \"true\",\n                $ne: \"null\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 2);\n    local.assertJsonEqual(options.data, [\"false\", \"true\"]);\n    // test $in's list handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $in: [true, 1]}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 2);\n    local.assertJsonEqual(options.data, [true, 1]);\n    // test $in's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $in: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $in's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $in: \"0.5\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 3);\n    local.assertJsonEqual(options.data.slice(0, -1), [\"0\", \"0.5\"]);\n    // test $nin's list handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $nin: [0, null]}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 22);\n    // test $nin's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $nin: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $nin's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $nin: \"[[],\\\"\\\",0,1,{},false,null,true]\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 4);\n    local.assertJsonEqual(options.data.slice(0, -1), [\"-0.5\", \"-1\", \"0.5\"]);\n    // test $not's number handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n            $not: {\n                    $gte: 0\n                }\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 26);\n    local.assertJsonEqual(options.data.slice(0, 15), [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        false,\n        true,\n        -1,\n        -0.5,\n        \"-0.5\",\n        \"-1\",\n        \"0\",\n        \"0.5\",\n        \"1\"\n    ]);\n    // test $not's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $not: {\n                    $gte: \"0\"\n                }\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 17);\n    local.assertJsonEqual(options.data.slice(0, -1), [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        false,\n        true,\n        -1,\n        -0.5,\n        0,\n        0.5,\n        1,\n        \"-0.5\",\n        \"-1\",\n        {}\n    ]);\n    // test $or's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: { $or: null},\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $or's empty-list handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            $or: []\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $or's list handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            $or: [{\n                field1: { $eq: -0.5}\n            }, {\n                field1: {\n                    $eq: 0\n                }\n            }, {\n                field1: {\n                    $eq: 0.5\n                }\n            }]\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 4);\n    local.assertJsonEqual(options.data.slice(0, -1), [-0.5, 0, 0.5]);\n    // test $regex's regex handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $regex: (\n                /1|true/\n            )}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 6);\n    local.assertJsonEqual(options.data, [true, -1, 1, \"-1\", \"1\", \"true\"]);\n    // test $regex's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $regex: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $typeof's boolean handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: { $typeof: \"boolean\"}\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 3);\n    // test $typeof's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: null\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $typeof's number handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: \"number\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 6);\n    // test $typeof's object handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: \"object\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 8);\n    // test $typeof's string handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: \"string\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    }).map(function (dbRow) {\n        return dbRow.field1;\n    });\n    local.assertJsonEqual(options.data.length, 15);\n    // test $typeof's symbol handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: \"symbol\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    // test $typeof's undefined handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            field1: {\n                $typeof: \"undefined\"\n            }\n        },\n        sort: [{\n            fieldName: \"field1\"\n        }]\n    });\n    local.assertJsonEqual(options.data.length, 0);\n    local.assertJsonEqual(options.data, []);\n    onError();\n};\n\nlocal.testCase_dbTable_crudNullCase = function (options, onError) {\n/*\n * this function will test dbTable's crud null-case handling-behavior\n */\n    options = {};\n    // test dbTableCreateMany's null-case handling-behavior\n    local.dbTableCreateMany();\n    // test dbTableCreateOne's onError handling-behavior\n    options.dbTable = local.dbTableCreateOne({\n        name: \"testCase_dbTable_crudNullCase\"\n    }, local.onErrorDefault);\n    // test dbTableCreateOne's null-case handling-behavior\n    options.dbTable = local.dbTableCreateOne({\n        name: \"testCase_dbTable_crudNullCase\"\n    });\n    // test crudRemoveAll's null-case handling-behavior\n    options.dbTable.crudRemoveAll();\n    // test cancel-pending-save handling-behavior\n    options.dbTable.save(local.nop);\n    // test drop's null-case handling-behavior\n    options.dbTable.drop();\n    // test idIndexCreate's null-case handling-behavior\n    options.dbTable.idIndexCreate({\n        name: \"_id\"\n    });\n    // test idIndexRemove's null-case handling-behavior\n    options.dbTable.idIndexRemove({\n        name: \"_id\"\n    });\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // test crudCountManyByQuery's null-case handling-behavior\n    options.data = options.dbTable.crudCountManyByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, 0);\n    // test crudGetManyById's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyById();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudGetManyByQuery's null-case handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudGetOneById's null-case handling-behavior\n    options.data = options.dbTable.crudGetOneById();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    // test crudGetOneByRandom's null-case handling-behavior\n    options.data = options.dbTable.crudGetOneByRandom();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    // test crudGetOneByQuery's null-case handling-behavior\n    options.data = options.dbTable.crudGetOneByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    // test crudRemoveManyById's null-case handling-behavior\n    options.data = options.dbTable.crudRemoveManyById();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudRemoveManyByQuery's null-case handling-behavior\n    options.data = options.dbTable.crudRemoveManyByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudRemoveOneById's null-case handling-behavior\n    options.data = options.dbTable.crudRemoveOneById();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    // test crudUpdateManyById's null-case handling-behavior\n    options.data = options.dbTable.crudUpdateManyById();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudUpdateManyByQuery's null-case handling-behavior\n    options.data = options.dbTable.crudUpdateManyByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, []);\n    // test crudSetOneById's and crudUpdateOneById's null-case handling-behavior\n    [\"crudSetOneById\", \"crudUpdateOneById\"].forEach(function (operation) {\n        options.data = options.dbTable[operation]();\n        // validate dbRowCount\n        local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n        options._id = options.data._id;\n        // validate timestamp\n        local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n        // test crudRemoveOneById's soft-delete handling-behavior\n        options.data = options.dbTable.crudRemoveOneById(options);\n        // validate dbRowCount\n        local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n        // validate data\n        local.assertJsonEqual(options.data._id, options._id);\n    });\n    // test crudGetOneById's null-case handling-behavior\n    options.data = options.dbTable.crudGetOneById(options);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    // test crudRemoveOneById's null-case handling-behavior\n    options.data = options.dbTable.crudRemoveOneById(options);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data, null);\n    onError();\n};\n\nlocal.testCase_dbTable_crudXxxById = function (options, onError) {\n/*\n * this function will test dbTable's crudXxxById handling-behavior\n */\n    options = {};\n    // test dbTableCreateMany's create handling-behavior\n    options.dbTable = local.dbTableCreateMany([{\n        idIndexCreateList: [null],\n        idIndexRemoveList: [null],\n        name: \"testCase_dbTable_crudXxxById\"\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // test crudSetManyById's insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([null, null]);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate data\n    local.assertJsonEqual(options.data.length, 2);\n    // test crudRemoveManyById's soft-delete handling-behavior\n    options.data = options.dbTable.crudRemoveManyById(options.data);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n    // validate data\n    local.assertJsonEqual(options.data.length, 2);\n    // test crudSetManyById's insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([null, {\n        field1: 1,\n        field2: 2,\n        field3: 3\n    }])[1];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonNotEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, undefined);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, 2);\n    local.assertJsonEqual(options.data.field3, 3);\n    // test idIndexCreate's create handling-behavior\n    // coverage-hack - $isRemoved\n    options.dbTable.crudSetOneById({\n        _id: \"undefined\"\n    });\n    options.dbTable.crudRemoveOneById({\n        _id: \"undefined\"\n    });\n    options._id = options.data._id;\n    options.dbTable.idIndexCreate({\n        isInteger: true,\n        name: \"id2\"\n    });\n    // test crudGetManyById's get handling-behavior\n    options.data = options.dbTable.crudGetManyById([{\n        _id: options._id\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonNotEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, 2);\n    // test crudUpdateManyById's update handling-behavior\n    options.id2 = options.data.id2;\n    options.data = options.dbTable.crudUpdateManyById([{\n        id2: options.id2,\n        field2: NaN,\n        field3: [new Date(0)]\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate timestamp\n    local.assertThrow(options.data._timeCreated <= options.data._timeUpdated, options.data);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, [\"1970-01-01T00:00:00.000Z\"]);\n    // test crudSetManyById's replace handling-behavior\n    options.data = options.dbTable.crudSetManyById([{\n        id2: options.id2\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudUpdateManyById's update handling-behavior\n    options.data = options.dbTable.crudUpdateManyById([{\n        id2: options.id2,\n        field1: 1\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate timestamp\n    local.assertThrow(options.data._timeCreated <= options.data._timeUpdated, options.data);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudRemoveManyById's soft-delete handling-behavior\n    options.data = options.dbTable.crudRemoveManyById([options])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudSetManyById's re-insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([{\n        id2: options.id2\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonNotEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudRemoveManyById's soft-delete handling-behavior\n    options._id = options.data._id;\n    options.data = options.dbTable.crudRemoveManyById([options])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    onError();\n};\n\nlocal.testCase_dbTable_crudXxxByQuery = function (options, onError) {\n/*\n * this function will test dbTable's crudXxxByQuery handling-behavior\n */\n    options = {};\n    // test dbTableCreateMany's create handling-behavior\n    options.dbTable = local.dbTableCreateMany([{\n        idIndexCreateList: [null],\n        idIndexRemoveList: [null],\n        name: \"testCase_dbTable_crudXxxByQuery\"\n    }])[0];\n    // drop dbTable\n    options.dbTable.drop();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 0);\n    // test crudSetManyById's insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([null, null]);\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate data\n    local.assertJsonEqual(options.data.length, 2);\n    // test crudRemoveManyByQuery's soft-delete handling-behavior\n    options.data = options.dbTable.crudRemoveManyByQuery();\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 0);\n    // validate data\n    local.assertJsonEqual(options.data.length, 2);\n    // test crudSetManyById's insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([null, {\n        field1: 1,\n        field2: 2,\n        field3: 3\n    }])[1];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonNotEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, undefined);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, 2);\n    local.assertJsonEqual(options.data.field3, 3);\n    // test idIndexCreate's create handling-behavior\n    options._id = options.data._id;\n    options.dbTable.idIndexCreate({\n        isInteger: true,\n        name: \"id2\"\n    });\n    // test crudGetManyByQuery's get handling-behavior\n    options.data = options.dbTable.crudGetManyByQuery({\n        query: {\n            _id: options._id\n        }\n    })[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonNotEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, 2);\n    // test crudGetOneByQuery's get handling-behavior\n    options.data = options.dbTable.crudGetOneByQuery({\n        _id: options._id\n    });\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonNotEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, 2);\n    // test crudUpdateManyByQuery's update handling-behavior\n    options.id2 = options.data.id2;\n    options.data = options.dbTable.crudUpdateManyByQuery({\n        id2: options.id2\n    }, {\n        id2: options.id2,\n        field2: NaN,\n        field3: [new Date(0)]\n    })[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate timestamp\n    local.assertThrow(options.data._timeCreated <= options.data._timeUpdated, options.data);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, [\"1970-01-01T00:00:00.000Z\"]);\n    // test crudSetManyById's replace handling-behavior\n    options.data = options.dbTable.crudSetManyById([{\n        id2: options.id2\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudUpdateManyByQuery's update handling-behavior\n    options.data = options.dbTable.crudUpdateManyByQuery({\n        id2: options.id2\n    }, {\n        id2: options.id2,\n        field1: 1\n    })[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate timestamp\n    local.assertThrow(options.data._timeCreated <= options.data._timeUpdated, options.data);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudRemoveManyByQuery's soft-delete handling-behavior\n    options.data = options.dbTable.crudRemoveManyByQuery({\n        _id: options._id\n    })[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 1);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, 1);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudSetManyById's re-insert handling-behavior\n    options.data = options.dbTable.crudSetManyById([{\n        id2: options.id2\n    }])[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n    // validate timestamp\n    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n    // validate data\n    local.assertJsonNotEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    // test crudRemoveManyByQuery's soft-delete handling-behavior\n    options._id = options.data._id;\n    options.data = options.dbTable.crudRemoveManyByQuery({\n        _id: options._id\n    })[0];\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 1);\n    // validate data\n    local.assertJsonEqual(options.data._id, options._id);\n    local.assertJsonEqual(options.data.id2, options.id2);\n    local.assertJsonEqual(options.data.field1, undefined);\n    local.assertJsonEqual(options.data.field2, undefined);\n    local.assertJsonEqual(options.data.field3, undefined);\n    onError();\n};\n\nlocal.testCase_dbTable_persistence = function (options, onError) {\n/*\n * this function will test dbTable's persistence handling-behavior\n */\n    options = {};\n    // remove all dbRow's from db\n    local.dbCrudRemoveAll();\n    // drop db\n    local.dbDrop();\n    // save db\n    local.dbSave();\n    // load db\n    local.dbLoad();\n    // import db\n    local.dbImport(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"name\\\":\\\"_id\\\"}\\n\"\n        + \"testCase_dbTable_persistence idIndexCreate {\\\"name\\\":\\\"id2\\\"}\\n\"\n        + \"testCase_dbTable_persistence sizeLimit 0\\n\"\n        + \"testCase_dbTable_persistence sortDefault []\\n\"\n        + \"testCase_dbTable_persistence dbRowSet {\\\"_id\\\":\\\"id1\\\"}\\n\"\n        + \"undefined undefined undefined\"\n    );\n    options.dbTable = local.dbTableCreateOne({\n        name: \"testCase_dbTable_persistence\"\n    });\n    options.data = local.dbExport();\n    // validate dbTable has idIndex._id\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"_id\\\"}\"\n    ) >= 0, options.data);\n    // validate dbTable has idIndex.id2\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"id2\\\"}\"\n    ) >= 0, options.data);\n    // validate dbTable has dbRow1\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence dbRowSet {\\\"_id\\\":\\\"id1\\\",\"\n    ) >= 0, options.data);\n    // remove all dbRow's from dbTable\n    options.dbTable.crudRemoveAll();\n    options.data = options.dbTable.export();\n    // validate dbTable has idIndex._id\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"_id\\\"}\"\n    ) >= 0, options.data);\n    // validate dbTable has idIndex.id2\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"id2\\\"}\"\n    ) >= 0, options.data);\n    // validate dbTable has no dbRow1\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence dbRowSet {\\\"_id\\\":\\\"id1\\\",\"\n    ) < 0, options.data);\n    // drop dbTable\n    options.dbTable.drop();\n    options.data = options.dbTable.export();\n    // validate dbTable has idIndex._id\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"_id\\\"}\"\n    ) >= 0, options.data);\n    // validate dbTable has no idIndex.id2\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence idIndexCreate {\\\"isInteger\\\":false,\\\"name\\\":\\\"id2\\\"}\"\n    ) < 0, options.data);\n    // validate dbTable has no dbRow1\n    local.assertThrow(options.data.indexOf(\n        \"testCase_dbTable_persistence dbRowSet {\\\"_id\\\":\\\"id1\\\",\"\n    ) < 0, options.data);\n    // save db\n    options.dbTable.save(function (error) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        // load db\n        local.dbLoad(onError);\n    });\n};\n\nlocal.testCase_dbTable_sizeLimit = function (options, onError) {\n/*\n * this function will test dbTable's sizeLimit handling-behavior\n */\n    options = {};\n    options.dbTable = local.dbTableCreateOne({\n        name: \"testCase_dbTable_sizeLimit\",\n        sizeLimit: 2\n    });\n    options.dbTable.crudSetOneById({});\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n    options.dbTable.crudSetOneById({});\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    options.dbTable.crudSetOneById({});\n    // validate dbRowCount\n    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n    onError();\n};\n\nlocal.testCase_onEventDomDb_default = function (options, onError) {\n/*\n * this function will test onEventDomDb's default handling-behavior\n */\n    if (!local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    options = {};\n    options.addEventListener = local.nop;\n    options.click = local.nop;\n    options.files = [];\n    local.testMock([\n        [document, {\n            querySelector: function () {\n                return options;\n            }\n        }],\n        [local, {\n            dbDrop: function (onError) {\n                onError();\n            },\n            dbExport: local.nop,\n            dbImport: local.nop\n        }],\n        [globalThis, {\n            FileReader: function () {\n                this.addEventListener = function (_, fnc) {\n                    fnc(_);\n                };\n                this.readAsText = local.nop;\n            },\n            setTimeout: function (fnc) {\n                fnc();\n            },\n            utility2: null,\n            utility2_dbSeedList: null,\n            utility2_onReadyAfter: null,\n            utility2_onReadyBefore: null\n        }]\n    ], function (onError) {\n        [\n            \"dbExportButton1\",\n            \"dbImportButton1\",\n            \"dbImportInput1\",\n            \"dbResetButton1\"\n        ].forEach(function (id) {\n            [\"change\", \"click\"].forEach(function (type) {\n                [0, 1].forEach(function (ii) {\n                    options.files[0] = ii;\n                    local.onEventDomDb({\n                        target: {\n                            dataset: {},\n                            id: id\n                        },\n                        type: type\n                    });\n                    globalThis.utility2_dbSeedList = ii && [{\n                        name: \"dbTable1\"\n                    }];\n                });\n            });\n        });\n        onError();\n    }, onError);\n};\n\nlocal.testCase_sortCompare_default = function (options, onError) {\n/*\n * this function will test sortCompare's default handling-behavior\n */\n    options = {};\n    options.data = local.identity([\n        undefined,\n        [],\n        \"\",\n        -1, -Infinity, 0, 0, 1, Infinity,\n        {},\n        \"a\", \"aa\",\n        false, false, null, null, true, true\n    ]).sort();\n    options.data = options.data.sort(local.sortCompare);\n    local.assertJsonEqual(options.data.slice(0, -3), [\n        null, null,\n        false, false, true, true,\n        -Infinity, -1, 0, 0, 1, Infinity,\n        \"\", \"a\", \"aa\"\n    ]);\n    options.data = options.data.reverse().sort(local.sortCompare);\n    local.assertJsonEqual(options.data.slice(0, -3), [\n        null, null,\n        false, false, true, true,\n        -Infinity, -1, 0, 0, 1, Infinity,\n        \"\", \"a\", \"aa\"\n    ]);\n    // coverage-hack\n    options.data.forEach(function (aa) {\n        [{}, null, Symbol()].forEach(function (bb) {\n            local.sortCompare(aa, bb);\n            local.sortCompare(bb, aa);\n        });\n    });\n    onError();\n};\n\nlocal.testCase_storageXxx_misc = function (options, onError) {\n/*\n * this function will test storageXxx's misc handling-behavior\n */\n    var onParallel;\n    // jslint-hack\n    local.nop(options);\n    onParallel = local.onParallel(onError);\n    onParallel.counter += 1;\n    // test storageInit's init handling-behavior\n    local.storageInit();\n    // test storageInit's re-init handling-behavior\n    local.storageInit();\n    // test crud handling-behavior\n    onParallel.counter += 1;\n    local.storageClear(onParallel);\n    onParallel.counter += 1;\n    local.storageGetItem(\"undefined\", onParallel);\n    onParallel.counter += 1;\n    local.storageKeys(onParallel);\n    onParallel.counter += 1;\n    local.storageLength(onParallel);\n    onParallel.counter += 1;\n    local.storageRemoveItem(\"undefined\", onParallel);\n    onParallel.counter += 1;\n    local.storageSetItem(\"undefined\", \"undefined\", onParallel);\n    //!! onParallel.counter += 1;\n    //!! local.storageKeys(function () {\n        //!! if (local.isBrowser) {\n            //!! // test indexedDB's onupgradeneeded handling-behavior\n            //!! local._debugStorageRequestIndexedDB.onupgradeneeded();\n        //!! }\n        //!! onParallel();\n    //!! });\n    onParallel();\n};\n}());\n\n\n\n}());\n","/home/travis/build/kaizhu256/node-db-lite/lib.db.js":"// usr/bin/env node\n/*\n * lib.db.js (2018.12.30)\n * https://github.com/kaizhu256/node-db-lite\n * this zero-dependency package will provide a persistent, in-browser database, with a working web-demo\n *\n * browser example:\n *     <script src=\"assets.db-lite.js\"></script>\n *     <script>\n *     var dbTable1;\n *     dbTable1 = window.dbTable1 = window.utility2_db.dbTableCreateOne({ name: \"dbTable1\" });\n *     dbTable1.idIndexCreate({ name: \"field1\" });\n *     dbTable1.crudSetOneById({ field1: \"hello\", field2: \"world\" });\n *     console.log(dbTable1.crudGetManyByQuery({\n *         limit: Infinity,\n *         query: { field1: \"hello\" },\n *         skip: 0,\n *         sort: [{ fieldName: 'field1', isDescending: false }]\n *     }));\n *     </script>\n *\n * node example:\n *     var db, dbTable1;\n *     utility2_db = require(\"./assets.db-lite.js\");\n *     dbTable1 = global.dbTable1 = utility2_db.dbTableCreateOne({ name: \"dbTable1\" });\n *     dbTable1.idIndexCreate({ name: \"field1\" });\n *     dbTable1.crudSetOneById({ field1: \"hello\", field2: \"world\" });\n *     console.log(dbTable1.crudGetManyByQuery({\n *         limit: Infinity,\n *         query: { field1: \"hello\" },\n *         skip: 0,\n *         sort: [{ fieldName: 'field1', isDescending: false }]\n *     }));\n */\n\n\n\n/* istanbul instrument in package db */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw the error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-condition\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        Object.keys(source).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n/* istanbul ignore next */\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2_rollup\n    // || globalThis.utility2_rollup_old\n    // || require(\"./assets.utility2.rollup.js\")\n    || globalThis.globalLocal\n);\n// init exports\nif (local.isBrowser) {\n    globalThis.utility2_db = local;\n} else {\n    module.exports = local;\n    module.exports.__dirname = __dirname;\n}\n// init lib main\nlocal.db = local;\n\n\n\n/* validateLineSortedReset */\nlocal.cliRun = function (option) {\n/*\n * this function will run the cli\n */\n    local.cliDict._eval = local.cliDict._eval || function () {\n    /*\n     * <code>\n     * will eval <code>\n     */\n        globalThis.local = local;\n        local.vm.runInThisContext(process.argv[3]);\n    };\n    local.cliDict[\"--eval\"] = local.cliDict[\"--eval\"] || local.cliDict._eval;\n    local.cliDict[\"-e\"] = local.cliDict[\"-e\"] || local.cliDict._eval;\n    local.cliDict._help = local.cliDict._help || function () {\n    /*\n     *\n     * will print help\n     */\n        var commandList;\n        var file;\n        var packageJson;\n        var text;\n        var textDict;\n        commandList = [{\n            argList: \"<arg2>  ...\",\n            description: \"usage:\",\n            command: [\"<arg1>\"]\n        }, {\n            argList: \"'console.log(\\\"hello world\\\")'\",\n            description: \"example:\",\n            command: [\"--eval\"]\n        }];\n        file = __filename.replace((\n            /.*\\//\n        ), \"\");\n        option = Object.assign({}, option);\n        packageJson = require(\"./package.json\");\n        // validate comment\n        option.rgxComment = option.rgxComment || (\n            /\\)\\u0020\\{\\n(?:|\\u0020{4})\\/\\*\\n(?:\\u0020|\\u0020{5})\\*((?:\\u0020<[^>]*?>|\\u0020\\.\\.\\.)*?)\\n(?:\\u0020|\\u0020{5})\\*\\u0020(will\\u0020.*?\\S)\\n(?:\\u0020|\\u0020{5})\\*\\/\\n(?:\\u0020{4}|\\u0020{8})\\S/\n        );\n        textDict = {};\n        Object.keys(local.cliDict).sort().forEach(function (key, ii) {\n            if (key[0] === \"_\" && key !== \"_default\") {\n                return;\n            }\n            text = String(local.cliDict[key]);\n            if (key === \"_default\") {\n                key = \"\";\n            }\n            textDict[text] = textDict[text] || (ii + 2);\n            ii = textDict[text];\n            if (commandList[ii]) {\n                commandList[ii].command.push(key);\n                return;\n            }\n            try {\n                commandList[ii] = option.rgxComment.exec(text);\n                commandList[ii] = {\n                    argList: (commandList[ii][1] || \"\").trim(),\n                    command: [key],\n                    description: commandList[ii][2]\n                };\n            } catch (ignore) {\n                local.assertThrow(null, new Error(\n                    \"cliRun - cannot parse comment in COMMAND \"\n                    + key + \":\\nnew RegExp(\"\n                    + JSON.stringify(option.rgxComment.source)\n                    + \").exec(\" + JSON.stringify(text)\n                    .replace((\n                        /\\\\\\\\/g\n                    ), \"\\u0000\")\n                    .replace((\n                        /\\\\n/g\n                    ), \"\\\\n\\\\\\n\")\n                    .replace((\n                        /\\u0000/g\n                    ), \"\\\\\\\\\") + \");\"\n                ));\n            }\n        });\n        text = \"\";\n        text += packageJson.name + \" (\" + packageJson.version + \")\\n\\n\";\n        text += commandList\n        .filter(function (element) {\n            return element;\n        })\n        .map(function (element, ii) {\n            element.command = element.command.filter(function (element) {\n                return element;\n            });\n            switch (ii) {\n            case 0:\n            case 1:\n                element.argList = [element.argList];\n                break;\n            default:\n                element.argList = element.argList.split(\" \");\n                element.description = (\n                    \"# COMMAND \"\n                    + (element.command[0] || \"<none>\") + \"\\n# \"\n                    + element.description\n                );\n            }\n            return (\n                element.description + \"\\n  \" + file\n                + (\"  \" + element.command.sort().join(\"|\") + \"  \")\n                    .replace((\n                    /^\\u0020{4}$/\n                ), \"  \")\n                + element.argList.join(\"  \")\n            );\n        })\n        .join(\"\\n\\n\");\n        console.log(text);\n    };\n    local.cliDict[\"--help\"] = local.cliDict[\"--help\"] || local.cliDict._help;\n    local.cliDict[\"-h\"] = local.cliDict[\"-h\"] || local.cliDict._help;\n    local.cliDict._default = local.cliDict._default || local.cliDict._help;\n    local.cliDict.help = local.cliDict.help || local.cliDict._help;\n    local.cliDict._interactive = local.cliDict._interactive || function () {\n    /*\n     *\n     * will start interactive-mode\n     */\n        globalThis.local = local;\n        local.identity(local.replStart || require(\"repl\").start)({\n            useGlobal: true\n        });\n    };\n    local.cliDict[\"--interactive\"] = (\n        local.cliDict[\"--interactive\"]\n        || local.cliDict._interactive\n    );\n    local.cliDict[\"-i\"] = local.cliDict[\"-i\"] || local.cliDict._interactive;\n    local.cliDict._version = local.cliDict._version || function () {\n    /*\n     *\n     * will print version\n     */\n        console.log(require(__dirname + \"/package.json\").version);\n    };\n    local.cliDict[\"--version\"] = (\n        local.cliDict[\"--version\"]\n        || local.cliDict._version\n    );\n    local.cliDict[\"-v\"] = local.cliDict[\"-v\"] || local.cliDict._version;\n    // default to --help command if no arguments are given\n    if (process.argv.length <= 2) {\n        local.cliDict._help();\n        return;\n    }\n    if (local.cliDict[process.argv[2]]) {\n        local.cliDict[process.argv[2]]();\n        return;\n    }\n    local.cliDict._default();\n};\n\nlocal.jsonCopy = function (obj) {\n/*\n * this function will deep-copy obj\n */\n    return (\n        obj === undefined\n        ? undefined\n        : JSON.parse(JSON.stringify(obj))\n    );\n};\n\nlocal.jsonStringifyOrdered = function (obj, replacer, space) {\n/*\n * this function will JSON.stringify <obj>,\n * with object-keys sorted and circular-references removed\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Syntax\n */\n    var circularSet;\n    var stringify;\n    var tmp;\n    stringify = function (obj) {\n    /*\n     * this function will recursively JSON.stringify obj,\n     * with object-keys sorted and circular-references removed\n     */\n        // if obj is not an object or function, then JSON.stringify as normal\n        if (!(\n            obj\n            && typeof obj === \"object\"\n            && typeof obj.toJSON !== \"function\"\n        )) {\n            return JSON.stringify(obj);\n        }\n        // ignore circular-reference\n        if (circularSet.has(obj)) {\n            return;\n        }\n        circularSet.add(obj);\n        // if obj is an array, then recurse its items\n        if (Array.isArray(obj)) {\n            tmp = \"[\" + obj.map(function (obj) {\n                // recurse\n                tmp = stringify(obj);\n                return (\n                    typeof tmp === \"string\"\n                    ? tmp\n                    : \"null\"\n                );\n            }).join(\",\") + \"]\";\n            circularSet.delete(obj);\n            return tmp;\n        }\n        // if obj is not an array,\n        // then recurse its items with object-keys sorted\n        tmp = \"{\" + Object.keys(obj)\n        // sort object-keys\n        .sort()\n        .map(function (key) {\n            // recurse\n            tmp = stringify(obj[key]);\n            if (typeof tmp === \"string\") {\n                return JSON.stringify(key) + \":\" + tmp;\n            }\n        })\n        .filter(function (obj) {\n            return typeof obj === \"string\";\n        })\n        .join(\",\") + \"}\";\n        circularSet.delete(obj);\n        return tmp;\n    };\n    circularSet = new Set();\n    return JSON.stringify((\n        (typeof obj === \"object\" && obj)\n        // recurse\n        ? JSON.parse(stringify(obj))\n        : obj\n    ), replacer, space);\n};\n\nlocal.listShuffle = function (list) {\n/*\n * this function will inplace shuffle the list using fisher-yates algorithm\n * https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n */\n    var ii;\n    var random;\n    var swap;\n    ii = list.length;\n    while (ii > 1) {\n        ii -= 1;\n        random = Math.floor(Math.random() * (ii + 1));\n        swap = list[ii];\n        list[ii] = list[random];\n        list[random] = swap;\n    }\n    return list;\n};\n\nlocal.objectSetOverride = function (dict, overrides, depth, env) {\n/*\n * this function will recursively set overrides for items in dict\n */\n    dict = dict || {};\n    env = env || (typeof process === \"object\" && process.env) || {};\n    overrides = overrides || {};\n    Object.keys(overrides).forEach(function (key) {\n        var dict2;\n        var overrides2;\n        dict2 = dict[key];\n        overrides2 = overrides[key];\n        if (overrides2 === undefined) {\n            return;\n        }\n        // if both dict2 and overrides2 are non-null and non-array objects,\n        // then recurse with dict2 and overrides2\n        if (\n            depth > 1\n            // dict2 is a non-null and non-array object\n            && typeof dict2 === \"object\" && dict2 && !Array.isArray(dict2)\n            // overrides2 is a non-null and non-array object\n            && typeof overrides2 === \"object\" && overrides2\n            && !Array.isArray(overrides2)\n        ) {\n            local.objectSetOverride(dict2, overrides2, depth - 1, env);\n            return;\n        }\n        // else set dict[key] with overrides[key]\n        dict[key] = (\n            dict === env\n            // if dict is env, then overrides falsy-value with empty-string\n            ? overrides2 || \"\"\n            : overrides2\n        );\n    });\n    return dict;\n};\n\nlocal.onErrorDefault = function (error) {\n/*\n * this function will if <error> exists, then print it to stderr\n */\n    if (error) {\n        console.error(error);\n    }\n    return error;\n};\n\nlocal.onErrorWithStack = function (onError) {\n/*\n * this function will create a new callback that will call onError,\n * and append the current stack to any error\n */\n    var onError2;\n    var stack;\n    stack = new Error().stack.replace((\n        /(.*?)\\n.*?$/m\n    ), \"$1\");\n    onError2 = function (error, data, meta) {\n        if (\n            error\n            && typeof error.stack === \"string\"\n            && error !== local.errorDefault\n            && String(error.stack).indexOf(stack.split(\"\\n\")[2]) < 0\n        ) {\n            // append the current stack to error.stack\n            error.stack += \"\\n\" + stack;\n        }\n        onError(error, data, meta);\n    };\n    // debug onError\n    onError2.toString = function () {\n        return String(onError);\n    };\n    return onError2;\n};\n\nlocal.onParallel = function (onError, onEach, onRetry) {\n/*\n * this function will create a function that will\n * 1. run async tasks in parallel\n * 2. if counter === 0 or error occurred, then call onError with error\n */\n    var onParallel;\n    onError = local.onErrorWithStack(onError);\n    onEach = onEach || local.nop;\n    onRetry = onRetry || local.nop;\n    onParallel = function (error, data) {\n        if (onRetry(error, data)) {\n            return;\n        }\n        // decrement counter\n        onParallel.counter -= 1;\n        // validate counter\n        if (!(onParallel.counter >= 0 || error || onParallel.error)) {\n            error = new Error(\n                \"invalid onParallel.counter = \" + onParallel.counter\n            );\n        // ensure onError is run only once\n        } else if (onParallel.counter < 0) {\n            return;\n        }\n        // handle error\n        if (error) {\n            onParallel.error = error;\n            // ensure counter <= 0\n            onParallel.counter = -Math.abs(onParallel.counter);\n        }\n        // call onError when isDone\n        if (onParallel.counter <= 0) {\n            onError(error, data);\n            return;\n        }\n        onEach();\n    };\n    // init counter\n    onParallel.counter = 0;\n    // return callback\n    return onParallel;\n};\n\nlocal.replStart = function () {\n/*\n * this function will start the repl-debugger\n */\n    var that;\n    if (globalThis.utility2_serverRepl1) {\n        return;\n    }\n    // start replServer\n    that = require(\"repl\").start({\n        useGlobal: true\n    });\n    globalThis.utility2_serverRepl1 = that;\n    that.onError = function (error) {\n    /*\n     * this function will debug any repl-error\n     */\n        // debug error\n        globalThis.utility2_debugReplError = error;\n        console.error(error);\n    };\n    // save repl eval function\n    that.evalDefault = that.eval;\n    // hook custom repl eval function\n    that.eval = function (script, context, file, onError) {\n        var onError2;\n        onError2 = function (error, data) {\n            // debug error\n            globalThis.utility2_debugReplError = (\n                error\n                || globalThis.utility2_debugReplError\n            );\n            onError(error, data);\n        };\n        script.replace((\n            /^(\\S+)\\u0020(.*?)\\n/\n        ), function (ignore, match1, match2) {\n            switch (match1) {\n            // syntax-sugar to run async shell-command\n            case \"$\":\n                switch (match2) {\n                // syntax-sugar to run git diff\n                case \"git diff\":\n                    match2 = \"git diff --color | cat\";\n                    break;\n                // syntax-sugar to run git log\n                case \"git log\":\n                    match2 = \"git log -n 4 | cat\";\n                    break;\n                }\n                // source lib.utility2.sh\n                if (process.env.npm_config_dir_utility2 && (match2 !== \":\")) {\n                    match2 = (\n                        \". \" + process.env.npm_config_dir_utility2\n                        + \"/lib.utility2.sh;\" + match2\n                    );\n                }\n                // run async shell-command\n                require(\"child_process\").spawn(match2, {\n                    shell: true,\n                    stdio: [\"ignore\", 1, 2]\n                })\n                // on shell exit, print return prompt\n                .on(\"exit\", function (exitCode) {\n                    console.error(\"exit-code \" + exitCode);\n                    that.evalDefault(\n                        \"\\n\",\n                        context,\n                        file,\n                        onError2\n                    );\n                });\n                script = \"\\n\";\n                break;\n            // syntax-sugar to map text with charCodeAt\n            case \"charCode\":\n                console.error(\n                    match2.split(\"\").map(function (chr) {\n                        return (\n                            \"\\\\u\"\n                            + chr.charCodeAt(0).toString(16).padStart(4, 0)\n                        );\n                    }).join(\"\")\n                );\n                script = \"\\n\";\n                break;\n            // syntax-sugar to sort chr\n            case \"charSort\":\n                console.error(JSON.stringify(match2.split(\"\").sort().join(\"\")));\n                script = \"\\n\";\n                break;\n            // syntax-sugar to grep current dir\n            case \"grep\":\n                // run async shell-command\n                require(\"child_process\").spawn((\n                    \"find . -type f | grep -v -E \"\n/* jslint ignore:start */\n+ '\"\\\n/\\\\.|(\\\\b|_)(\\\\.\\\\d|\\\narchive|artifact|\\\nbower_component|build|\\\ncoverage|\\\ndoc|\\\nexternal|\\\nfixture|\\\ngit_module|\\\njquery|\\\nlog|\\\nmin|mock|\\\nnode_module|\\\nrollup|\\\nswp|\\\ntmp|\\\nvendor)s{0,1}(\\\\b|_)\\\n\" '\n/* jslint ignore:end */\n                    + \"| tr \\\"\\\\n\\\" \\\"\\\\000\\\" | xargs -0 grep -HIin -E \\\"\"\n                    + match2 + \"\\\"\"\n                ), {\n                    shell: true,\n                    stdio: [\"ignore\", 1, 2]\n                })\n                // on shell exit, print return prompt\n                .on(\"exit\", function (exitCode) {\n                    console.error(\"exit-code \" + exitCode);\n                    that.evalDefault(\n                        \"\\n\",\n                        context,\n                        file,\n                        onError2\n                    );\n                });\n                script = \"\\n\";\n                break;\n            // syntax-sugar to list object's keys, sorted by item-type\n            // console.error(Object.keys(global).map(function(key){return(typeof global[key]==='object'&&global[key]&&global[key]===global[key]?'global':typeof global[key])+' '+key;}).sort().join('\\n')) // jslint ignore:line\n            case \"keys\":\n                script = (\n                    \"console.error(Object.keys(\" + match2\n                    + \").map(function(key){return(\"\n                    + \"typeof \" + match2 + \"[key]==='object'&&\"\n                    + match2 + \"[key]&&\"\n                    + match2 + \"[key]===global[key]\"\n                    + \"?'global'\"\n                    + \":typeof \" + match2 + \"[key]\"\n                    + \")+' '+key;\"\n                    + \"}).sort().join('\\\\n'))\\n\"\n                );\n                break;\n            // syntax-sugar to print stringified arg\n            case \"print\":\n                script = \"console.error(String(\" + match2 + \"))\\n\";\n                break;\n            // syntax-sugar to read file\n            case \"readFile\":\n                try {\n                    console.error(JSON.stringify(\n                        require(\"fs\").readFileSync(match2, \"utf8\")\n                    ));\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n                script = \"\\n\";\n                break;\n            }\n        });\n        // eval the script\n        that.evalDefault(script, context, file, onError2);\n    };\n    that.socket = {\n        end: local.nop,\n        on: local.nop,\n        write: local.nop\n    };\n    // init process.stdout\n    process.stdout._writeDefault = (\n        process.stdout._writeDefault\n        || process.stdout._write\n    );\n    process.stdout._write = function (chunk, encoding, callback) {\n        process.stdout._writeDefault(chunk, encoding, callback);\n        // coverage-hack - ignore else-statement\n        local.nop(that.socket.writable && (function () {\n            that.socket.write(chunk, encoding);\n        }()));\n    };\n    // start tcp-server\n    globalThis.utility2_serverReplTcp1 = require(\"net\").createServer(function (\n        socket\n    ) {\n        // init socket\n        that.socket = socket;\n        that.socket.on(\"data\", that.write.bind(that));\n        that.socket.on(\"error\", that.onError);\n        that.socket.setKeepAlive(true);\n    });\n    // coverage-hack - ignore else-statement\n    local.nop(process.env.PORT_REPL && (function () {\n        console.error(\n            \"repl-server listening on tcp-port \" + process.env.PORT_REPL\n        );\n        globalThis.utility2_serverReplTcp1.listen(process.env.PORT_REPL);\n    }()));\n};\n\nlocal.setTimeoutOnError = function (onError, timeout, error, data) {\n/*\n * this function will after timeout has passed, then call onError(error, data)\n */\n    if (typeof onError === \"function\") {\n        setTimeout(function () {\n            onError(error, data);\n        }, timeout);\n    }\n    return data;\n};\n}());\n\n\n\n// run shared js-env code - lib.storage.js\n(function (local) {\nvar child_process;\nvar clear;\nvar defer;\nvar deferList;\nvar fs;\nvar getItem;\nvar init;\nvar keys;\nvar length;\nvar os;\nvar removeItem;\nvar setItem;\nvar storage;\nvar storageDir;\n\nstorageDir = \"tmp/storage.\" + (\n    local.isBrowser\n    ? \"undefined\"\n    : process.env.NODE_ENV\n);\nif (!local.isBrowser) {\n    // require modules\n    child_process = require(\"child_process\");\n    fs = require(\"fs\");\n    os = require(\"os\");\n}\n\nclear = function (onError) {\n/*\n * this function will clear storage\n */\n    defer({\n        action: \"clear\"\n    }, onError);\n};\n\ndefer = function (option, onError) {\n/*\n * this function will defer option.action until storage is ready\n */\n    var data;\n    var isDone;\n    var objectStore;\n    var onError2;\n    var request;\n    var tmp;\n    onError = onError || function (error) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n    };\n    if (!storage) {\n        deferList.push(function () {\n            defer(option, onError);\n        });\n        init();\n        return;\n    }\n    if (local.isBrowser) {\n        onError2 = function () {\n            /* istanbul ignore next */\n            if (isDone) {\n                return;\n            }\n            isDone = true;\n            onError(\n                request && (request.error || request.transaction.error),\n                data || request.result || \"\"\n            );\n        };\n        switch (option.action) {\n        case \"clear\":\n        case \"removeItem\":\n        case \"setItem\":\n            objectStore = storage\n            .transaction(storageDir, \"readwrite\")\n            .objectStore(storageDir);\n            break;\n        default:\n            objectStore = storage\n            .transaction(storageDir, \"readonly\")\n            .objectStore(storageDir);\n        }\n        switch (option.action) {\n        case \"clear\":\n            request = objectStore.clear();\n            break;\n        case \"getItem\":\n            request = objectStore.get(String(option.key));\n            break;\n        case \"keys\":\n            data = [];\n            request = objectStore.openCursor();\n            request.onsuccess = function () {\n                if (!request.result) {\n                    onError2();\n                    return;\n                }\n                data.push(request.result.key);\n                request.result.continue();\n            };\n            break;\n        case \"length\":\n            request = objectStore.count();\n            break;\n        case \"removeItem\":\n            request = objectStore.delete(String(option.key));\n            break;\n        case \"setItem\":\n            request = objectStore.put(option.value, String(option.key));\n            break;\n        }\n        [\"onabort\", \"onerror\", \"onsuccess\"].forEach(function (handler) {\n            request[handler] = request[handler] || onError2;\n        });\n        // debug request\n        local._debugStorageRequest = request;\n    } else {\n        switch (option.action) {\n        case \"clear\":\n            child_process.spawnSync(\"rm -f \" + storage + \"/*\", {\n                shell: true,\n                stdio: [\"ignore\", 1, 2]\n            });\n            setTimeout(onError);\n            break;\n        case \"getItem\":\n            fs.readFile(\n                storage + \"/\" + encodeURIComponent(String(option.key)),\n                \"utf8\",\n                function (ignore, data) {\n                    onError(null, data || \"\");\n                }\n            );\n            break;\n        case \"keys\":\n            fs.readdir(storage, function (error, data) {\n                onError(error, data && data.map(decodeURIComponent));\n            });\n            break;\n        case \"length\":\n            fs.readdir(storage, function (error, data) {\n                onError(error, data && data.length);\n            });\n            break;\n        case \"removeItem\":\n            fs.unlink(\n                storage + \"/\" + encodeURIComponent(String(option.key)),\n                // ignore error\n                function () {\n                    onError();\n                }\n            );\n            break;\n        case \"setItem\":\n            tmp = os.tmpdir() + \"/\" + Date.now() + Math.random();\n            // save to tmp\n            fs.writeFile(tmp, option.value, function (error) {\n                // validate no error occurred\n                local.assertThrow(!error, error);\n                // rename tmp to key\n                fs.rename(\n                    tmp,\n                    storage + \"/\" + encodeURIComponent(String(option.key)),\n                    onError\n                );\n            });\n            break;\n        }\n    }\n};\n\ndeferList = [];\n\ngetItem = function (key, onError) {\n/*\n * this function will get the item with given key from storage\n */\n    defer({\n        action: \"getItem\",\n        key: key\n    }, onError);\n};\n\ninit = function () {\n/*\n * this function will init storage\n */\n    var onError;\n    var request;\n    onError = function (error) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        if (local.isBrowser) {\n            storage = globalThis[storageDir];\n        }\n        while (deferList.length) {\n            deferList.shift()();\n        }\n    };\n    if (local.isBrowser) {\n        storage = globalThis[storageDir];\n    }\n    if (storage) {\n        onError();\n        return;\n    }\n    if (local.isBrowser) {\n        // init indexedDB\n        try {\n            request = globalThis.indexedDB.open(storageDir);\n            // debug request\n            local._debugStorageRequestIndexedDB = request;\n            request.onerror = onError;\n            request.onsuccess = function () {\n                globalThis[storageDir] = request.result;\n                onError();\n            };\n            request.onupgradeneeded = function () {\n                if (!request.result.objectStoreNames.contains(storageDir)) {\n                    request.result.createObjectStore(storageDir);\n                }\n            };\n        } catch (ignore) {}\n    } else {\n        // mkdirp storage\n        storage = storageDir;\n        child_process.spawnSync(\"mkdir\", [\"-p\", storage], {\n            stdio: [\"ignore\", 1, 2]\n        });\n        onError();\n    }\n};\n\nkeys = function (onError) {\n/*\n * this function will get all the keys in storage\n */\n    defer({\n        action: \"keys\"\n    }, onError);\n};\n\nlength = function (onError) {\n/*\n * this function will get the number of items in storage\n */\n    defer({\n        action: \"length\"\n    }, onError);\n};\n\nremoveItem = function (key, onError) {\n/*\n * this function will remove the item with given key from storage\n */\n    defer({\n        action: \"removeItem\",\n        key: key\n    }, onError);\n};\n\nsetItem = function (key, value, onError) {\n/*\n * this function will set the item with given key and value to storage\n */\n    defer({\n        action: \"setItem\",\n        key: key,\n        value: value\n    }, onError);\n};\n\n// init local\nlocal.storage = storage;\nlocal.storageClear = clear;\nlocal.storageDefer = defer;\nlocal.storageDeferList = deferList;\nlocal.storageDir = storageDir;\nlocal.storageGetItem = getItem;\nlocal.storageInit = init;\nlocal.storageKeys = keys;\nlocal.storageLength = length;\nlocal.storageRemoveItem = removeItem;\nlocal.storageSetItem = setItem;\n}(local));\n\n\n\n// run shared js-env code - lib.dbTable.js\n(function () {\nlocal._DbTable = function (option) {\n/*\n * this function will create a dbTable\n */\n    this.name = String(option.name);\n    // register dbTable in dbTableDict\n    local.dbTableDict[this.name] = this;\n    this.dbRowList = [];\n    this.isDirty = null;\n    this.idIndexList = [{\n        isInteger: false,\n        name: \"_id\",\n        dict: {}\n    }];\n    this.onSaveList = [];\n    this.sizeLimit = option.sizeLimit || 0;\n};\n\nlocal._DbTable.prototype._cleanup = function () {\n/*\n * this function will cleanup soft-deleted records from the dbTable\n */\n    var dbRow;\n    var ii;\n    var list;\n    if (!this.isDirty && this.dbRowList.length <= this.sizeLimit) {\n        return;\n    }\n    this.isDirty = null;\n    // cleanup dbRowList\n    list = this.dbRowList;\n    this.dbRowList = [];\n    // optimization - while-loop\n    ii = 0;\n    while (ii < list.length) {\n        dbRow = list[ii];\n        // cleanup isRemoved\n        if (!dbRow.$isRemoved) {\n            this.dbRowList.push(dbRow);\n        }\n        ii += 1;\n    }\n    if (this.sizeLimit && this.dbRowList.length >= 1.5 * this.sizeLimit) {\n        this.dbRowList = this._crudGetManyByQuery({}, this.sortDefault, 0, this.sizeLimit);\n    }\n};\n\nlocal._DbTable.prototype._crudGetManyByQuery = function (\n    query,\n    sort,\n    skip,\n    limit,\n    shuffle\n) {\n/*\n * this function will get the dbRow's in the dbTable,\n * with given query, sort, skip, and limit\n */\n    var ii;\n    var result;\n    result = this.dbRowList;\n    // get by query\n    if (result.length && query && Object.keys(query).length) {\n        result = local.dbRowListGetManyByQuery(this.dbRowList, query);\n    }\n    // sort\n    (sort || []).forEach(function (element) {\n        // bug-workaround - v8 does not have stable-sort\n        // optimization - while-loop\n        ii = 0;\n        while (ii < result.length) {\n            result[ii].$ii = ii;\n            ii += 1;\n        }\n        result.sort(function (aa, bb) {\n            return local.sortCompare(\n                local.dbRowGetItem(aa, element.fieldName),\n                local.dbRowGetItem(bb, element.fieldName),\n                aa.$ii,\n                bb.$ii\n            );\n        });\n        if (element.isDescending) {\n            result.reverse();\n        }\n    });\n    // skip\n    result = result.slice(skip || 0);\n    // shuffle\n    local.functionOrNop(shuffle && local.listShuffle)(result);\n    // limit\n    result = result.slice(0, limit || Infinity);\n    return result;\n};\n\nlocal._DbTable.prototype._crudGetOneById = function (idDict) {\n/*\n * this function will get the dbRow in the dbTable with given idDict\n */\n    var id;\n    var result;\n    idDict = local.objectSetOverride(idDict);\n    result = null;\n    this.idIndexList.some(function (idIndex) {\n        id = idDict[idIndex.name];\n        // optimization - hasOwnProperty\n        if (idIndex.dict.hasOwnProperty(id)) {\n            result = idIndex.dict[id];\n            return result;\n        }\n    });\n    return result;\n};\n\nlocal._DbTable.prototype._crudRemoveOneById = function (idDict, circularList) {\n/*\n * this function will remove the dbRow from the dbTable with given idDict\n */\n    var id;\n    var result;\n    var that;\n    if (!idDict) {\n        return null;\n    }\n    that = this;\n    circularList = circularList || [idDict];\n    result = null;\n    that.idIndexList.forEach(function (idIndex) {\n        id = idDict[idIndex.name];\n        // optimization - hasOwnProperty\n        if (!idIndex.dict.hasOwnProperty(id)) {\n            return;\n        }\n        result = idIndex.dict[id];\n        delete idIndex.dict[id];\n        // optimization - soft-delete\n        result.$isRemoved = true;\n        that.isDirty = true;\n        if (circularList.indexOf(result) >= 0) {\n            return;\n        }\n        circularList.push(result);\n        // recurse\n        that._crudRemoveOneById(result, circularList);\n    });\n    that.save();\n    return result;\n};\n\nlocal._DbTable.prototype._crudSetOneById = function (dbRow) {\n/*\n * this function will set the dbRow into the dbTable with given dbRow._id\n * WARNING - existing dbRow with conflicting dbRow._id will be removed\n */\n    var existing;\n    var id;\n    var normalize;\n    var timeNow;\n    normalize = function (dbRow) {\n    /*\n     * this function will recursively normalize dbRow\n     */\n        switch (typeof dbRow) {\n        case \"boolean\":\n        case \"string\":\n            return dbRow;\n        case \"number\":\n            return (\n                Number.isFinite(dbRow)\n                ? dbRow\n                : undefined\n            );\n        case \"object\":\n            if (!dbRow) {\n                return;\n            }\n            break;\n        default:\n            return;\n        }\n        Object.keys(dbRow).forEach(function (key) {\n            dbRow[key] = (\n                (key[0] === \"$\" || key.indexOf(\".\") >= 0)\n                // invalid-property\n                ? undefined\n                // recurse\n                : normalize(dbRow[key])\n            );\n        });\n        return dbRow;\n    };\n    dbRow = local.jsonCopy(local.objectSetOverride(dbRow));\n    // update timestamp\n    timeNow = new Date().toISOString();\n    dbRow._timeCreated = dbRow._timeCreated || timeNow;\n    if (!local.modeImport) {\n        dbRow._timeUpdated = timeNow;\n    }\n    // normalize\n    dbRow = normalize(dbRow);\n    dbRow = local.jsonCopy(dbRow);\n    // remove existing dbRow\n    existing = this._crudRemoveOneById(dbRow) || dbRow;\n    this.idIndexList.forEach(function (idIndex) {\n        // auto-set id\n        id = local.dbRowSetId(existing, idIndex);\n        // copy id from existing to dbRow\n        dbRow[idIndex.name] = id;\n        // set dbRow\n        idIndex.dict[id] = dbRow;\n    });\n    // update dbRowList\n    this.dbRowList.push(dbRow);\n    this.save();\n    return dbRow;\n};\n\nlocal._DbTable.prototype._crudUpdateOneById = function (dbRow) {\n/*\n * this function will update the dbRow in the dbTable,\n * if it exists with given dbRow._id\n * WARNING\n * existing dbRow's with conflicting unique-keys (besides the one being updated)\n * will be removed\n */\n    var id;\n    var result;\n    dbRow = local.jsonCopy(local.objectSetOverride(dbRow));\n    result = {};\n    this.idIndexList.some(function (idIndex) {\n        id = dbRow[idIndex.name];\n        // optimization - hasOwnProperty\n        if (idIndex.dict.hasOwnProperty(id)) {\n            result = idIndex.dict[id];\n            return true;\n        }\n    });\n    // remove existing dbRow\n    result = local.jsonCopy(this._crudRemoveOneById(result)) || result;\n    // update dbRow\n    delete dbRow._timeCreated;\n    local.objectSetOverride(result, dbRow, 10);\n    // replace dbRow\n    result = this._crudSetOneById(result);\n    return result;\n};\n\nlocal._DbTable.prototype.crudCountAll = function (onError) {\n/*\n * this function will count all of dbRow's in the dbTable\n */\n    this._cleanup();\n    return local.setTimeoutOnError(onError, 0, null, this.dbRowList.length);\n};\n\nlocal._DbTable.prototype.crudCountManyByQuery = function (query, onError) {\n/*\n * this function will count the number of dbRow's in the dbTable with given query\n */\n    this._cleanup();\n    return local.setTimeoutOnError(\n        onError,\n        0,\n        null,\n        this._crudGetManyByQuery(query).length\n    );\n};\n\nlocal._DbTable.prototype.crudGetManyById = function (idDictList, onError) {\n/*\n * this function will get the dbRow's in the dbTable with given idDictList\n */\n    var that;\n    this._cleanup();\n    that = this;\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        (idDictList || []).map(function (idDict) {\n            return that._crudGetOneById(idDict);\n        })\n    ));\n};\n\nlocal._DbTable.prototype.crudGetManyByQuery = function (option, onError) {\n/*\n * this function will get the dbRow's in the dbTable with given option.query\n */\n    this._cleanup();\n    option = local.objectSetOverride(option);\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        this._crudGetManyByQuery(\n            option.query,\n            option.sort || this.sortDefault,\n            option.skip,\n            option.limit,\n            option.shuffle\n        ),\n        option.fieldList\n    ));\n};\n\nlocal._DbTable.prototype.crudGetOneById = function (idDict, onError) {\n/*\n * this function will get the dbRow in the dbTable with given idDict\n */\n    this._cleanup();\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        this._crudGetOneById(idDict)\n    ));\n};\n\nlocal._DbTable.prototype.crudGetOneByQuery = function (query, onError) {\n/*\n * this function will get the dbRow in the dbTable with given query\n */\n    var ii;\n    var result;\n    this._cleanup();\n    // optimization - while-loop\n    ii = 0;\n    while (ii < this.dbRowList.length) {\n        result = local.dbRowListGetManyByQuery([this.dbRowList[ii]], query)[0];\n        if (result) {\n            break;\n        }\n        ii += 1;\n    }\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(result));\n};\n\nlocal._DbTable.prototype.crudGetOneByRandom = function (onError) {\n/*\n * this function will get a random dbRow in the dbTable\n */\n    this._cleanup();\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        this.dbRowList[Math.floor(Math.random() * this.dbRowList.length)]\n    ));\n};\n\nlocal._DbTable.prototype.crudRemoveAll = function (onError) {\n/*\n * this function will remove all of the dbRow's from the dbTable\n */\n    var idIndexList;\n    // save idIndexList\n    idIndexList = this.idIndexList;\n    // reset dbTable\n    local._DbTable.call(this, this);\n    // restore idIndexList\n    local.dbTableCreateOne({\n        name: this.name,\n        idIndexCreateList: idIndexList\n    }, onError);\n};\n\nlocal._DbTable.prototype.crudRemoveManyById = function (idDictList, onError) {\n/*\n * this function will remove the dbRow's from the dbTable with given idDictList\n */\n    var that;\n    that = this;\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        (idDictList || []).map(function (dbRow) {\n            return that._crudRemoveOneById(dbRow);\n        })\n    ));\n};\n\nlocal._DbTable.prototype.crudRemoveManyByQuery = function (query, onError) {\n/*\n * this function will remove the dbRow's from the dbTable with given query\n */\n    var that;\n    that = this;\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        that._crudGetManyByQuery(query).map(function (dbRow) {\n            return that._crudRemoveOneById(dbRow);\n        })\n    ));\n};\n\nlocal._DbTable.prototype.crudRemoveOneById = function (idDict, onError) {\n/*\n * this function will remove the dbRow from the dbTable with given idDict\n */\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        this._crudRemoveOneById(idDict)\n    ));\n};\n\nlocal._DbTable.prototype.crudSetManyById = function (dbRowList, onError) {\n/*\n * this function will set the dbRowList into the dbTable\n */\n    var that;\n    that = this;\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        (dbRowList || []).map(function (dbRow) {\n            return that._crudSetOneById(dbRow);\n        })\n    ));\n};\n\nlocal._DbTable.prototype.crudSetOneById = function (dbRow, onError) {\n/*\n * this function will set the dbRow into the dbTable with given dbRow._id\n */\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        this._crudSetOneById(dbRow)\n    ));\n};\n\nlocal._DbTable.prototype.crudUpdateManyById = function (dbRowList, onError) {\n/*\n * this function will update the dbRowList in the dbTable,\n * if they exist with given dbRow._id's\n */\n    var that;\n    that = this;\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        (dbRowList || []).map(function (dbRow) {\n            return that._crudUpdateOneById(dbRow);\n        })\n    ));\n};\n\nlocal._DbTable.prototype.crudUpdateManyByQuery = function (query, dbRow, onError) {\n/*\n * this function will update the dbRow's in the dbTable with given query\n */\n    var result;\n    var that;\n    var tmp;\n    that = this;\n    tmp = local.jsonCopy(local.objectSetOverride(dbRow));\n    result = that._crudGetManyByQuery(query).map(function (dbRow) {\n        tmp._id = dbRow._id;\n        return that._crudUpdateOneById(tmp);\n    });\n    return local.setTimeoutOnError(onError, 0, null, result);\n};\n\nlocal._DbTable.prototype.crudUpdateOneById = function (dbRow, onError) {\n/*\n * this function will update the dbRow in the dbTable,\n * if it exists with given dbRow._id\n */\n    return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n        this._crudUpdateOneById(dbRow)\n    ));\n};\n\nlocal._DbTable.prototype.drop = function (onError) {\n/*\n * this function will drop the dbTable\n */\n    console.error(\"db - dropping dbTable \" + this.name + \" ...\");\n    // cancel pending save\n    this.timerSave = null;\n    while (this.onSaveList.length) {\n        this.onSaveList.shift()();\n    }\n    // reset dbTable\n    local._DbTable.call(this, this);\n    // clear persistence\n    local.storageRemoveItem(\"dbTable.\" + this.name + \".json\", onError);\n};\n\nlocal._DbTable.prototype.export = function (onError) {\n/*\n * this function will export the db\n */\n    var result;\n    var that;\n    this._cleanup();\n    that = this;\n    result = \"\";\n    that.idIndexList.forEach(function (idIndex) {\n        result += that.name + \" idIndexCreate \" + JSON.stringify({\n            isInteger: idIndex.isInteger,\n            name: idIndex.name\n        }) + \"\\n\";\n    });\n    result += that.name + \" sizeLimit \" + that.sizeLimit + \"\\n\";\n    result += that.name + \" sortDefault \" + JSON.stringify(that.sortDefault) + \"\\n\";\n    that.crudGetManyByQuery({}).forEach(function (dbRow) {\n        result += that.name + \" dbRowSet \" + JSON.stringify(dbRow) + \"\\n\";\n    });\n    return local.setTimeoutOnError(onError, 0, null, result.trim());\n};\n\nlocal._DbTable.prototype.idIndexCreate = function (option, onError) {\n/*\n * this function will create an idIndex with given option.name\n */\n    var dbRow;\n    var idIndex;\n    var ii;\n    var name;\n    option = local.objectSetOverride(option);\n    name = String(option.name);\n    // disallow idIndex with dot-name\n    if (name.indexOf(\".\") >= 0 || name === \"_id\") {\n        return local.setTimeoutOnError(onError);\n    }\n    // remove existing idIndex\n    this.idIndexRemove(option);\n    // init idIndex\n    idIndex = {\n        dict: {},\n        isInteger: Boolean(option.isInteger),\n        name: name\n    };\n    this.idIndexList.push(idIndex);\n    // populate idIndex with dbRowList\n    // optimization - while-loop\n    ii = 0;\n    while (ii < this.dbRowList.length) {\n        dbRow = this.dbRowList[ii];\n        // auto-set id\n        if (!dbRow.$isRemoved) {\n            idIndex.dict[local.dbRowSetId(dbRow, idIndex)] = dbRow;\n        }\n        ii += 1;\n    }\n    this.save();\n    return local.setTimeoutOnError(onError);\n};\n\nlocal._DbTable.prototype.idIndexRemove = function (option, onError) {\n/*\n * this function will remove the idIndex with given option.name\n */\n    var name;\n    option = local.objectSetOverride(option);\n    name = String(option.name);\n    this.idIndexList = this.idIndexList.filter(function (idIndex) {\n        return idIndex.name !== name || idIndex.name === \"_id\";\n    });\n    this.save();\n    return local.setTimeoutOnError(onError);\n};\n\nlocal._DbTable.prototype.save = function (onError) {\n/*\n * this function will save the dbTable to storage\n */\n    var that;\n    that = this;\n    if (local.modeImport) {\n        return;\n    }\n    if (onError) {\n        that.onSaveList.push(onError);\n    }\n    // throttle storage-writes to once every 1000 ms\n    that.timerSave = that.timerSave || setTimeout(function () {\n        that.timerSave = null;\n        local.storageSetItem(\"dbTable.\" + that.name + \".json\", that.export(), function (\n            error\n        ) {\n            while (that.onSaveList.length) {\n                that.onSaveList.shift()(error);\n            }\n        });\n    }, 1000);\n};\n\nlocal.dbCrudRemoveAll = function (onError) {\n/*\n * this function will remove all dbRow's from the db\n */\n    var onParallel;\n    onParallel = local.onParallel(function (error) {\n        local.setTimeoutOnError(onError, 0, error);\n    });\n    onParallel.counter += 1;\n    Object.keys(local.dbTableDict).forEach(function (key) {\n        onParallel.counter += 1;\n        local.dbTableDict[key].crudRemoveAll(onParallel);\n    });\n    onParallel();\n};\n\nlocal.dbDrop = function (onError) {\n/*\n * this function will drop the db\n */\n    var onParallel;\n    console.error(\"db - dropping database ...\");\n    onParallel = local.onParallel(function (error) {\n        local.setTimeoutOnError(onError, 0, error);\n    });\n    onParallel.counter += 1;\n    onParallel.counter += 1;\n    local.storageClear(onParallel);\n    Object.keys(local.dbTableDict).forEach(function (key) {\n        onParallel.counter += 1;\n        local.dbTableDict[key].drop(onParallel);\n    });\n    onParallel();\n};\n\nlocal.dbExport = function (onError) {\n/*\n * this function will export the db as serialized text\n */\n    var result;\n    result = \"\";\n    Object.keys(local.dbTableDict).forEach(function (key) {\n        console.error(\"db - exporting dbTable \" + local.dbTableDict[key].name + \" ...\");\n        result += local.dbTableDict[key].export();\n        result += \"\\n\\n\";\n    });\n    return local.setTimeoutOnError(onError, 0, null, result.trim());\n};\n\nlocal.dbImport = function (text, onError) {\n/*\n * this function will import the serialized text into the db\n */\n    var dbTable;\n    var dbTableDict;\n    dbTableDict = {};\n    local.modeImport = true;\n    setTimeout(function () {\n        local.modeImport = null;\n    });\n    text.replace((\n        /^(\\w\\S*?)\\u0020(\\S+?)\\u0020(\\S.*?)$/gm\n    ), function (match0, match1, match2, match3) {\n        switch (match2) {\n        case \"dbRowSet\":\n            dbTableDict[match1] = true;\n            dbTable = local.dbTableCreateOne({\n                isLoaded: true,\n                name: match1\n            });\n            dbTable.crudSetOneById(JSON.parse(match3));\n            break;\n        case \"idIndexCreate\":\n            dbTableDict[match1] = true;\n            dbTable = local.dbTableCreateOne({\n                isLoaded: true,\n                name: match1\n            });\n            dbTable.idIndexCreate(JSON.parse(match3));\n            break;\n        case \"sizeLimit\":\n            dbTableDict[match1] = true;\n            dbTable = local.dbTableCreateOne({\n                isLoaded: true,\n                name: match1\n            });\n            dbTable.sizeLimit = JSON.parse(match3);\n            break;\n        case \"sortDefault\":\n            dbTableDict[match1] = true;\n            dbTable = local.dbTableCreateOne({\n                isLoaded: true,\n                name: match1\n            });\n            dbTable.sortDefault = JSON.parse(match3);\n            break;\n        default:\n            local.onErrorDefault(new Error(\n                \"db - dbImport - invalid operation - \" + match0\n            ));\n        }\n    });\n    Object.keys(dbTableDict).forEach(function (name) {\n        console.error(\"db - importing dbTable \" + name + \" ...\");\n    });\n    local.modeImport = null;\n    return local.setTimeoutOnError(onError);\n};\n\nlocal.dbLoad = function (onError) {\n/*\n * this function will load the db from storage\n */\n    var onParallel;\n    onParallel = local.onParallel(function (error) {\n        local.setTimeoutOnError(onError, 0, error);\n    });\n    local.storageKeys(function (error, data) {\n        onParallel.counter += 1;\n        // validate no error occurred\n        onParallel.counter += 1;\n        onParallel(error);\n        (data || []).forEach(function (key) {\n            if (key.indexOf(\"dbTable.\") !== 0) {\n                return;\n            }\n            onParallel.counter += 1;\n            local.storageGetItem(key, function (error, data) {\n                onParallel.counter += 1;\n                onParallel(error);\n                local.dbImport(data, onParallel);\n            });\n        });\n        onParallel();\n    });\n};\n\nlocal.dbReset = function (dbSeedList, onError) {\n/*\n * this function will drop and seed the db with given dbSeedList\n */\n    var onParallel;\n    onParallel = globalThis.utility2_onReadyBefore || local.onParallel(onError);\n    onParallel.counter += 1;\n    // drop db\n    onParallel.counter += 1;\n    local.dbDrop(function (error) {\n        local.onErrorDefault(error);\n        // seed db\n        local.dbSeed(dbSeedList, !globalThis.utility2_onReadyBefore && onParallel);\n        local.functionOrNop(globalThis.utility2_onReadyBefore)();\n    });\n    local.functionOrNop(globalThis.utility2_onReadyAfter)(onError);\n    onParallel();\n};\n\nlocal.dbRowGetItem = function (dbRow, key) {\n/*\n * this function will get the item with given key from dbRow\n */\n    var ii;\n    var value;\n    value = dbRow;\n    key = String(key).split(\".\");\n    // optimization - while-loop\n    ii = 0;\n    while (ii < key.length && typeof value === \"object\" && value) {\n        value = value[key[ii]];\n        ii += 1;\n    }\n    return (\n        value === undefined\n        ? null\n        : value\n    );\n};\n\nlocal.dbRowListGetManyByOperator = function (dbRowList, fieldName, operator, bb, not) {\n/*\n * this function will get the dbRow's in dbRowList with given operator\n */\n    var fieldValue;\n    var ii;\n    var jj;\n    var result;\n    var test;\n    var typeof2;\n    result = [];\n    typeof2 = typeof bb;\n    if (bb && typeof2 === \"object\") {\n        switch (operator) {\n        case \"$in\":\n        case \"$nin\":\n        case \"$regex\":\n            break;\n        default:\n            return result;\n        }\n    }\n    switch (operator) {\n    case \"$eq\":\n        test = function (aa, bb) {\n            return aa === bb;\n        };\n        break;\n    case \"$exists\":\n        bb = !bb;\n        test = function (aa, bb) {\n            return !((aa === null) ^ bb); // jslint ignore:line\n        };\n        break;\n    case \"$gt\":\n        test = function (aa, bb, typeof1, typeof2) {\n            return typeof1 === typeof2 && aa > bb;\n        };\n        break;\n    case \"$gte\":\n        test = function (aa, bb, typeof1, typeof2) {\n            return typeof1 === typeof2 && aa >= bb;\n        };\n        break;\n    case \"$in\":\n        if (bb && typeof bb.indexOf === \"function\") {\n            if (typeof2 === \"string\") {\n                test = function (aa, bb, typeof1, typeof2) {\n                    return typeof1 === typeof2 && bb.indexOf(aa) >= 0;\n                };\n            } else {\n                test = function (aa, bb) {\n                    return bb.indexOf(aa) >= 0;\n                };\n            }\n        }\n        break;\n    case \"$lt\":\n        test = function (aa, bb, typeof1, typeof2) {\n            return typeof1 === typeof2 && aa < bb;\n        };\n        break;\n    case \"$lte\":\n        test = function (aa, bb, typeof1, typeof2) {\n            return typeof1 === typeof2 && aa <= bb;\n        };\n        break;\n    case \"$ne\":\n        test = function (aa, bb) {\n            return aa !== bb;\n        };\n        break;\n    case \"$nin\":\n        if (bb && typeof bb.indexOf === \"function\") {\n            if (typeof2 === \"string\") {\n                test = function (aa, bb, typeof1, typeof2) {\n                    return typeof1 === typeof2 && bb.indexOf(aa) < 0;\n                };\n            } else {\n                test = function (aa, bb) {\n                    return bb.indexOf(aa) < 0;\n                };\n            }\n        }\n        break;\n    case \"$regex\":\n        if (bb && typeof bb.test === \"function\") {\n            test = function (aa, bb) {\n                return bb.test(aa);\n            };\n        }\n        break;\n    case \"$typeof\":\n        test = function (ignore, bb, typeof1) {\n            return typeof1 === bb;\n        };\n        break;\n    }\n    if (!test) {\n        return result;\n    }\n    // optimization - while-loop\n    ii = dbRowList.length;\n    while (ii >= 1) {\n        ii -= 1;\n        fieldValue = local.dbRowGetItem(dbRowList[ii], fieldName);\n        // normalize to list\n        if (!Array.isArray(fieldValue)) {\n            fieldValue = [fieldValue];\n        }\n        // optimization - while-loop\n        jj = fieldValue.length;\n        while (jj >= 1) {\n            jj -= 1;\n            if (Boolean(not ^ test(fieldValue[jj], bb, typeof fieldValue[jj], typeof2))) {\n                result.push(dbRowList[ii]);\n                break;\n            }\n        }\n    }\n    return result;\n};\n\nlocal.dbRowListGetManyByQuery = function (dbRowList, query, fieldName, not) {\n/*\n * this function will get the dbRow's in dbRowList with given query\n */\n    var bb;\n    var dbRowDict;\n    var result;\n    // optimization - convert to boolean\n    not = Boolean(not);\n    result = dbRowList;\n    if (!(typeof query === \"object\" && query)) {\n        result = local.dbRowListGetManyByOperator(result, fieldName, \"$eq\", query, not);\n        return result;\n    }\n    Object.keys(query).some(function (key) {\n        bb = query[key];\n        switch (key) {\n        case \"$not\":\n            key = fieldName;\n            not = !not;\n            break;\n        case \"$or\":\n            if (!Array.isArray(bb)) {\n                break;\n            }\n            dbRowDict = {};\n            bb.forEach(function (query) {\n                // recurse\n                local.dbRowListGetManyByQuery(result, query).forEach(function (dbRow) {\n                    dbRowDict[dbRow._id] = dbRow;\n                });\n            });\n            result = Object.keys(dbRowDict).map(function (id) {\n                return dbRowDict[id];\n            });\n            return !result.length;\n        }\n        if (key[0] === \"$\") {\n            result = local.dbRowListGetManyByOperator(result, fieldName, key, bb, not);\n            return !result.length;\n        }\n        // recurse\n        result = local.dbRowListGetManyByQuery(result, bb, key, not);\n        return !result.length;\n    });\n    return result;\n};\n\nlocal.dbRowProject = function (dbRow, fieldList) {\n/*\n * this function will deepcopy and project the dbRow with given fieldList\n */\n    var result;\n    if (!dbRow) {\n        return null;\n    }\n    // handle list-case\n    if (Array.isArray(dbRow)) {\n        return dbRow.map(function (dbRow) {\n            // recurse\n            return local.dbRowProject(dbRow, fieldList);\n        });\n    }\n    // normalize to list\n    if (!(Array.isArray(fieldList) && fieldList.length)) {\n        fieldList = Object.keys(dbRow);\n    }\n    result = {};\n    fieldList.forEach(function (key) {\n        if (key[0] !== \"$\") {\n            result[key] = dbRow[key];\n        }\n    });\n    return JSON.parse(local.jsonStringifyOrdered(result));\n};\n\nlocal.dbRowSetId = function (dbRow, idIndex) {\n/*\n * this function will if does not exist,\n * then set a random and unique id into dbRow for given idIndex,\n */\n    var id;\n    id = dbRow[idIndex.name];\n    if (typeof id !== \"number\" && typeof id !== \"string\") {\n        do {\n            id = (\n                idIndex.isInteger\n                ? (1 + Math.random()) * 0x10000000000000\n                : \"a\" + ((1 + Math.random()) * 0x10000000000000).toString(36).slice(1)\n            );\n        // optimization - hasOwnProperty\n        } while (idIndex.dict.hasOwnProperty(id));\n        dbRow[idIndex.name] = id;\n    }\n    return id;\n};\n\nlocal.dbSave = function (onError) {\n/*\n * this function will save the db to storage\n */\n    var onParallel;\n    onParallel = local.onParallel(function (error) {\n        local.setTimeoutOnError(onError, 0, error);\n    });\n    onParallel.counter += 1;\n    Object.keys(local.dbTableDict).forEach(function (key) {\n        onParallel.counter += 1;\n        local.dbTableDict[key].save(onParallel);\n    });\n    onParallel();\n};\n\nlocal.dbSeed = function (dbSeedList, onError) {\n/*\n * this function will seed the db with given dbSeedList\n */\n    var dbTableDict;\n    var onParallel;\n    dbTableDict = {};\n    onParallel = globalThis.utility2_onReadyBefore || local.onParallel(onError);\n    onParallel.counter += 1;\n    // seed db\n    onParallel.counter += 1;\n    local.dbTableCreateMany(dbSeedList, onParallel);\n    (dbSeedList || []).forEach(function (option) {\n        dbTableDict[option.name] = true;\n    });\n    Object.keys(dbTableDict).forEach(function (name) {\n        console.error(\"db - seeding dbTable \" + name + \" ...\");\n    });\n    local.functionOrNop(globalThis.utility2_onReadyAfter)(onError);\n    onParallel();\n};\n\nlocal.dbTableCreateMany = function (optionList, onError) {\n/*\n * this function will create many dbTables with given optionList\n */\n    var onParallel;\n    var result;\n    onParallel = local.onParallel(function (error) {\n        local.setTimeoutOnError(onError, 0, error, result);\n    });\n    onParallel.counter += 1;\n    result = (optionList || []).map(function (option) {\n        onParallel.counter += 1;\n        return local.dbTableCreateOne(option, onParallel);\n    });\n    return local.setTimeoutOnError(onParallel, 0, null, result);\n};\n\nlocal.dbTableCreateOne = function (option, onError) {\n/*\n * this function will create a dbTable with given option\n */\n    var DbTable;\n    var that;\n    option = local.objectSetOverride(option);\n    // register dbTable\n    DbTable = local._DbTable;\n    local.dbTableDict[option.name] = local.dbTableDict[option.name] || new DbTable(option);\n    that = local.dbTableDict[option.name];\n    that.sortDefault = (\n        option.sortDefault\n        || that.sortDefault\n        || [{\n            fieldName: \"_timeUpdated\",\n            isDescending: true\n        }]\n    );\n    // remove idIndex\n    (option.idIndexRemoveList || []).forEach(function (idIndex) {\n        that.idIndexRemove(idIndex);\n    });\n    // create idIndex\n    (option.idIndexCreateList || []).forEach(function (idIndex) {\n        that.idIndexCreate(idIndex);\n    });\n    // upsert dbRow\n    that.crudSetManyById(option.dbRowList);\n    // restore dbTable from persistent-storage\n    that.isLoaded = that.isLoaded || option.isLoaded;\n    if (!that.isLoaded) {\n        local.storageGetItem(\"dbTable.\" + that.name + \".json\", function (error, data) {\n            // validate no error occurred\n            local.assertThrow(!error, error);\n            if (!that.isLoaded) {\n                local.dbImport(data);\n            }\n            that.isLoaded = true;\n            local.setTimeoutOnError(onError, 0, null, that);\n        });\n        return that;\n    }\n    return local.setTimeoutOnError(onError, 0, null, that);\n};\n\nlocal.dbTableDict = {};\n\nlocal.onEventDomDb = function (event) {\n/*\n * this function will handle db dom-events\n */\n    var ajaxProgressUpdate;\n    var reader;\n    var tmp;\n    var utility2;\n    utility2 = globalThis.utility2 || {};\n    ajaxProgressUpdate = utility2.ajaxProgressUpdate || local.nop;\n    switch (event.target.dataset.onEventDomDb || event.target.id) {\n    case \"dbExportButton1\":\n        tmp = globalThis.URL.createObjectURL(new globalThis.Blob([local.dbExport()]));\n        document.querySelector(\n            \"#dbExportA1\"\n        ).href = tmp;\n        document.querySelector(\n            \"#dbExportA1\"\n        ).click();\n        setTimeout(function () {\n            globalThis.URL.revokeObjectURL(tmp);\n        }, 30000);\n        break;\n    case \"dbImportButton1\":\n        tmp = document.querySelector(\n            \"#dbImportInput1\"\n        );\n        if (!tmp.onEventDomDb) {\n            tmp.onEventDomDb = local.onEventDomDb;\n            tmp.addEventListener(\"change\", local.onEventDomDb);\n        }\n        tmp.click();\n        break;\n    case \"dbImportInput1\":\n        if (event.type !== \"change\") {\n            return;\n        }\n        ajaxProgressUpdate();\n        reader = new FileReader();\n        tmp = document.querySelector(\n            \"#dbImportInput1\"\n        ).files[0];\n        if (!tmp) {\n            return;\n        }\n        reader.addEventListener(\"load\", function () {\n            local.dbImport(reader.result);\n            ajaxProgressUpdate();\n        });\n        reader.readAsText(tmp);\n        break;\n    case \"dbResetButton1\":\n        ajaxProgressUpdate();\n        local.dbReset(globalThis.utility2_dbSeedList, function (error) {\n            local.onErrorDefault(error);\n            if (\n                utility2.uiEventListenerDict\n                && typeof utility2.uiEventListenerDict[\".onEventUiReload\"] === \"function\"\n            ) {\n                utility2.uiEventListenerDict[\".onEventUiReload\"]();\n            }\n        });\n        break;\n    }\n};\n\nlocal.sortCompare = function (aa, bb, ii, jj) {\n/*\n * this function will compare aa vs bb and return:\n * -1 if aa < bb\n *  0 if aa === bb\n *  1 if aa > bb\n * the priority for comparing different typeof's is:\n * null < boolean < number < string < object < undefined\n */\n    var typeof1;\n    var typeof2;\n    if (aa === bb) {\n        return (\n            ii < jj\n            ? -1\n            : 1\n        );\n    }\n    if (aa === null) {\n        return -1;\n    }\n    if (bb === null) {\n        return 1;\n    }\n    typeof1 = typeof aa;\n    typeof2 = typeof bb;\n    if (typeof1 === typeof2) {\n        return (\n            typeof1 === \"object\"\n            ? 0\n            : aa > bb\n            ? 1\n            : -1\n        );\n    }\n    if (typeof1 === \"boolean\") {\n        return -1;\n    }\n    if (typeof2 === \"boolean\") {\n        return 1;\n    }\n    if (typeof1 === \"number\") {\n        return -1;\n    }\n    if (typeof2 === \"number\") {\n        return 1;\n    }\n    if (typeof1 === \"string\") {\n        return -1;\n    }\n    if (typeof2 === \"string\") {\n        return 1;\n    }\n    return 0;\n};\n}());\n\n\n\n// run node js-env code - init-after\n/* istanbul ignore next */\n(function () {\nif (local.isBrowser) {\n    return;\n}\n\n\n\nlocal.cliDict = {};\n\nlocal.cliDict.dbTableCrudGetManyByQuery = function () {\n/*\n * <dbTable> <query>\n * will get from <dbTable> with json <query>, <dbRowList>\n */\n    local.dbTableCreateOne({\n        name: process.argv[3]\n    }, function (error, that) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        console.log(JSON.stringify(that.crudGetManyByQuery(\n            JSON.parse(process.argv[4] || \"{}\")\n        ), null, 4));\n    });\n};\n\nlocal.cliDict.dbTableCrudRemoveManyByQuery = function () {\n/*\n * <dbTable> <query>\n * will remove from <dbTable> with json <query>, <dbRowList>\n */\n    local.dbTableCreateOne({\n        name: process.argv[3]\n    }, function (error, that) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        console.log(JSON.stringify(that.crudRemoveManyByQuery(\n            JSON.parse(process.argv[4])\n        ), null, 4));\n    });\n};\n\nlocal.cliDict.dbTableCrudSetManyById = function () {\n/*\n * <dbTable> <dbRowList>\n * will set in <dbTable>, <dbRowList>\n */\n    local.dbTableCreateOne({\n        name: process.argv[3]\n    }, function (error, that) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        that.crudSetManyById(JSON.parse(process.argv[4]));\n    });\n};\n\nlocal.cliDict.dbTableHeaderDictGet = function () {\n/*\n * <dbTable>\n * will get from <dbTable>, <headerDict>\n */\n    local.dbTableCreateOne({\n        name: process.argv[3]\n    }, function (error, that) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        var tmp;\n        tmp = [];\n        that.idIndexList.forEach(function (idIndex) {\n            tmp.push({\n                isInteger: idIndex.isInteger,\n                name: idIndex.name\n            });\n        });\n        console.log(JSON.stringify({\n            idIndexList: tmp,\n            sizeLimit: that.sizeLimit,\n            sortDefault: that.sortDefault\n        }, null, 4));\n    });\n};\n\nlocal.cliDict.dbTableHeaderDictSet = function () {\n/*\n * <dbTable> <headerDict>\n * will set in <dbTable>, <headerDict>\n */\n    local.dbTableCreateOne({\n        name: process.argv[3]\n    }, function (error, that) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        local.tmp = JSON.parse(process.argv[4]);\n        that.sizeLimit = local.tmp.sizeLimit || that.sizeLimit;\n        that.sortDefault = local.tmp.sortDefault || that.sortDefault;\n        that.save();\n        local.tmp = [];\n        that.idIndexList.forEach(function (idIndex) {\n            local.tmp.push({\n                isInteger: idIndex.isInteger,\n                name: idIndex.name\n            });\n        });\n        local.cliDict.dbTableHeaderDictGet();\n    });\n};\n\nlocal.cliDict.dbTableIdIndexCreate = function () {\n/*\n * <dbTable> <idIndex>\n * will create in <dbTable>, <idIndex>\n */\n    local.dbTableCreateOne({\n        name: process.argv[3]\n    }, function (error, that) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        that.idIndexCreate(JSON.parse(process.argv[4]));\n        that.save();\n        local.tmp = [];\n        that.idIndexList.forEach(function (idIndex) {\n            local.tmp.push({\n                isInteger: idIndex.isInteger,\n                name: idIndex.name\n            });\n        });\n        local.cliDict.dbTableHeaderDictGet();\n    });\n};\n\nlocal.cliDict.dbTableIdIndexRemove = function () {\n/*\n * <dbTable> <idIndex>\n * will remove from <dbTable>, <idIndex>\n */\n    local.dbTableCreateOne({\n        name: process.argv[3]\n    }, function (error, that) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        that.idIndexRemove(JSON.parse(process.argv[4]));\n        that.save();\n        local.cliDict.dbTableHeaderDictGet();\n    });\n};\n\nlocal.cliDict.dbTableList = function () {\n/*\n *\n * will get from db, <dbTableList>\n */\n    local.storageKeys(function (error, data) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        console.log(JSON.stringify(data.map(function (element) {\n            return element.split(\".\").slice(1, -1).join(\".\");\n        }), null, 4));\n    });\n};\n\nlocal.cliDict.dbTableRemove = function () {\n/*\n * <dbTable>\n * will remove from db, <dbTable>\n */\n    local.storageRemoveItem(\"dbTable.\" + process.argv[3] + \".json\", function (error) {\n        // validate no error occurred\n        local.assertThrow(!error, error);\n        local.cliDict.dbTableList();\n    });\n};\n\n// run cli\nif (module === require.main && !globalThis.utility2_rollup) {\n    local.cliRun();\n}\n}());\n\n\n\n}());\n","/home/travis/build/kaizhu256/node-db-lite/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will run a web-demo of db-lite\n\ninstruction\n    1. save this script as example.js\n    2. run the shell-command:\n        $ npm install db-lite && PORT=8081 node example.js\n    3. open a browser to http://127.0.0.1:8081 and play with the web-demo\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package db */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw the error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-condition\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        Object.keys(source).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2_rollup\n    || globalThis.utility2_db\n    || globalThis.utility2_moduleExports\n);\n// init exports\nglobalThis.local = local;\n}());\n\n\n\n/* istanbul ignore next */\n// run browser js-env code - init-test\n(function () {\nif (!local.isBrowser) {\n    return;\n}\nlocal.testRunBrowser = function (event) {\n    if (!event || (\n        event\n        && event.currentTarget\n        && event.currentTarget.className\n        && event.currentTarget.className.includes\n        && event.currentTarget.className.includes(\"onreset\")\n    )) {\n        // reset output\n        Array.from(document.querySelectorAll(\n            \"body > .resettable\"\n        )).forEach(function (element) {\n            switch (element.tagName) {\n            case \"INPUT\":\n            case \"TEXTAREA\":\n                element.value = \"\";\n                break;\n            default:\n                element.textContent = \"\";\n            }\n        });\n    }\n    switch (event && event.currentTarget && event.currentTarget.id) {\n    case \"testRunButton1\":\n        // show tests\n        if (document.querySelector(\n            \"#testReportDiv1\"\n        ).style.maxHeight === \"0px\") {\n            local.uiAnimateSlideDown(document.querySelector(\n                \"#testReportDiv1\"\n            ));\n            document.querySelector(\n                \"#testRunButton1\"\n            ).textContent = \"hide internal test\";\n            local.modeTest = 1;\n            local.testRunDefault(local);\n        // hide tests\n        } else {\n            local.uiAnimateSlideUp(document.querySelector(\n                \"#testReportDiv1\"\n            ));\n            document.querySelector(\n                \"#testRunButton1\"\n            ).textContent = \"run internal test\";\n        }\n        break;\n    /* validateLineSortedReset */\n    // custom-case\n    case \"dbExportButton1\":\n    case \"dbImportButton1\":\n    case \"dbImportInput1\":\n    case \"dbResetButton1\":\n        local.db.onEventDomDb(event);\n        break;\n    }\n    if (document.querySelector(\n        \"#inputTextareaEval1\"\n    ) && (!event || (\n        event\n        && event.currentTarget\n        && event.currentTarget.className\n        && event.currentTarget.className.includes\n        && event.currentTarget.className.includes(\"oneval\")\n    ))) {\n        // try to eval input-code\n        try {\n            eval(document.querySelector( // jslint ignore:line\n                \"#inputTextareaEval1\"\n            ).value);\n        } catch (errorCaught) {\n            console.error(errorCaught);\n        }\n    }\n};\n\nlocal.uiEventDelegate = local.uiEventDelegate || function (event) {\n    // filter non-input keyup-event\n    event.targetOnEvent = event.target.closest(\"[data-onevent]\");\n    if (!event.targetOnEvent) {\n        return;\n    }\n    // rate-limit keyup\n    if (event.type === \"keyup\") {\n        local.uiEventDelegateKeyupEvent = event;\n        if (local.uiEventDelegateKeyupTimerTimeout !== 2) {\n            local.uiEventDelegateKeyupTimerTimeout = (\n                local.uiEventDelegateKeyupTimerTimeout\n                || setTimeout(function () {\n                    local.uiEventDelegateKeyupTimerTimeout = 2;\n                    local.uiEventDelegate(local.uiEventDelegateKeyupEvent);\n                }, 100)\n            );\n            return;\n        }\n        local.uiEventDelegateKeyupTimerTimeout = null;\n        if (!event.target.closest(\"input, option, select, textarea\")) {\n            return;\n        }\n    }\n    switch (event.targetOnEvent.tagName) {\n    case \"BUTTON\":\n    case \"FORM\":\n        event.preventDefault();\n        break;\n    }\n    event.stopPropagation();\n    local.uiEventListenerDict[event.targetOnEvent.dataset.onevent](event);\n};\n\nlocal.uiEventListenerDict = local.uiEventListenerDict || {};\n\nlocal.uiEventListenerDict.testRunBrowser = local.testRunBrowser;\n\n// log stderr and stdout to #outputStdoutTextarea1\n[\"error\", \"log\"].forEach(function (key) {\n    console[key + \"_original\"] = console[key + \"_original\"] || console[key];\n    console[key] = function () {\n        var argList;\n        var element;\n        argList = Array.from(arguments); // jslint ignore:line\n        console[key + \"_original\"].apply(console, argList);\n        element = document.querySelector(\n            \"#outputStdoutTextarea1\"\n        );\n        if (!element) {\n            return;\n        }\n        // append text to #outputStdoutTextarea1\n        element.value += argList.map(function (arg) {\n            return (\n                typeof arg === \"string\"\n                ? arg\n                : JSON.stringify(arg, null, 4)\n            );\n        }).join(\" \").replace((\n            /\\u001b\\[\\d*m/g\n        ), \"\") + \"\\n\";\n        // scroll textarea to bottom\n        element.scrollTop = element.scrollHeight;\n    };\n});\n// init event-handling\n[\"Change\", \"Click\", \"Keyup\", \"Submit\"].forEach(function (eventType) {\n    Array.from(document.querySelectorAll(\n        \".eventDelegate\" + eventType\n    )).forEach(function (element) {\n        element.addEventListener(eventType.toLowerCase(), local.uiEventDelegate);\n    });\n});\n// run tests\nlocal.testRunBrowser();\n}());\n\n\n\n/* istanbul ignore next */\n// run node js-env code - init-test\n(function () {\nif (local.isBrowser) {\n    return;\n}\n// init exports\nmodule.exports = local;\n/* validateLineSortedReset */\n// init assets\nlocal.assetsDict = local.assetsDict || {};\n[\n    \"assets.index.template.html\",\n    \"assets.swgg.swagger.json\",\n    \"assets.swgg.swagger.server.json\"\n].forEach(function (file) {\n    file = \"/\" + file;\n    local.assetsDict[file] = local.assetsDict[file] || \"\";\n    if (local.fs.existsSync(local.__dirname + file)) {\n        local.assetsDict[file] = local.fs.readFileSync(\n            local.__dirname + file,\n            \"utf8\"\n        );\n    }\n});\n/* jslint ignore:start */\nlocal.assetsDict[\"/assets.index.template.html\"] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"utf-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<!-- \"assets.utility2.template.html\" -->\\n\\\n<title>{{env.npm_package_name}} ({{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/* jslint utility2:true */\\n\\\n/*csslint\\n\\\n*/\\n\\\n/* csslint ignore:start */\\n\\\n*,\\n\\\n*:after,\\n\\\n*:before {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\n/* csslint ignore:end */\\n\\\n@keyframes uiAnimateShake {\\n\\\n    0%, 50% {\\n\\\n        transform: translateX(10px);\\n\\\n    }\\n\\\n    25%, 75% {\\n\\\n        transform: translateX(-10px);\\n\\\n    }\\n\\\n    100% {\\n\\\n        transform: translateX(0);\\n\\\n    }\\n\\\n}\\n\\\n@keyframes uiAnimateSpin {\\n\\\n    0% {\\n\\\n        transform: rotate(0deg);\\n\\\n    }\\n\\\n    100% {\\n\\\n        transform: rotate(360deg);\\n\\\n    }\\n\\\n}\\n\\\na {\\n\\\n    overflow-wrap: break-word;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #eef;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 0 40px;\\n\\\n}\\n\\\nbody > div,\\n\\\nbody > form > div,\\n\\\nbody > form > input,\\n\\\nbody > form > pre,\\n\\\nbody > form > textarea,\\n\\\nbody > form > .button,\\n\\\nbody > input,\\n\\\nbody > pre,\\n\\\nbody > textarea,\\n\\\nbody > .button {\\n\\\n    margin-bottom: 20px;\\n\\\n}\\n\\\nbody > form > input,\\n\\\nbody > form > .button,\\n\\\nbody > input,\\n\\\nbody > .button {\\n\\\n    width: 20rem;\\n\\\n}\\n\\\nbody > form > textarea,\\n\\\nbody > textarea {\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\nbody > textarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\ncode,\\n\\\npre,\\n\\\ntextarea {\\n\\\n    font-family: Consolas, Menlo, monospace;\\n\\\n    font-size: small;\\n\\\n}\\n\\\npre {\\n\\\n    overflow-wrap: break-word;\\n\\\n    white-space: pre-wrap;\\n\\\n}\\n\\\ntextarea {\\n\\\n    overflow: auto;\\n\\\n    white-space: pre;\\n\\\n}\\n\\\n.button {\\n\\\n    background-color: #fff;\\n\\\n    border: 1px solid;\\n\\\n    border-bottom-color: rgb(186, 186, 186);\\n\\\n    border-left-color: rgb(209, 209, 209);\\n\\\n    border-radius: 4px;\\n\\\n    border-right-color: rgb(209, 209, 209);\\n\\\n    border-top-color: rgb(216, 216, 216);\\n\\\n    color: #00d;\\n\\\n    cursor: pointer;\\n\\\n    display: inline-block;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    font-size: 12px;\\n\\\n    font-style: normal;\\n\\\n    font-weight: normal;\\n\\\n    margin: 0;\\n\\\n    padding: 2px 7px 3px 7px;\\n\\\n    text-align: center;\\n\\\n    text-decoration: underline;\\n\\\n}\\n\\\n.colorError {\\n\\\n    color: #d00;\\n\\\n}\\n\\\n.uiAnimateShake {\\n\\\n    animation-duration: 500ms;\\n\\\n    animation-name: uiAnimateShake;\\n\\\n}\\n\\\n.uiAnimateSlide {\\n\\\n    overflow-y: hidden;\\n\\\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    text-align: center;\\n\\\n}\\n\\\n.zeroPixel {\\n\\\n    border: 0;\\n\\\n    height: 0;\\n\\\n    margin: 0;\\n\\\n    padding: 0;\\n\\\n    width: 0;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 500ms, width 1500ms; width: 0%; z-index: 1;\"></div>\\n\\\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\\n\\\n<a class=\"zeroPixel\" download=\"db.persistence.json\" href=\"\" id=\"dbExportA1\"></a>\\n\\\n<input class=\"zeroPixel\" id=\"dbImportInput1\" type=\"file\">\\n\\\n<script>\\n\\\n/* jslint utility2:true */\\n\\\n// init domOnEventWindowOnloadTimeElapsed\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will measure and print the time-elapsed for window.onload\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    if (window.domOnEventWindowOnloadTimeElapsed) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventWindowOnloadTimeElapsed = Date.now() + 100;\\n\\\n    window.addEventListener(\"load\", function () {\\n\\\n        setTimeout(function () {\\n\\\n            window.domOnEventWindowOnloadTimeElapsed = (\\n\\\n                Date.now()\\n\\\n                - window.domOnEventWindowOnloadTimeElapsed\\n\\\n            );\\n\\\n            console.error(\\n\\\n                \"domOnEventWindowOnloadTimeElapsed = \"\\n\\\n                + window.domOnEventWindowOnloadTimeElapsed\\n\\\n            );\\n\\\n        }, 100);\\n\\\n    });\\n\\\n}());\\n\\\n\\n\\\n\\n\\\n\\n\\\n// init timerIntervalAjaxProgressUpdate\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will increment the ajax-progress-bar\\n\\\n * until the webpage has loaded\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    var ajaxProgressDiv1;\\n\\\n    var ajaxProgressState;\\n\\\n    var ajaxProgressUpdate;\\n\\\n    if (\\n\\\n        window.timerIntervalAjaxProgressUpdate\\n\\\n        || !document.querySelector(\\n\\\n            \"#ajaxProgressDiv1\"\\n\\\n        )\\n\\\n    ) {\\n\\\n        return;\\n\\\n    }\\n\\\n    ajaxProgressDiv1 = document.querySelector(\\n\\\n        \"#ajaxProgressDiv1\"\\n\\\n    );\\n\\\n    setTimeout(function () {\\n\\\n        ajaxProgressDiv1.style.width = \"25%\";\\n\\\n    });\\n\\\n    ajaxProgressState = 0;\\n\\\n    ajaxProgressUpdate = (\\n\\\n        window.local\\n\\\n        && window.local.ajaxProgressUpdate\\n\\\n    ) || function () {\\n\\\n        ajaxProgressDiv1.style.width = \"100%\";\\n\\\n        setTimeout(function () {\\n\\\n            ajaxProgressDiv1.style.background = \"transparent\";\\n\\\n            setTimeout(function () {\\n\\\n                ajaxProgressDiv1.style.width = \"0%\";\\n\\\n            }, 500);\\n\\\n        }, 1000);\\n\\\n    };\\n\\\n    window.timerIntervalAjaxProgressUpdate = setInterval(function () {\\n\\\n        ajaxProgressState += 1;\\n\\\n        ajaxProgressDiv1.style.width = Math.max(\\n\\\n            100 - 75 * Math.exp(-0.125 * ajaxProgressState),\\n\\\n            ajaxProgressDiv1.style.width.slice(0, -1) | 0\\n\\\n        ) + \"%\";\\n\\\n    }, 1000);\\n\\\n    window.addEventListener(\"load\", function () {\\n\\\n        clearInterval(window.timerIntervalAjaxProgressUpdate);\\n\\\n        ajaxProgressUpdate();\\n\\\n    });\\n\\\n}());\\n\\\n\\n\\\n\\n\\\n\\n\\\n// init domOnEventSelectAllWithinPre\\n\\\n(function () {\\n\\\n/*\\n\\\n * this function will limit select-all within <pre tabIndex=\"0\"> elements\\n\\\n * https://stackoverflow.com/questions/985272/selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\\n\\\n */\\n\\\n    \"use strict\";\\n\\\n    if (window.domOnEventSelectAllWithinPre) {\\n\\\n        return;\\n\\\n    }\\n\\\n    window.domOnEventSelectAllWithinPre = function (event) {\\n\\\n        var range;\\n\\\n        var selection;\\n\\\n        if (\\n\\\n            event\\n\\\n            && event.key === \"a\"\\n\\\n            && (event.ctrlKey || event.metaKey)\\n\\\n            && event.target.closest(\"pre\")\\n\\\n        ) {\\n\\\n            range = document.createRange();\\n\\\n            range.selectNodeContents(event.target.closest(\"pre\"));\\n\\\n            selection = window.getSelection();\\n\\\n            selection.removeAllRanges();\\n\\\n            selection.addRange(range);\\n\\\n            event.preventDefault();\\n\\\n        }\\n\\\n    };\\n\\\n    // init event-handling\\n\\\n    document.addEventListener(\\n\\\n        \"keydown\",\\n\\\n        window.domOnEventSelectAllWithinPre\\n\\\n    );\\n\\\n}());\\n\\\n</script>\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} ({{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\\n\\\n<button class=\"button eventDelegateClick onreset\" data-onevent=\"testRunBrowser\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div class=\"uiAnimateSlide\" id=\"testReportDiv1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbResetButton1\" id=\"dbResetButton1\">\\n\\\n    reset database\\n\\\n</button><br>\\n\\\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbExportButton1\" id=\"dbExportButton1\">\\n\\\n    export database -&gt; file\\n\\\n</button><br>\\n\\\n<button class=\"button eventDelegateClick\" data-onevent=\"testRunBrowser\" data-on-event-dom-db=\"dbImportButton1\" id=\"dbImportButton1\">\\n\\\n    import database &lt;- file\\n\\\n</button><br>\\n\\\n<label>edit or paste script below to\\n\\\n    <a\\n\\\n        href=\"https://kaizhu256.github.io/node-db-lite/build..beta..travis-ci.org/apidoc.html\"\\n\\\n        target=\"_blank\"\\n\\\n    >eval</a>\\n\\\n</label>\\n\\\n<textarea id=\"inputTextareaEval1\">\\n\\\n/*jslint browser: true, node: true*/\\n\\\n\"use strict\";\\n\\\nvar dbTable1, modeNext, onNext;\\n\\\nmodeNext = 0;\\n\\\nonNext = function (error, data) {\\n\\\n    modeNext = error\\n\\\n        ? Infinity\\n\\\n        : modeNext + 1;\\n\\\n    switch (modeNext) {\\n\\\n    case 1:\\n\\\n        dbTable1 = window.dbTable1 = window.utility2_db.dbTableCreateOne({\\n\\\n            name: \"dbTable1\"\\n\\\n        }, onNext);\\n\\\n        break;\\n\\\n    case 2:\\n\\\n        dbTable1.idIndexCreate({ name: \"field1\" }, onNext);\\n\\\n        break;\\n\\\n    case 3:\\n\\\n        dbTable1.crudSetOneById({ field1: \"aa\", field2: 1, field3: \"foo\" }, onNext);\\n\\\n        break;\\n\\\n    case 4:\\n\\\n        dbTable1.crudSetOneById({ field1: \"bb\", field2: 2, field3: \"bar\" }, onNext);\\n\\\n        break;\\n\\\n    case 5:\\n\\\n        dbTable1.crudSetOneById({ field1: \"cc\", field2: 3, field3: \"baz\" }, onNext);\\n\\\n        break;\\n\\\n    case 6:\\n\\\n        dbTable1.crudRemoveOneById({ field1: \"aa\" }, onNext);\\n\\\n        break;\\n\\\n    case 7:\\n\\\n        dbTable1.crudUpdateOneById({ field1: \"bb\", field2: -1 }, onNext);\\n\\\n        break;\\n\\\n    case 8:\\n\\\n        dbTable1.crudSetOneById({ field2: Math.random() }, onNext);\\n\\\n        break;\\n\\\n    case 9:\\n\\\n        dbTable1.crudGetManyByQuery({\\n\\\n            limit: Infinity,\\n\\\n            query: { field2: { $gte: -Infinity, $lte: Infinity } },\\n\\\n            skip: 0,\\n\\\n            sort: [{ fieldName: \"_timeUpdated\", idDescending: true }]\\n\\\n        }, onNext);\\n\\\n        break;\\n\\\n    case 10:\\n\\\n        console.error(data);\\n\\\n        dbTable1.crudCountAll(onNext);\\n\\\n        break;\\n\\\n    case 11:\\n\\\n        console.error(\"number of rows: \" + data);\\n\\\n        break;\\n\\\n    default:\\n\\\n        console.error(error.stack);\\n\\\n    }\\n\\\n};\\n\\\nonNext();\\n\\\n</textarea>\\n\\\n<button class=\"button eventDelegateClick oneval onreset\" data-onevent=\"testRunBrowser\" id=\"dbEvalButton1\">eval script</button><br>\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputStdoutTextarea1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script>window.utility2_onReadyBefore.counter += 1;</script>\\n\\\n<script src=\"jsonp.utility2.stateInit?callback=window.utility2.stateInit\"></script>\\n\\\n<script src=\"assets.db.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<script>window.utility2_onReadyBefore();</script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n/* jslint ignore:end */\n/* validateLineSortedReset */\n/* jslint ignore:start */\nlocal.assetsDict[\"/assets.db.js\"] =\n    local.assetsDict[\"/assets.db.js\"] ||\n    local.fs.readFileSync(local.__dirname + \"/lib.db.js\", \"utf8\"\n).replace((/^#!\\//), \"// \");\n/* jslint ignore:end */\n/* validateLineSortedReset */\nlocal.assetsDict[\"/\"] = local.assetsDict[\"/assets.index.template.html\"]\n.replace((\n    /\\{\\{env\\.(\\w+?)\\}\\}/g\n), function (match0, match1) {\n    switch (match1) {\n    case \"npm_package_description\":\n        return \"the greatest app in the world!\";\n    case \"npm_package_name\":\n        return \"db-lite\";\n    case \"npm_package_nameLib\":\n        return \"db\";\n    case \"npm_package_version\":\n        return \"0.0.1\";\n    default:\n        return match0;\n    }\n});\nlocal.assetsDict[\"/assets.example.html\"] = local.assetsDict[\"/\"];\nlocal.assetsDict[\"/index.html\"] = local.assetsDict[\"/\"];\n// init cli\nif (module !== require.main || globalThis.utility2_rollup) {\n    return;\n}\n/* validateLineSortedReset */\nlocal.assetsDict[\"/assets.example.js\"] = (\n    local.assetsDict[\"/assets.example.js\"]\n    || local.fs.readFileSync(__filename, \"utf8\")\n);\nlocal.assetsDict[\"/favicon.ico\"] = local.assetsDict[\"/favicon.ico\"] || \"\";\n// if $npm_config_timeout_exit exists,\n// then exit this process after $npm_config_timeout_exit ms\nif (Number(process.env.npm_config_timeout_exit)) {\n    setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n}\n// start server\nif (globalThis.utility2_serverHttp1) {\n    return;\n}\nprocess.env.PORT = process.env.PORT || \"8081\";\nconsole.error(\"server starting on port \" + process.env.PORT);\nlocal.http.createServer(function (request, response) {\n    request.urlParsed = local.url.parse(request.url);\n    if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n        response.end(local.assetsDict[request.urlParsed.pathname]);\n        return;\n    }\n    response.statusCode = 404;\n    response.end();\n}).listen(process.env.PORT);\n}());\n\n\n\n}());"}