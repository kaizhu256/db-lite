<svg height="41374" width="720" xmlns="http://www.w3.org/2000/svg">
<rect height="41374" fill="#555" width="720"></rect>
<text fill="#7f7" font-family="Courier New" font-size="12" xml:space="preserve">
<tspan x="10" y="26"></tspan>

<tspan x="10" y="42">[MODE_BUILD=npmTestPublished] - 2019-08-04T07:05:46.329Z - npm-testing /tmp/npmTestPublished/nod\</tspan>
<tspan x="10" y="58">e_modules/db-lite</tspan>

<tspan x="10" y="74"></tspan>

<tspan x="10" y="90"></tspan>

<tspan x="10" y="106">covering $ /home/travis/.nvm/versions/node/v12.7.0/bin/node /tmp/npmTestPublished/node_modules/d\</tspan>
<tspan x="10" y="122">b-lite/test.js</tspan>

<tspan x="10" y="138">&gt; --- /tmp/npmTestPublished/node_modules/db-lite/README.md.autofix.old	2019-08-04 07:05:47.23598\</tspan>
<tspan x="10" y="154">5940 +0000</tspan>

<tspan x="10" y="170">+++ /tmp/npmTestPublished/node_modules/db-lite/README.md	2019-08-04 07:05:47.235985940 +0000</tspan>

<tspan x="10" y="186">@@ -162,30 +162,30 @@</tspan>

<tspan x="10" y="202">     // init function</tspan>

<tspan x="10" y="218">     local.assertThrow = function (passed, message) {</tspan>

<tspan x="10" y="234">     /*</tspan>

<tspan x="10" y="250">-     * this function will throw the error &lt;message&gt; if &lt;passed&gt; is falsy</tspan>

<tspan x="10" y="266">+     * this function will throw error-&lt;message&gt; if &lt;passed&gt; is falsy</tspan>

<tspan x="10" y="282">      */</tspan>

<tspan x="10" y="298">-        var error;</tspan>

<tspan x="10" y="314">+        var err;</tspan>

<tspan x="10" y="330">         if (passed) {</tspan>

<tspan x="10" y="346">             return;</tspan>

<tspan x="10" y="362">         }</tspan>

<tspan x="10" y="378">-        error = (</tspan>

<tspan x="10" y="394">-            // ternary-condition</tspan>

<tspan x="10" y="410">+        err = (</tspan>

<tspan x="10" y="426">+            // ternary-operator</tspan>

<tspan x="10" y="442">             (</tspan>

<tspan x="10" y="458">                 message</tspan>

<tspan x="10" y="474">                 &amp;&amp; typeof message.message === "string"</tspan>

<tspan x="10" y="490">                 &amp;&amp; typeof message.stack === "string"</tspan>

<tspan x="10" y="506">             )</tspan>

<tspan x="10" y="522">-            // if message is an error-object, then leave it as is</tspan>

<tspan x="10" y="538">+            // if message is error-object, then leave as is</tspan>

<tspan x="10" y="554">             ? message</tspan>

<tspan x="10" y="570">             : new Error(</tspan>

<tspan x="10" y="586">                 typeof message === "string"</tspan>

<tspan x="10" y="602">-                // if message is a string, then leave it as is</tspan>

<tspan x="10" y="618">+                // if message is a string, then leave as is</tspan>

<tspan x="10" y="634">                 ? message</tspan>

<tspan x="10" y="650">                 // else JSON.stringify message</tspan>

<tspan x="10" y="666">                 : JSON.stringify(message, null, 4)</tspan>

<tspan x="10" y="682">             )</tspan>

<tspan x="10" y="698">         );</tspan>

<tspan x="10" y="714">-        throw error;</tspan>

<tspan x="10" y="730">+        throw err;</tspan>

<tspan x="10" y="746">     };</tspan>

<tspan x="10" y="762">     local.functionOrNop = function (fnc) {</tspan>

<tspan x="10" y="778">     /*</tspan>

<tspan x="10" y="794">@@ -213,7 +213,8 @@</tspan>

<tspan x="10" y="810">      * null, undefined, or empty-string,</tspan>

<tspan x="10" y="826">      * then overwrite them with items from &lt;source&gt;</tspan>

<tspan x="10" y="842">      */</tspan>

<tspan x="10" y="858">-        Object.keys(source).forEach(function (key) {</tspan>

<tspan x="10" y="874">+        target = target || {};</tspan>

<tspan x="10" y="890">+        Object.keys(source || {}).forEach(function (key) {</tspan>

<tspan x="10" y="906">             if (</tspan>

<tspan x="10" y="922">                 target[key] === null</tspan>

<tspan x="10" y="938">                 || target[key] === undefined</tspan>

<tspan x="10" y="954">@@ -222,6 +223,7 @@</tspan>

<tspan x="10" y="970">                 target[key] = target[key] || source[key];</tspan>

<tspan x="10" y="986">             }</tspan>

<tspan x="10" y="1002">         });</tspan>

<tspan x="10" y="1018">+        return target;</tspan>

<tspan x="10" y="1034">     };</tspan>

<tspan x="10" y="1050">     // require builtin</tspan>

<tspan x="10" y="1066">     if (!local.isBrowser) {</tspan>

<tspan x="10" y="1082">jslint-autofix - modified and saved file /tmp/npmTestPublished/node_modules/db-lite/README.md</tspan>

<tspan x="10" y="1098">jslint - 421ms /tmp/npmTestPublished/node_modules/db-lite/README.md</tspan>

<tspan x="10" y="1114">http-server listening on port 34173</tspan>

<tspan x="10" y="1130">db - dropping database ...</tspan>

<tspan x="10" y="1146">--- /tmp/npmTestPublished/node_modules/db-lite/lib.db.js.autofix.old	2019-08-04 07:05:48.0764216\</tspan>
<tspan x="10" y="1162">22 +0000</tspan>

<tspan x="10" y="1178">+++ /tmp/npmTestPublished/node_modules/db-lite/lib.db.js	2019-08-04 07:05:47.988375987 +0000</tspan>

<tspan x="10" y="1194">@@ -83,30 +83,30 @@</tspan>

<tspan x="10" y="1210">     // init function</tspan>

<tspan x="10" y="1226">     local.assertThrow = function (passed, message) {</tspan>

<tspan x="10" y="1242">     /*</tspan>

<tspan x="10" y="1258">-     * this function will throw the error &lt;message&gt; if &lt;passed&gt; is falsy</tspan>

<tspan x="10" y="1274">+     * this function will throw error-&lt;message&gt; if &lt;passed&gt; is falsy</tspan>

<tspan x="10" y="1290">      */</tspan>

<tspan x="10" y="1306">-        var error;</tspan>

<tspan x="10" y="1322">+        var err;</tspan>

<tspan x="10" y="1338">         if (passed) {</tspan>

<tspan x="10" y="1354">             return;</tspan>

<tspan x="10" y="1370">         }</tspan>

<tspan x="10" y="1386">-        error = (</tspan>

<tspan x="10" y="1402">-            // ternary-condition</tspan>

<tspan x="10" y="1418">+        err = (</tspan>

<tspan x="10" y="1434">+            // ternary-operator</tspan>

<tspan x="10" y="1450">             (</tspan>

<tspan x="10" y="1466">                 message</tspan>

<tspan x="10" y="1482">                 &amp;&amp; typeof message.message === "string"</tspan>

<tspan x="10" y="1498">                 &amp;&amp; typeof message.stack === "string"</tspan>

<tspan x="10" y="1514">             )</tspan>

<tspan x="10" y="1530">-            // if message is an error-object, then leave it as is</tspan>

<tspan x="10" y="1546">+            // if message is error-object, then leave as is</tspan>

<tspan x="10" y="1562">             ? message</tspan>

<tspan x="10" y="1578">             : new Error(</tspan>

<tspan x="10" y="1594">                 typeof message === "string"</tspan>

<tspan x="10" y="1610">-                // if message is a string, then leave it as is</tspan>

<tspan x="10" y="1626">+                // if message is a string, then leave as is</tspan>

<tspan x="10" y="1642">                 ? message</tspan>

<tspan x="10" y="1658">                 // else JSON.stringify message</tspan>

<tspan x="10" y="1674">                 : JSON.stringify(message, null, 4)</tspan>

<tspan x="10" y="1690">             )</tspan>

<tspan x="10" y="1706">         );</tspan>

<tspan x="10" y="1722">-        throw error;</tspan>

<tspan x="10" y="1738">+        throw err;</tspan>

<tspan x="10" y="1754">     };</tspan>

<tspan x="10" y="1770">     local.functionOrNop = function (fnc) {</tspan>

<tspan x="10" y="1786">     /*</tspan>

<tspan x="10" y="1802">@@ -134,7 +134,8 @@</tspan>

<tspan x="10" y="1818">      * null, undefined, or empty-string,</tspan>

<tspan x="10" y="1834">      * then overwrite them with items from &lt;source&gt;</tspan>

<tspan x="10" y="1850">      */</tspan>

<tspan x="10" y="1866">-        Object.keys(source).forEach(function (key) {</tspan>

<tspan x="10" y="1882">+        target = target || {};</tspan>

<tspan x="10" y="1898">+        Object.keys(source || {}).forEach(function (key) {</tspan>

<tspan x="10" y="1914">             if (</tspan>

<tspan x="10" y="1930">                 target[key] === null</tspan>

<tspan x="10" y="1946">                 || target[key] === undefined</tspan>

<tspan x="10" y="1962">@@ -143,6 +144,7 @@</tspan>

<tspan x="10" y="1978">                 target[key] = target[key] || source[key];</tspan>

<tspan x="10" y="1994">             }</tspan>

<tspan x="10" y="2010">         });</tspan>

<tspan x="10" y="2026">+        return target;</tspan>

<tspan x="10" y="2042">     };</tspan>

<tspan x="10" y="2058">     // require builtin</tspan>

<tspan x="10" y="2074">     if (!local.isBrowser) {</tspan>

<tspan x="10" y="2090">@@ -206,9 +208,9 @@</tspan>

<tspan x="10" y="2106"> </tspan>

<tspan x="10" y="2122"> </tspan>

<tspan x="10" y="2138"> /* validateLineSortedReset */</tspan>

<tspan x="10" y="2154">-local.cliRun = function (option) {</tspan>

<tspan x="10" y="2170">+local.cliRun = function (opt) {</tspan>

<tspan x="10" y="2186"> /*</tspan>

<tspan x="10" y="2202">- * this function will run the cli</tspan>

<tspan x="10" y="2218">+ * this function will run the cli with given &lt;opt&gt;</tspan>

<tspan x="10" y="2234">  */</tspan>

<tspan x="10" y="2250">     local.cliDict._eval = local.cliDict._eval || function () {</tspan>

<tspan x="10" y="2266">     /*</tspan>

<tspan x="10" y="2282">@@ -242,10 +244,10 @@</tspan>

<tspan x="10" y="2298">         file = __filename.replace((</tspan>

<tspan x="10" y="2314">             /.*\//</tspan>

<tspan x="10" y="2330">         ), "");</tspan>

<tspan x="10" y="2346">-        option = Object.assign({}, option);</tspan>

<tspan x="10" y="2362">+        opt = Object.assign({}, opt);</tspan>

<tspan x="10" y="2378">         packageJson = require("./package.json");</tspan>

<tspan x="10" y="2394">         // validate comment</tspan>

<tspan x="10" y="2410">-        option.rgxComment = option.rgxComment || (</tspan>

<tspan x="10" y="2426">+        opt.rgxComment = opt.rgxComment || (</tspan>

<tspan x="10" y="2442">             /\) \{\n(?:| {4})\/\*\n(?: | {5})\*((?: &lt;[^&gt;]*?&gt;| \.\.\.)*?)\n(?: | {5})\* (will .*\</tspan>
<tspan x="10" y="2458">?\S)\n(?: | {5})\*\/\n(?: {4}| {8})\S/</tspan>

<tspan x="10" y="2474">         );</tspan>

<tspan x="10" y="2490">         textDict = {};</tspan>

<tspan x="10" y="2506">@@ -264,7 +266,7 @@</tspan>

<tspan x="10" y="2522">                 return;</tspan>

<tspan x="10" y="2538">             }</tspan>

<tspan x="10" y="2554">             try {</tspan>

<tspan x="10" y="2570">-                commandList[ii] = option.rgxComment.exec(text);</tspan>

<tspan x="10" y="2586">+                commandList[ii] = opt.rgxComment.exec(text);</tspan>

<tspan x="10" y="2602">                 commandList[ii] = {</tspan>

<tspan x="10" y="2618">                     argList: (commandList[ii][1] || "").trim(),</tspan>

<tspan x="10" y="2634">                     command: [key],</tspan>

<tspan x="10" y="2650">@@ -273,16 +275,14 @@</tspan>

<tspan x="10" y="2666">             } catch (ignore) {</tspan>

<tspan x="10" y="2682">                 local.assertThrow(null, new Error(</tspan>

<tspan x="10" y="2698">                     "cliRun - cannot parse comment in COMMAND "</tspan>

<tspan x="10" y="2714">-                    + key + ":\nnew RegExp("</tspan>

<tspan x="10" y="2730">-                    + JSON.stringify(option.rgxComment.source)</tspan>

<tspan x="10" y="2746">-                    + ").exec(" + JSON.stringify(text)</tspan>

<tspan x="10" y="2762">-                    .replace((</tspan>

<tspan x="10" y="2778">+                    + key</tspan>

<tspan x="10" y="2794">+                    + ":\nnew RegExp("</tspan>

<tspan x="10" y="2810">+                    + JSON.stringify(opt.rgxComment.source)</tspan>

<tspan x="10" y="2826">+                    + ").exec(" + JSON.stringify(text).replace((</tspan>

<tspan x="10" y="2842">                         /\\\\/g</tspan>

<tspan x="10" y="2858">-                    ), " ")</tspan>

<tspan x="10" y="2874">-                    .replace((</tspan>

<tspan x="10" y="2890">+                    ), " ").replace((</tspan>

<tspan x="10" y="2906">                         /\\n/g</tspan>

<tspan x="10" y="2922">-                    ), "\\n\\\n")</tspan>

<tspan x="10" y="2938">-                    .replace((</tspan>

<tspan x="10" y="2954">+                    ), "\\n\\\n").replace((</tspan>

<tspan x="10" y="2970">                         / /g</tspan>

<tspan x="10" y="2986">                     ), "\\\\") + ");"</tspan>

<tspan x="10" y="3002">                 ));</tspan>

<tspan x="10" y="3018">@@ -290,34 +290,32 @@</tspan>

<tspan x="10" y="3034">         });</tspan>

<tspan x="10" y="3050">         text = "";</tspan>

<tspan x="10" y="3066">         text += packageJson.name + " (" + packageJson.version + ")\n\n";</tspan>

<tspan x="10" y="3082">-        text += commandList</tspan>

<tspan x="10" y="3098">-        .filter(function (element) {</tspan>

<tspan x="10" y="3114">-            return element;</tspan>

<tspan x="10" y="3130">-        })</tspan>

<tspan x="10" y="3146">-        .map(function (element, ii) {</tspan>

<tspan x="10" y="3162">-            element.command = element.command.filter(function (element) {</tspan>

<tspan x="10" y="3178">-                return element;</tspan>

<tspan x="10" y="3194">+        text += commandList.filter(function (elem) {</tspan>

<tspan x="10" y="3210">+            return elem;</tspan>

<tspan x="10" y="3226">+        }).map(function (elem, ii) {</tspan>

<tspan x="10" y="3242">+            elem.command = elem.command.filter(function (elem) {</tspan>

<tspan x="10" y="3258">+                return elem;</tspan>

<tspan x="10" y="3274">             });</tspan>

<tspan x="10" y="3290">             switch (ii) {</tspan>

<tspan x="10" y="3306">             case 0:</tspan>

<tspan x="10" y="3322">             case 1:</tspan>

<tspan x="10" y="3338">-                element.argList = [element.argList];</tspan>

<tspan x="10" y="3354">+                elem.argList = [elem.argList];</tspan>

<tspan x="10" y="3370">                 break;</tspan>

<tspan x="10" y="3386">             default:</tspan>

<tspan x="10" y="3402">-                element.argList = element.argList.split(" ");</tspan>

<tspan x="10" y="3418">-                element.description = (</tspan>

<tspan x="10" y="3434">+                elem.argList = elem.argList.split(" ");</tspan>

<tspan x="10" y="3450">+                elem.description = (</tspan>

<tspan x="10" y="3466">                     "# COMMAND "</tspan>

<tspan x="10" y="3482">-                    + (element.command[0] || "&lt;none&gt;") + "\n# "</tspan>

<tspan x="10" y="3498">-                    + element.description</tspan>

<tspan x="10" y="3514">+                    + (elem.command[0] || "&lt;none&gt;") + "\n# "</tspan>

<tspan x="10" y="3530">+                    + elem.description</tspan>

<tspan x="10" y="3546">                 );</tspan>

<tspan x="10" y="3562">             }</tspan>

<tspan x="10" y="3578">             return (</tspan>

<tspan x="10" y="3594">-                element.description + "\n  " + file</tspan>

<tspan x="10" y="3610">-                + ("  " + element.command.sort().join("|") + "  ")</tspan>

<tspan x="10" y="3626">+                elem.description + "\n  " + file</tspan>

<tspan x="10" y="3642">+                + ("  " + elem.command.sort().join("|") + "  ")</tspan>

<tspan x="10" y="3658">                     .replace((</tspan>

<tspan x="10" y="3674">                     /^ {4}$/</tspan>

<tspan x="10" y="3690">                 ), "  ")</tspan>

<tspan x="10" y="3706">-                + element.argList.join("  ")</tspan>

<tspan x="10" y="3722">+                + elem.argList.join("  ")</tspan>

<tspan x="10" y="3738">             );</tspan>

<tspan x="10" y="3754">         })</tspan>

<tspan x="10" y="3770">         .join("\n\n");</tspan>

<tspan x="10" y="3786">@@ -420,20 +418,15 @@</tspan>

<tspan x="10" y="3802">         }</tspan>

<tspan x="10" y="3818">         // if obj is not an array,</tspan>

<tspan x="10" y="3834">         // then recurse its items with object-keys sorted</tspan>

<tspan x="10" y="3850">-        tmp = "{" + Object.keys(obj)</tspan>

<tspan x="10" y="3866">-        // sort object-keys</tspan>

<tspan x="10" y="3882">-        .sort()</tspan>

<tspan x="10" y="3898">-        .map(function (key) {</tspan>

<tspan x="10" y="3914">+        tmp = "{" + Object.keys(obj).sort().map(function (key) {</tspan>

<tspan x="10" y="3930">             // recurse</tspan>

<tspan x="10" y="3946">             tmp = stringify(obj[key]);</tspan>

<tspan x="10" y="3962">             if (typeof tmp === "string") {</tspan>

<tspan x="10" y="3978">                 return JSON.stringify(key) + ":" + tmp;</tspan>

<tspan x="10" y="3994">             }</tspan>

<tspan x="10" y="4010">-        })</tspan>

<tspan x="10" y="4026">-        .filter(function (obj) {</tspan>

<tspan x="10" y="4042">+        }).filter(function (obj) {</tspan>

<tspan x="10" y="4058">             return typeof obj === "string";</tspan>

<tspan x="10" y="4074">-        })</tspan>

<tspan x="10" y="4090">-        .join(",") + "}";</tspan>

<tspan x="10" y="4106">+        }).join(",") + "}";</tspan>

<tspan x="10" y="4122">         circularSet.delete(obj);</tspan>

<tspan x="10" y="4138">         return tmp;</tspan>

<tspan x="10" y="4154">     };</tspan>

<tspan x="10" y="4170">@@ -448,7 +441,7 @@</tspan>

<tspan x="10" y="4186"> </tspan>

<tspan x="10" y="4202"> local.listShuffle = function (list) {</tspan>

<tspan x="10" y="4218"> /*</tspan>

<tspan x="10" y="4234">- * this function will inplace shuffle the list using fisher-yates algorithm</tspan>

<tspan x="10" y="4250">+ * this function will inplace shuffle &lt;list&gt; using fisher-yates algorithm</tspan>

<tspan x="10" y="4266">  * https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle</tspan>

<tspan x="10" y="4282">  */</tspan>

<tspan x="10" y="4298">     var ii;</tspan>

<tspan x="10" y="4314">@@ -504,37 +497,37 @@</tspan>

<tspan x="10" y="4330">     return dict;</tspan>

<tspan x="10" y="4346"> };</tspan>

<tspan x="10" y="4362"> </tspan>

<tspan x="10" y="4378">-local.onErrorDefault = function (error) {</tspan>

<tspan x="10" y="4394">+local.onErrorDefault = function (err) {</tspan>

<tspan x="10" y="4410"> /*</tspan>

<tspan x="10" y="4426">- * this function will if &lt;error&gt; exists, then print it to stderr</tspan>

<tspan x="10" y="4442">+ * this function will if &lt;err&gt; exists, then print it to stderr</tspan>

<tspan x="10" y="4458">  */</tspan>

<tspan x="10" y="4474">-    if (error) {</tspan>

<tspan x="10" y="4490">-        console.error(error);</tspan>

<tspan x="10" y="4506">+    if (err) {</tspan>

<tspan x="10" y="4522">+        console.error(err);</tspan>

<tspan x="10" y="4538">     }</tspan>

<tspan x="10" y="4554">-    return error;</tspan>

<tspan x="10" y="4570">+    return err;</tspan>

<tspan x="10" y="4586"> };</tspan>

<tspan x="10" y="4602"> </tspan>

<tspan x="10" y="4618"> local.onErrorWithStack = function (onError) {</tspan>

<tspan x="10" y="4634"> /*</tspan>

<tspan x="10" y="4650">- * this function will create a new callback that will call onError,</tspan>

<tspan x="10" y="4666">- * and append the current stack to any error</tspan>

<tspan x="10" y="4682">+ * this function will create wrapper around &lt;onError&gt;</tspan>

<tspan x="10" y="4698">+ * that will append current-stack to err.stack</tspan>

<tspan x="10" y="4714">  */</tspan>

<tspan x="10" y="4730">     var onError2;</tspan>

<tspan x="10" y="4746">     var stack;</tspan>

<tspan x="10" y="4762">     stack = new Error().stack.replace((</tspan>

<tspan x="10" y="4778">         /(.*?)\n.*?$/m</tspan>

<tspan x="10" y="4794">     ), "$1");</tspan>

<tspan x="10" y="4810">-    onError2 = function (error, data, meta) {</tspan>

<tspan x="10" y="4826">+    onError2 = function (err, data, meta) {</tspan>

<tspan x="10" y="4842">         if (</tspan>

<tspan x="10" y="4858">-            error</tspan>

<tspan x="10" y="4874">-            &amp;&amp; typeof error.stack === "string"</tspan>

<tspan x="10" y="4890">-            &amp;&amp; error !== local.errorDefault</tspan>

<tspan x="10" y="4906">-            &amp;&amp; String(error.stack).indexOf(stack.split("\n")[2]) &lt; 0</tspan>

<tspan x="10" y="4922">+            err</tspan>

<tspan x="10" y="4938">+            &amp;&amp; typeof err.stack === "string"</tspan>

<tspan x="10" y="4954">+            &amp;&amp; err !== local.errorDefault</tspan>

<tspan x="10" y="4970">+            &amp;&amp; String(err.stack).indexOf(stack.split("\n")[2]) &lt; 0</tspan>

<tspan x="10" y="4986">         ) {</tspan>

<tspan x="10" y="5002">-            // append the current stack to error.stack</tspan>

<tspan x="10" y="5018">-            error.stack += "\n" + stack;</tspan>

<tspan x="10" y="5034">+            // append current-stack to err.stack</tspan>

<tspan x="10" y="5050">+            err.stack += "\n" + stack;</tspan>

<tspan x="10" y="5066">         }</tspan>

<tspan x="10" y="5082">-        onError(error, data, meta);</tspan>

<tspan x="10" y="5098">+        onError(err, data, meta);</tspan>

<tspan x="10" y="5114">     };</tspan>

<tspan x="10" y="5130">     // debug onError</tspan>

<tspan x="10" y="5146">     onError2.toString = function () {</tspan>

<tspan x="10" y="5162">@@ -547,36 +540,36 @@</tspan>

<tspan x="10" y="5178"> /*</tspan>

<tspan x="10" y="5194">  * this function will create a function that will</tspan>

<tspan x="10" y="5210">  * 1. run async tasks in parallel</tspan>

<tspan x="10" y="5226">- * 2. if counter === 0 or error occurred, then call onError with error</tspan>

<tspan x="10" y="5242">+ * 2. if counter === 0 or err occurred, then call onError(err)</tspan>

<tspan x="10" y="5258">  */</tspan>

<tspan x="10" y="5274">     var onParallel;</tspan>

<tspan x="10" y="5290">     onError = local.onErrorWithStack(onError);</tspan>

<tspan x="10" y="5306">     onEach = onEach || local.nop;</tspan>

<tspan x="10" y="5322">     onRetry = onRetry || local.nop;</tspan>

<tspan x="10" y="5338">-    onParallel = function (error, data) {</tspan>

<tspan x="10" y="5354">-        if (onRetry(error, data)) {</tspan>

<tspan x="10" y="5370">+    onParallel = function (err, data) {</tspan>

<tspan x="10" y="5386">+        if (onRetry(err, data)) {</tspan>

<tspan x="10" y="5402">             return;</tspan>

<tspan x="10" y="5418">         }</tspan>

<tspan x="10" y="5434">         // decrement counter</tspan>

<tspan x="10" y="5450">         onParallel.counter -= 1;</tspan>

<tspan x="10" y="5466">         // validate counter</tspan>

<tspan x="10" y="5482">-        if (!(onParallel.counter &gt;= 0 || error || onParallel.error)) {</tspan>

<tspan x="10" y="5498">-            error = new Error(</tspan>

<tspan x="10" y="5514">+        if (!(onParallel.counter &gt;= 0 || err || onParallel.err)) {</tspan>

<tspan x="10" y="5530">+            err = new Error(</tspan>

<tspan x="10" y="5546">                 "invalid onParallel.counter = " + onParallel.counter</tspan>

<tspan x="10" y="5562">             );</tspan>

<tspan x="10" y="5578">         // ensure onError is run only once</tspan>

<tspan x="10" y="5594">         } else if (onParallel.counter &lt; 0) {</tspan>

<tspan x="10" y="5610">             return;</tspan>

<tspan x="10" y="5626">         }</tspan>

<tspan x="10" y="5642">-        // handle error</tspan>

<tspan x="10" y="5658">-        if (error) {</tspan>

<tspan x="10" y="5674">-            onParallel.error = error;</tspan>

<tspan x="10" y="5690">+        // handle err</tspan>

<tspan x="10" y="5706">+        if (err) {</tspan>

<tspan x="10" y="5722">+            onParallel.err = err;</tspan>

<tspan x="10" y="5738">             // ensure counter &lt;= 0</tspan>

<tspan x="10" y="5754">             onParallel.counter = -Math.abs(onParallel.counter);</tspan>

<tspan x="10" y="5770">         }</tspan>

<tspan x="10" y="5786">         // call onError when isDone</tspan>

<tspan x="10" y="5802">         if (onParallel.counter &lt;= 0) {</tspan>

<tspan x="10" y="5818">-            onError(error, data);</tspan>

<tspan x="10" y="5834">+            onError(err, data);</tspan>

<tspan x="10" y="5850">             return;</tspan>

<tspan x="10" y="5866">         }</tspan>

<tspan x="10" y="5882">         onEach();</tspan>

<tspan x="10" y="5898">@@ -592,53 +585,58 @@</tspan>

<tspan x="10" y="5914">  * this function will start the repl-debugger</tspan>

<tspan x="10" y="5930">  */</tspan>

<tspan x="10" y="5946">     var that;</tspan>

<tspan x="10" y="5962">-    if (globalThis.utility2_serverRepl1) {</tspan>

<tspan x="10" y="5978">+    if (globalThis.utility2_repl1) {</tspan>

<tspan x="10" y="5994">         return;</tspan>

<tspan x="10" y="6010">     }</tspan>

<tspan x="10" y="6026">-    // start replServer</tspan>

<tspan x="10" y="6042">+    // start repl</tspan>

<tspan x="10" y="6058">     that = require("repl").start({</tspan>

<tspan x="10" y="6074">         useGlobal: true</tspan>

<tspan x="10" y="6090">     });</tspan>

<tspan x="10" y="6106">-    globalThis.utility2_serverRepl1 = that;</tspan>

<tspan x="10" y="6122">-    that.onError = function (error) {</tspan>

<tspan x="10" y="6138">+    globalThis.utility2_repl1 = that;</tspan>

<tspan x="10" y="6154">+    that.onError = function (err) {</tspan>

<tspan x="10" y="6170">     /*</tspan>

<tspan x="10" y="6186">-     * this function will debug any repl-error</tspan>

<tspan x="10" y="6202">+     * this function will debug repl-error</tspan>

<tspan x="10" y="6218">      */</tspan>

<tspan x="10" y="6234">-        // debug error</tspan>

<tspan x="10" y="6250">-        globalThis.utility2_debugReplError = error;</tspan>

<tspan x="10" y="6266">-        console.error(error);</tspan>

<tspan x="10" y="6282">+        globalThis.utility2_debugReplError = err;</tspan>

<tspan x="10" y="6298">+        console.error(err);</tspan>

<tspan x="10" y="6314">     };</tspan>

<tspan x="10" y="6330">-    // save repl eval function</tspan>

<tspan x="10" y="6346">+    // save eval-function</tspan>

<tspan x="10" y="6362">     that.evalDefault = that.eval;</tspan>

<tspan x="10" y="6378">-    // hook custom repl eval function</tspan>

<tspan x="10" y="6394">+    // hook custom-eval-function</tspan>

<tspan x="10" y="6410">     that.eval = function (script, context, file, onError) {</tspan>

<tspan x="10" y="6426">         var onError2;</tspan>

<tspan x="10" y="6442">-        onError2 = function (error, data) {</tspan>

<tspan x="10" y="6458">-            // debug error</tspan>

<tspan x="10" y="6474">+        onError2 = function (err, data) {</tspan>

<tspan x="10" y="6490">+            // debug err</tspan>

<tspan x="10" y="6506">             globalThis.utility2_debugReplError = (</tspan>

<tspan x="10" y="6522">-                error</tspan>

<tspan x="10" y="6538">-                || globalThis.utility2_debugReplError</tspan>

<tspan x="10" y="6554">+                err || globalThis.utility2_debugReplError</tspan>

<tspan x="10" y="6570">             );</tspan>

<tspan x="10" y="6586">-            onError(error, data);</tspan>

<tspan x="10" y="6602">+            onError(err, data);</tspan>

<tspan x="10" y="6618">         };</tspan>

<tspan x="10" y="6634">         script.replace((</tspan>

<tspan x="10" y="6650">             /^(\S+) (.*?)\n/</tspan>

<tspan x="10" y="6666">         ), function (ignore, match1, match2) {</tspan>

<tspan x="10" y="6682">             switch (match1) {</tspan>

<tspan x="10" y="6698">-            // syntax-sugar to run async shell-command</tspan>

<tspan x="10" y="6714">+            // syntax-sugar - run async shell-command</tspan>

<tspan x="10" y="6730">             case "$":</tspan>

<tspan x="10" y="6746">                 switch (match2) {</tspan>

<tspan x="10" y="6762">-                // syntax-sugar to run git diff</tspan>

<tspan x="10" y="6778">+                // syntax-sugar - run git diff</tspan>

<tspan x="10" y="6794">                 case "git diff":</tspan>

<tspan x="10" y="6810">                     match2 = "git diff --color | cat";</tspan>

<tspan x="10" y="6826">                     break;</tspan>

<tspan x="10" y="6842">-                // syntax-sugar to run git log</tspan>

<tspan x="10" y="6858">+                // syntax-sugar - run git log</tspan>

<tspan x="10" y="6874">                 case "git log":</tspan>

<tspan x="10" y="6890">                     match2 = "git log -n 4 | cat";</tspan>

<tspan x="10" y="6906">                     break;</tspan>

<tspan x="10" y="6922">+                // syntax-sugar - run git log</tspan>

<tspan x="10" y="6938">+                case "ll":</tspan>

<tspan x="10" y="6954">+                    match2 = "ls -Fal";</tspan>

<tspan x="10" y="6970">+                    break;</tspan>

<tspan x="10" y="6986">                 }</tspan>

<tspan x="10" y="7002">                 // source lib.utility2.sh</tspan>

<tspan x="10" y="7018">-                if (process.env.npm_config_dir_utility2 &amp;&amp; (match2 !== ":")) {</tspan>

<tspan x="10" y="7034">+                if (</tspan>

<tspan x="10" y="7050">+                    process.platform !== "win32"</tspan>

<tspan x="10" y="7066">+                    &amp;&amp; process.env.npm_config_dir_utility2 &amp;&amp; (match2 !== ":")</tspan>

<tspan x="10" y="7082">+                ) {</tspan>

<tspan x="10" y="7098">                     match2 = (</tspan>

<tspan x="10" y="7114">                         ". " + process.env.npm_config_dir_utility2</tspan>

<tspan x="10" y="7130">                         + "/lib.utility2.sh;" + match2</tspan>

<tspan x="10" y="7146">@@ -648,9 +646,8 @@</tspan>

<tspan x="10" y="7162">                 require("child_process").spawn(match2, {</tspan>

<tspan x="10" y="7178">                     shell: true,</tspan>

<tspan x="10" y="7194">                     stdio: ["ignore", 1, 2]</tspan>

<tspan x="10" y="7210">-                })</tspan>

<tspan x="10" y="7226">                 // on shell exit, print return prompt</tspan>

<tspan x="10" y="7242">-                .on("exit", function (exitCode) {</tspan>

<tspan x="10" y="7258">+                }).on("exit", function (exitCode) {</tspan>

<tspan x="10" y="7274">                     console.error("exit-code " + exitCode);</tspan>

<tspan x="10" y="7290">                     that.evalDefault(</tspan>

<tspan x="10" y="7306">                         "\n",</tspan>

<tspan x="10" y="7322">@@ -661,7 +658,7 @@</tspan>

<tspan x="10" y="7338">                 });</tspan>

<tspan x="10" y="7354">                 script = "\n";</tspan>

<tspan x="10" y="7370">                 break;</tspan>

<tspan x="10" y="7386">-            // syntax-sugar to map text with charCodeAt</tspan>

<tspan x="10" y="7402">+            // syntax-sugar - map text with charCodeAt</tspan>

<tspan x="10" y="7418">             case "charCode":</tspan>

<tspan x="10" y="7434">                 console.error(</tspan>

<tspan x="10" y="7450">                     match2.split("").map(function (chr) {</tspan>

<tspan x="10" y="7466">@@ -673,12 +670,12 @@</tspan>

<tspan x="10" y="7482">                 );</tspan>

<tspan x="10" y="7498">                 script = "\n";</tspan>

<tspan x="10" y="7514">                 break;</tspan>

<tspan x="10" y="7530">-            // syntax-sugar to sort chr</tspan>

<tspan x="10" y="7546">+            // syntax-sugar - sort chr</tspan>

<tspan x="10" y="7562">             case "charSort":</tspan>

<tspan x="10" y="7578">                 console.error(JSON.stringify(match2.split("").sort().join("")));</tspan>

<tspan x="10" y="7594">                 script = "\n";</tspan>

<tspan x="10" y="7610">                 break;</tspan>

<tspan x="10" y="7626">-            // syntax-sugar to grep current dir</tspan>

<tspan x="10" y="7642">+            // syntax-sugar - grep current dir</tspan>

<tspan x="10" y="7658">             case "grep":</tspan>

<tspan x="10" y="7674">                 // run async shell-command</tspan>

<tspan x="10" y="7690">                 require("child_process").spawn((</tspan>

<tspan x="10" y="7706">@@ -695,9 +692,9 @@</tspan>

<tspan x="10" y="7722"> git_module|\</tspan>

<tspan x="10" y="7738"> jquery|\</tspan>

<tspan x="10" y="7754"> log|\</tspan>

<tspan x="10" y="7770">-min|mock|\</tspan>

<tspan x="10" y="7786">+min|misc|mock|\</tspan>

<tspan x="10" y="7802"> node_module|\</tspan>

<tspan x="10" y="7818">-rollup|\</tspan>

<tspan x="10" y="7834">+raw|\rollup|\</tspan>

<tspan x="10" y="7850"> swp|\</tspan>

<tspan x="10" y="7866"> tmp|\</tspan>

<tspan x="10" y="7882"> vendor)s{0,1}(\\b|_)\</tspan>

<tspan x="10" y="7898">@@ -721,7 +718,7 @@</tspan>

<tspan x="10" y="7914">                 });</tspan>

<tspan x="10" y="7930">                 script = "\n";</tspan>

<tspan x="10" y="7946">                 break;</tspan>

<tspan x="10" y="7962">-            // syntax-sugar to list object's keys, sorted by item-type</tspan>

<tspan x="10" y="7978">+            // syntax-sugar - list object's keys, sorted by item-type</tspan>

<tspan x="10" y="7994">             // console.error(Object.keys(global).map(function(key){return(typeof global[key]===\</tspan>
<tspan x="10" y="8010">'object'&amp;&amp;global[key]&amp;&amp;global[key]===global[key]?'global':typeof global[key])+' '+key;}).sort().\</tspan>
<tspan x="10" y="8026">join('\n')) // jslint ignore:line</tspan>

<tspan x="10" y="8042">             case "keys":</tspan>

<tspan x="10" y="8058">                 script = (</tspan>

<tspan x="10" y="8074">@@ -736,18 +733,18 @@</tspan>

<tspan x="10" y="8090">                     + "}).sort().join('\\n'))\n"</tspan>

<tspan x="10" y="8106">                 );</tspan>

<tspan x="10" y="8122">                 break;</tspan>

<tspan x="10" y="8138">-            // syntax-sugar to print stringified arg</tspan>

<tspan x="10" y="8154">+            // syntax-sugar - print stringified arg</tspan>

<tspan x="10" y="8170">             case "print":</tspan>

<tspan x="10" y="8186">                 script = "console.error(String(" + match2 + "))\n";</tspan>

<tspan x="10" y="8202">                 break;</tspan>

<tspan x="10" y="8218">-            // syntax-sugar to read file</tspan>

<tspan x="10" y="8234">+            // syntax-sugar - read file</tspan>

<tspan x="10" y="8250">             case "readFile":</tspan>

<tspan x="10" y="8266">                 try {</tspan>

<tspan x="10" y="8282">                     console.error(JSON.stringify(</tspan>

<tspan x="10" y="8298">                         require("fs").readFileSync(match2, "utf8")</tspan>

<tspan x="10" y="8314">                     ));</tspan>

<tspan x="10" y="8330">-                } catch (errorCaught) {</tspan>

<tspan x="10" y="8346">-                    console.error(errorCaught);</tspan>

<tspan x="10" y="8362">+                } catch (errCaught) {</tspan>

<tspan x="10" y="8378">+                    console.error(errCaught);</tspan>

<tspan x="10" y="8394">                 }</tspan>

<tspan x="10" y="8410">                 script = "\n";</tspan>

<tspan x="10" y="8426">                 break;</tspan>

<tspan x="10" y="8442">@@ -773,8 +770,8 @@</tspan>

<tspan x="10" y="8458">             that.socket.write(chunk, encoding);</tspan>

<tspan x="10" y="8474">         }()));</tspan>

<tspan x="10" y="8490">     };</tspan>

<tspan x="10" y="8506">-    // start tcp-server</tspan>

<tspan x="10" y="8522">-    globalThis.utility2_serverReplTcp1 = require("net").createServer(function (</tspan>

<tspan x="10" y="8538">+    // start serverRepl1</tspan>

<tspan x="10" y="8554">+    globalThis.utility2_serverRepl1 = require("net").createServer(function (</tspan>

<tspan x="10" y="8570">         socket</tspan>

<tspan x="10" y="8586">     ) {</tspan>

<tspan x="10" y="8602">         // init socket</tspan>

<tspan x="10" y="8618">@@ -786,19 +783,20 @@</tspan>

<tspan x="10" y="8634">     // coverage-hack - ignore else-statement</tspan>

<tspan x="10" y="8650">     local.nop(process.env.PORT_REPL &amp;&amp; (function () {</tspan>

<tspan x="10" y="8666">         console.error(</tspan>

<tspan x="10" y="8682">-            "repl-server listening on tcp-port " + process.env.PORT_REPL</tspan>

<tspan x="10" y="8698">+            "repl-server listening on port " + process.env.PORT_REPL</tspan>

<tspan x="10" y="8714">         );</tspan>

<tspan x="10" y="8730">-        globalThis.utility2_serverReplTcp1.listen(process.env.PORT_REPL);</tspan>

<tspan x="10" y="8746">+        globalThis.utility2_serverRepl1.listen(process.env.PORT_REPL);</tspan>

<tspan x="10" y="8762">     }()));</tspan>

<tspan x="10" y="8778"> };</tspan>

<tspan x="10" y="8794"> </tspan>

<tspan x="10" y="8810">-local.setTimeoutOnError = function (onError, timeout, error, data) {</tspan>

<tspan x="10" y="8826">+local.setTimeoutOnError = function (onError, timeout, err, data) {</tspan>

<tspan x="10" y="8842"> /*</tspan>

<tspan x="10" y="8858">- * this function will after timeout has passed, then call onError(error, data)</tspan>

<tspan x="10" y="8874">+ * this function will after timeout has passed,</tspan>

<tspan x="10" y="8890">+ * then call &lt;onError&gt;(&lt;err&gt;, &lt;data&gt;)</tspan>

<tspan x="10" y="8906">  */</tspan>

<tspan x="10" y="8922">     if (typeof onError === "function") {</tspan>

<tspan x="10" y="8938">         setTimeout(function () {</tspan>

<tspan x="10" y="8954">-            onError(error, data);</tspan>

<tspan x="10" y="8970">+            onError(err, data);</tspan>

<tspan x="10" y="8986">         }, timeout);</tspan>

<tspan x="10" y="9002">     }</tspan>

<tspan x="10" y="9018">     return data;</tspan>

<tspan x="10" y="9034">@@ -1419,7 +1417,9 @@</tspan>

<tspan x="10" y="9050">     // optimization - while-loop</tspan>

<tspan x="10" y="9066">     ii = 0;</tspan>

<tspan x="10" y="9082">     while (ii &lt; this.dbRowList.length) {</tspan>

<tspan x="10" y="9098">-        result = local.dbRowListGetManyByQuery([this.dbRowList[ii]], query)[0];</tspan>

<tspan x="10" y="9114">+        result = local.dbRowListGetManyByQuery([</tspan>

<tspan x="10" y="9130">+            this.dbRowList[ii]</tspan>

<tspan x="10" y="9146">+        ], query)[0];</tspan>

<tspan x="10" y="9162">         if (result) {</tspan>

<tspan x="10" y="9178">             break;</tspan>

<tspan x="10" y="9194">         }</tspan>

<tspan x="10" y="9210">@@ -1786,7 +1786,7 @@</tspan>

<tspan x="10" y="9226">     });</tspan>

<tspan x="10" y="9242">     local.storageKeys(function (error, data) {</tspan>

<tspan x="10" y="9258">         onParallel.counter += 1;</tspan>

<tspan x="10" y="9274">-        // validate no error occurred</tspan>

<tspan x="10" y="9290">+        // validate no err occurred</tspan>

<tspan x="10" y="9306">         onParallel.counter += 1;</tspan>

<tspan x="10" y="9322">         onParallel(error);</tspan>

<tspan x="10" y="9338">         (data || []).forEach(function (key) {</tspan>

<tspan x="10" y="9354">@@ -2092,8 +2092,8 @@</tspan>

<tspan x="10" y="9370">     // seed db</tspan>

<tspan x="10" y="9386">     onParallel.counter += 1;</tspan>

<tspan x="10" y="9402">     local.dbTableCreateMany(dbSeedList, onParallel);</tspan>

<tspan x="10" y="9418">-    (dbSeedList || []).forEach(function (option) {</tspan>

<tspan x="10" y="9434">-        dbTableDict[option.name] = true;</tspan>

<tspan x="10" y="9450">+    (dbSeedList || []).forEach(function (opt) {</tspan>

<tspan x="10" y="9466">+        dbTableDict[opt.name] = true;</tspan>

<tspan x="10" y="9482">     });</tspan>

<tspan x="10" y="9498">     Object.keys(dbTableDict).forEach(function (name) {</tspan>

<tspan x="10" y="9514">         console.error("db - seeding dbTable " + name + " ...");</tspan>

<tspan x="10" y="9530">@@ -2112,26 +2112,26 @@</tspan>

<tspan x="10" y="9546">         local.setTimeoutOnError(onError, 0, error, result);</tspan>

<tspan x="10" y="9562">     });</tspan>

<tspan x="10" y="9578">     onParallel.counter += 1;</tspan>

<tspan x="10" y="9594">-    result = (optionList || []).map(function (option) {</tspan>

<tspan x="10" y="9610">+    result = (optionList || []).map(function (opt) {</tspan>

<tspan x="10" y="9626">         onParallel.counter += 1;</tspan>

<tspan x="10" y="9642">-        return local.dbTableCreateOne(option, onParallel);</tspan>

<tspan x="10" y="9658">+        return local.dbTableCreateOne(opt, onParallel);</tspan>

<tspan x="10" y="9674">     });</tspan>

<tspan x="10" y="9690">     return local.setTimeoutOnError(onParallel, 0, null, result);</tspan>

<tspan x="10" y="9706"> };</tspan>

<tspan x="10" y="9722"> </tspan>

<tspan x="10" y="9738">-local.dbTableCreateOne = function (option, onError) {</tspan>

<tspan x="10" y="9754">+local.dbTableCreateOne = function (opt, onError) {</tspan>

<tspan x="10" y="9770"> /*</tspan>

<tspan x="10" y="9786">- * this function will create a dbTable with given option</tspan>

<tspan x="10" y="9802">+ * this function will create a dbTable with given &lt;opt&gt;</tspan>

<tspan x="10" y="9818">  */</tspan>

<tspan x="10" y="9834">     var DbTable;</tspan>

<tspan x="10" y="9850">     var that;</tspan>

<tspan x="10" y="9866">-    option = local.objectSetOverride(option);</tspan>

<tspan x="10" y="9882">+    opt = local.objectSetOverride(opt);</tspan>

<tspan x="10" y="9898">     // register dbTable</tspan>

<tspan x="10" y="9914">     DbTable = local._DbTable;</tspan>

<tspan x="10" y="9930">-    local.dbTableDict[option.name] = local.dbTableDict[option.name] || new DbTable(option);</tspan>

<tspan x="10" y="9946">-    that = local.dbTableDict[option.name];</tspan>

<tspan x="10" y="9962">+    local.dbTableDict[opt.name] = local.dbTableDict[opt.name] || new DbTable(opt);</tspan>

<tspan x="10" y="9978">+    that = local.dbTableDict[opt.name];</tspan>

<tspan x="10" y="9994">     that.sortDefault = (</tspan>

<tspan x="10" y="10010">-        option.sortDefault</tspan>

<tspan x="10" y="10026">+        opt.sortDefault</tspan>

<tspan x="10" y="10042">         || that.sortDefault</tspan>

<tspan x="10" y="10058">         || [{</tspan>

<tspan x="10" y="10074">             fieldName: "_timeUpdated",</tspan>

<tspan x="10" y="10090">@@ -2139,20 +2139,20 @@</tspan>

<tspan x="10" y="10106">         }]</tspan>

<tspan x="10" y="10122">     );</tspan>

<tspan x="10" y="10138">     // remove idIndex</tspan>

<tspan x="10" y="10154">-    (option.idIndexRemoveList || []).forEach(function (idIndex) {</tspan>

<tspan x="10" y="10170">+    (opt.idIndexRemoveList || []).forEach(function (idIndex) {</tspan>

<tspan x="10" y="10186">         that.idIndexRemove(idIndex);</tspan>

<tspan x="10" y="10202">     });</tspan>

<tspan x="10" y="10218">     // create idIndex</tspan>

<tspan x="10" y="10234">-    (option.idIndexCreateList || []).forEach(function (idIndex) {</tspan>

<tspan x="10" y="10250">+    (opt.idIndexCreateList || []).forEach(function (idIndex) {</tspan>

<tspan x="10" y="10266">         that.idIndexCreate(idIndex);</tspan>

<tspan x="10" y="10282">     });</tspan>

<tspan x="10" y="10298">     // upsert dbRow</tspan>

<tspan x="10" y="10314">-    that.crudSetManyById(option.dbRowList);</tspan>

<tspan x="10" y="10330">+    that.crudSetManyById(opt.dbRowList);</tspan>

<tspan x="10" y="10346">     // restore dbTable from persistent-storage</tspan>

<tspan x="10" y="10362">-    that.isLoaded = that.isLoaded || option.isLoaded;</tspan>

<tspan x="10" y="10378">+    that.isLoaded = that.isLoaded || opt.isLoaded;</tspan>

<tspan x="10" y="10394">     if (!that.isLoaded) {</tspan>

<tspan x="10" y="10410">         local.storageGetItem("dbTable." + that.name + ".json", function (error, data) {</tspan>

<tspan x="10" y="10426">-            // validate no error occurred</tspan>

<tspan x="10" y="10442">+            // validate no err occurred</tspan>

<tspan x="10" y="10458">             local.assertThrow(!error, error);</tspan>

<tspan x="10" y="10474">             if (!that.isLoaded) {</tspan>

<tspan x="10" y="10490">                 local.dbImport(data);</tspan>

<tspan x="10" y="10506">@@ -2167,7 +2167,7 @@</tspan>

<tspan x="10" y="10522"> </tspan>

<tspan x="10" y="10538"> local.dbTableDict = {};</tspan>

<tspan x="10" y="10554"> </tspan>

<tspan x="10" y="10570">-local.onEventDomDb = function (event) {</tspan>

<tspan x="10" y="10586">+local.onEventDomDb = function (evt) {</tspan>

<tspan x="10" y="10602"> /*</tspan>

<tspan x="10" y="10618">  * this function will handle db dom-events</tspan>

<tspan x="10" y="10634">  */</tspan>

<tspan x="10" y="10650">@@ -2177,9 +2177,11 @@</tspan>

<tspan x="10" y="10666">     var utility2;</tspan>

<tspan x="10" y="10682">     utility2 = globalThis.utility2 || {};</tspan>

<tspan x="10" y="10698">     ajaxProgressUpdate = utility2.ajaxProgressUpdate || local.nop;</tspan>

<tspan x="10" y="10714">-    switch (event.target.dataset.onEventDomDb || event.target.id) {</tspan>

<tspan x="10" y="10730">-    case "dbExportButton1":</tspan>

<tspan x="10" y="10746">-        tmp = globalThis.URL.createObjectURL(new globalThis.Blob([local.dbExport()]));</tspan>

<tspan x="10" y="10762">+    switch (evt.target.dataset.oneventDb) {</tspan>

<tspan x="10" y="10778">+    case "dbExport":</tspan>

<tspan x="10" y="10794">+        tmp = URL.createObjectURL(new globalThis.Blob([</tspan>

<tspan x="10" y="10810">+            local.dbExport()</tspan>

<tspan x="10" y="10826">+        ]));</tspan>

<tspan x="10" y="10842">         document.querySelector(</tspan>

<tspan x="10" y="10858">             "#dbExportA1"</tspan>

<tspan x="10" y="10874">         ).href = tmp;</tspan>

<tspan x="10" y="10890">@@ -2187,38 +2189,27 @@</tspan>

<tspan x="10" y="10906">             "#dbExportA1"</tspan>

<tspan x="10" y="10922">         ).click();</tspan>

<tspan x="10" y="10938">         setTimeout(function () {</tspan>

<tspan x="10" y="10954">-            globalThis.URL.revokeObjectURL(tmp);</tspan>

<tspan x="10" y="10970">+            URL.revokeObjectURL(tmp);</tspan>

<tspan x="10" y="10986">         }, 30000);</tspan>

<tspan x="10" y="11002">         break;</tspan>

<tspan x="10" y="11018">-    case "dbImportButton1":</tspan>

<tspan x="10" y="11034">-        tmp = document.querySelector(</tspan>

<tspan x="10" y="11050">-            "#dbImportInput1"</tspan>

<tspan x="10" y="11066">-        );</tspan>

<tspan x="10" y="11082">-        if (!tmp.onEventDomDb) {</tspan>

<tspan x="10" y="11098">-            tmp.onEventDomDb = local.onEventDomDb;</tspan>

<tspan x="10" y="11114">-            tmp.addEventListener("change", local.onEventDomDb);</tspan>

<tspan x="10" y="11130">-        }</tspan>

<tspan x="10" y="11146">-        tmp.click();</tspan>

<tspan x="10" y="11162">+    case "dbImport":</tspan>

<tspan x="10" y="11178">+        document.querySelector(</tspan>

<tspan x="10" y="11194">+            "[data-onevent-db='dbImportInput']"</tspan>

<tspan x="10" y="11210">+        ).click();</tspan>

<tspan x="10" y="11226">         break;</tspan>

<tspan x="10" y="11242">-    case "dbImportInput1":</tspan>

<tspan x="10" y="11258">-        if (event.type !== "change") {</tspan>

<tspan x="10" y="11274">+    case "dbImportInput":</tspan>

<tspan x="10" y="11290">+        if (evt.type !== "change") {</tspan>

<tspan x="10" y="11306">             return;</tspan>

<tspan x="10" y="11322">         }</tspan>

<tspan x="10" y="11338">         ajaxProgressUpdate();</tspan>

<tspan x="10" y="11354">         reader = new FileReader();</tspan>

<tspan x="10" y="11370">-        tmp = document.querySelector(</tspan>

<tspan x="10" y="11386">-            "#dbImportInput1"</tspan>

<tspan x="10" y="11402">-        ).files[0];</tspan>

<tspan x="10" y="11418">-        if (!tmp) {</tspan>

<tspan x="10" y="11434">-            return;</tspan>

<tspan x="10" y="11450">-        }</tspan>

<tspan x="10" y="11466">         reader.addEventListener("load", function () {</tspan>

<tspan x="10" y="11482">             local.dbImport(reader.result);</tspan>

<tspan x="10" y="11498">             ajaxProgressUpdate();</tspan>

<tspan x="10" y="11514">         });</tspan>

<tspan x="10" y="11530">-        reader.readAsText(tmp);</tspan>

<tspan x="10" y="11546">+        reader.readAsText(evt.target.files[0]);</tspan>

<tspan x="10" y="11562">         break;</tspan>

<tspan x="10" y="11578">-    case "dbResetButton1":</tspan>

<tspan x="10" y="11594">+    case "dbReset":</tspan>

<tspan x="10" y="11610">         ajaxProgressUpdate();</tspan>

<tspan x="10" y="11626">         local.dbReset(globalThis.utility2_dbSeedList, function (error) {</tspan>

<tspan x="10" y="11642">             local.onErrorDefault(error);</tspan>

<tspan x="10" y="11658">jslint-autofix - modified and saved file /tmp/npmTestPublished/node_modules/db-lite/lib.db.js</tspan>

<tspan x="10" y="11674">jslint /tmp/npmTestPublished/node_modules/db-lite/lib.db.js</tspan>

<tspan x="10" y="11690">  1 Unexpected ': key'. // line 989, column 12</tspan>

<tspan x="10" y="11706">    key: key</tspan>

<tspan x="10" y="11722">{</tspan>

<tspan x="10" y="11738">    "name": "JSLintError",</tspan>

<tspan x="10" y="11754">    "column": 12,</tspan>

<tspan x="10" y="11770">    "line": 989,</tspan>

<tspan x="10" y="11786">    "code": "unexpected_a",</tspan>

<tspan x="10" y="11802">    "a": ": key",</tspan>

<tspan x="10" y="11818">    "d": {</tspan>

<tspan x="10" y="11834">        "from": 11,</tspan>

<tspan x="10" y="11850">        "id": ":",</tspan>

<tspan x="10" y="11866">        "identifier": false,</tspan>

<tspan x="10" y="11882">        "line": 988,</tspan>

<tspan x="10" y="11898">        "nr": 4272,</tspan>

<tspan x="10" y="11914">        "thru": 12</tspan>

<tspan x="10" y="11930">    },</tspan>

<tspan x="10" y="11946">    "message": "Unexpected ': key'.",</tspan>

<tspan x="10" y="11962">    "source": "        key: key",</tspan>

<tspan x="10" y="11978">    "ignore": null,</tspan>

<tspan x="10" y="11994">    "c": {},</tspan>

<tspan x="10" y="12010">    "option": {</tspan>

<tspan x="10" y="12026">        "modeNext": 12,</tspan>

<tspan x="10" y="12042">        "autofix": true,</tspan>

<tspan x="10" y="12058">        "conditional": true,</tspan>

<tspan x="10" y="12074">        "file": "/tmp/npmTestPublished/node_modules/db-lite/lib.db.js",</tspan>

<tspan x="10" y="12090">        "errorText": "",</tspan>

<tspan x="10" y="12106">        "fileType": ".js",</tspan>

<tspan x="10" y="12122">        "utility2": true,</tspan>

<tspan x="10" y="12138">        "edition": "2019-01-31",</tspan>

<tspan x="10" y="12154">        "id": "(JSLint)",</tspan>

<tspan x="10" y="12170">        "json": false,</tspan>

<tspan x="10" y="12186">        "module": false,</tspan>

<tspan x="10" y="12202">        "ok": false,</tspan>

<tspan x="10" y="12218">        "shebang": "#!/usr/bin/env node",</tspan>

<tspan x="10" y="12234">        "stop": false,</tspan>

<tspan x="10" y="12250">        "bitwise": true,</tspan>

<tspan x="10" y="12266">        "browser": true,</tspan>

<tspan x="10" y="12282">        "node": true,</tspan>

<tspan x="10" y="12298">        "this": true</tspan>

<tspan x="10" y="12314">    },</tspan>

<tspan x="10" y="12330">    "stack": null,</tspan>

<tspan x="10" y="12346">    "evidence": "        key: key"</tspan>

<tspan x="10" y="12362">}</tspan>

<tspan x="10" y="12378">Error</tspan>

<tspan x="10" y="12394">    at warn_at_extra (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslin\</tspan>
<tspan x="10" y="12410">t.js:7157:42)</tspan>

<tspan x="10" y="12426">    at warn_at (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:2\</tspan>
<tspan x="10" y="12442">463:5)</tspan>

<tspan x="10" y="12458">    at warn (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:2486\</tspan>
<tspan x="10" y="12474">:29)</tspan>

<tspan x="10" y="12490">    at member (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:50\</tspan>
<tspan x="10" y="12506">25:25)</tspan>

<tspan x="10" y="12522">    at member (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:50\</tspan>
<tspan x="10" y="12538">41:24)</tspan>

<tspan x="10" y="12554">    at /tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:5043:10</tspan>

<tspan x="10" y="12570">    at Object.the_symbol.nud (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/l\</tspan>
<tspan x="10" y="12586">ib.jslint.js:4269:20)</tspan>

<tspan x="10" y="12602">    at expression (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.j\</tspan>
<tspan x="10" y="12618">s:3795:27)</tspan>

<tspan x="10" y="12634">    at next (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:4441\</tspan>
<tspan x="10" y="12650">:28)</tspan>

<tspan x="10" y="12666">    at /tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:4450:10</tspan>

<tspan x="10" y="12682">  2 Unexpected ': key'. // line 1067, column 12</tspan>

<tspan x="10" y="12698">    key: key</tspan>

<tspan x="10" y="12714">  3 Unexpected ': key'. // line 1077, column 12</tspan>

<tspan x="10" y="12730">    key: key,</tspan>

<tspan x="10" y="12746">  4 Unexpected ': value'. // line 1078, column 14</tspan>

<tspan x="10" y="12762">    value: value</tspan>

<tspan x="10" y="12778">  5 Unexpected ': name'. // line 1613, column 13</tspan>

<tspan x="10" y="12794">    name: name</tspan>

<tspan x="10" y="12810">jslint - 873ms /tmp/npmTestPublished/node_modules/db-lite/lib.db.js</tspan>

<tspan x="10" y="12826">jslint - 26ms /tmp/npmTestPublished/node_modules/db-lite/npm_scripts.sh</tspan>

<tspan x="10" y="12842">jslint - 0ms /tmp/npmTestPublished/node_modules/db-lite/package.json</tspan>

<tspan x="10" y="12858">testRunDefault - 431 ms - [node test-case 1 of 17 passed] - testCase_buildApidoc_default</tspan>

<tspan x="10" y="12874">testRunDefault - 589 ms - [node test-case 2 of 17 passed] - testCase_buildLib_default</tspan>

<tspan x="10" y="12890">testRunDefault - 776 ms - [node test-case 3 of 17 passed] - testCase_buildReadme_default</tspan>

<tspan x="10" y="12906">--- /tmp/npmTestPublished/node_modules/db-lite/test.js.autofix.old	2019-08-04 07:05:48.636712016\</tspan>
<tspan x="10" y="12922"> +0000</tspan>

<tspan x="10" y="12938">+++ /tmp/npmTestPublished/node_modules/db-lite/test.js	2019-08-04 07:05:48.604695422 +0000</tspan>

<tspan x="10" y="12954">@@ -1,1546 +0,0 @@</tspan>

<tspan x="10" y="12970">-/* istanbul instrument in package db */</tspan>

<tspan x="10" y="12986">-/* istanbul ignore next */</tspan>

<tspan x="10" y="13002">-/* jslint utility2:true */</tspan>

<tspan x="10" y="13018">-(function (globalThis) {</tspan>

<tspan x="10" y="13034">-    "use strict";</tspan>

<tspan x="10" y="13050">-    var consoleError;</tspan>

<tspan x="10" y="13066">-    var local;</tspan>

<tspan x="10" y="13082">-    // init globalThis</tspan>

<tspan x="10" y="13098">-    (function () {</tspan>

<tspan x="10" y="13114">-        try {</tspan>

<tspan x="10" y="13130">-            globalThis = Function("return this")(); // jslint ignore:line</tspan>

<tspan x="10" y="13146">-        } catch (ignore) {}</tspan>

<tspan x="10" y="13162">-    }());</tspan>

<tspan x="10" y="13178">-    globalThis.globalThis = globalThis;</tspan>

<tspan x="10" y="13194">-    // init debug_inline</tspan>

<tspan x="10" y="13210">-    if (!globalThis["debugInline"]) {</tspan>

<tspan x="10" y="13226">-        consoleError = console.error;</tspan>

<tspan x="10" y="13242">-        globalThis["debugInline"] = function () {</tspan>

<tspan x="10" y="13258">-        /*</tspan>

<tspan x="10" y="13274">-         * this function will both print &lt;arguments&gt; to stderr</tspan>

<tspan x="10" y="13290">-         * and return &lt;arguments&gt;[0]</tspan>

<tspan x="10" y="13306">-         */</tspan>

<tspan x="10" y="13322">-            var argList;</tspan>

<tspan x="10" y="13338">-            argList = Array.from(arguments); // jslint ignore:line</tspan>

<tspan x="10" y="13354">-            // debug arguments</tspan>

<tspan x="10" y="13370">-            globalThis["debugInlineArguments"] = argList;</tspan>

<tspan x="10" y="13386">-            consoleError("\n\ndebugInline");</tspan>

<tspan x="10" y="13402">-            consoleError.apply(console, argList);</tspan>

<tspan x="10" y="13418">-            consoleError("\n");</tspan>

<tspan x="10" y="13434">-            // return arg0 for inspection</tspan>

<tspan x="10" y="13450">-            return argList[0];</tspan>

<tspan x="10" y="13466">-        };</tspan>

<tspan x="10" y="13482">-    }</tspan>

<tspan x="10" y="13498">-    // init local</tspan>

<tspan x="10" y="13514">-    local = {};</tspan>

<tspan x="10" y="13530">-    local.local = local;</tspan>

<tspan x="10" y="13546">-    globalThis.globalLocal = local;</tspan>

<tspan x="10" y="13562">-    // init isBrowser</tspan>

<tspan x="10" y="13578">-    local.isBrowser = (</tspan>

<tspan x="10" y="13594">-        typeof window === "object"</tspan>

<tspan x="10" y="13610">-        &amp;&amp; window === globalThis</tspan>

<tspan x="10" y="13626">-        &amp;&amp; typeof window.XMLHttpRequest === "function"</tspan>

<tspan x="10" y="13642">-        &amp;&amp; window.document</tspan>

<tspan x="10" y="13658">-        &amp;&amp; typeof window.document.querySelector === "function"</tspan>

<tspan x="10" y="13674">-    );</tspan>

<tspan x="10" y="13690">-    // init function</tspan>

<tspan x="10" y="13706">-    local.assertThrow = function (passed, message) {</tspan>

<tspan x="10" y="13722">-    /*</tspan>

<tspan x="10" y="13738">-     * this function will throw the error &lt;message&gt; if &lt;passed&gt; is falsy</tspan>

<tspan x="10" y="13754">-     */</tspan>

<tspan x="10" y="13770">-        var error;</tspan>

<tspan x="10" y="13786">-        if (passed) {</tspan>

<tspan x="10" y="13802">-            return;</tspan>

<tspan x="10" y="13818">-        }</tspan>

<tspan x="10" y="13834">-        error = (</tspan>

<tspan x="10" y="13850">-            // ternary-condition</tspan>

<tspan x="10" y="13866">-            (</tspan>

<tspan x="10" y="13882">-                message</tspan>

<tspan x="10" y="13898">-                &amp;&amp; typeof message.message === "string"</tspan>

<tspan x="10" y="13914">-                &amp;&amp; typeof message.stack === "string"</tspan>

<tspan x="10" y="13930">-            )</tspan>

<tspan x="10" y="13946">-            // if message is an error-object, then leave it as is</tspan>

<tspan x="10" y="13962">-            ? message</tspan>

<tspan x="10" y="13978">-            : new Error(</tspan>

<tspan x="10" y="13994">-                typeof message === "string"</tspan>

<tspan x="10" y="14010">-                // if message is a string, then leave it as is</tspan>

<tspan x="10" y="14026">-                ? message</tspan>

<tspan x="10" y="14042">-                // else JSON.stringify message</tspan>

<tspan x="10" y="14058">-                : JSON.stringify(message, null, 4)</tspan>

<tspan x="10" y="14074">-            )</tspan>

<tspan x="10" y="14090">-        );</tspan>

<tspan x="10" y="14106">-        throw error;</tspan>

<tspan x="10" y="14122">-    };</tspan>

<tspan x="10" y="14138">-    local.functionOrNop = function (fnc) {</tspan>

<tspan x="10" y="14154">-    /*</tspan>

<tspan x="10" y="14170">-     * this function will if &lt;fnc&gt; exists,</tspan>

<tspan x="10" y="14186">-     * them return &lt;fnc&gt;,</tspan>

<tspan x="10" y="14202">-     * else return &lt;nop&gt;</tspan>

<tspan x="10" y="14218">-     */</tspan>

<tspan x="10" y="14234">-        return fnc || local.nop;</tspan>

<tspan x="10" y="14250">-    };</tspan>

<tspan x="10" y="14266">-    local.identity = function (value) {</tspan>

<tspan x="10" y="14282">-    /*</tspan>

<tspan x="10" y="14298">-     * this function will return &lt;value&gt;</tspan>

<tspan x="10" y="14314">-     */</tspan>

<tspan x="10" y="14330">-        return value;</tspan>

<tspan x="10" y="14346">-    };</tspan>

<tspan x="10" y="14362">-    local.nop = function () {</tspan>

<tspan x="10" y="14378">-    /*</tspan>

<tspan x="10" y="14394">-     * this function will do nothing</tspan>

<tspan x="10" y="14410">-     */</tspan>

<tspan x="10" y="14426">-        return;</tspan>

<tspan x="10" y="14442">-    };</tspan>

<tspan x="10" y="14458">-    local.objectAssignDefault = function (target, source) {</tspan>

<tspan x="10" y="14474">-    /*</tspan>

<tspan x="10" y="14490">-     * this function will if items from &lt;target&gt; are</tspan>

<tspan x="10" y="14506">-     * null, undefined, or empty-string,</tspan>

<tspan x="10" y="14522">-     * then overwrite them with items from &lt;source&gt;</tspan>

<tspan x="10" y="14538">-     */</tspan>

<tspan x="10" y="14554">-        Object.keys(source).forEach(function (key) {</tspan>

<tspan x="10" y="14570">-            if (</tspan>

<tspan x="10" y="14586">-                target[key] === null</tspan>

<tspan x="10" y="14602">-                || target[key] === undefined</tspan>

<tspan x="10" y="14618">-                || target[key] === ""</tspan>

<tspan x="10" y="14634">-            ) {</tspan>

<tspan x="10" y="14650">-                target[key] = target[key] || source[key];</tspan>

<tspan x="10" y="14666">-            }</tspan>

<tspan x="10" y="14682">-        });</tspan>

<tspan x="10" y="14698">-    };</tspan>

<tspan x="10" y="14714">-    // require builtin</tspan>

<tspan x="10" y="14730">-    if (!local.isBrowser) {</tspan>

<tspan x="10" y="14746">-        local.assert = require("assert");</tspan>

<tspan x="10" y="14762">-        local.buffer = require("buffer");</tspan>

<tspan x="10" y="14778">-        local.child_process = require("child_process");</tspan>

<tspan x="10" y="14794">-        local.cluster = require("cluster");</tspan>

<tspan x="10" y="14810">-        local.crypto = require("crypto");</tspan>

<tspan x="10" y="14826">-        local.dgram = require("dgram");</tspan>

<tspan x="10" y="14842">-        local.dns = require("dns");</tspan>

<tspan x="10" y="14858">-        local.domain = require("domain");</tspan>

<tspan x="10" y="14874">-        local.events = require("events");</tspan>

<tspan x="10" y="14890">-        local.fs = require("fs");</tspan>

<tspan x="10" y="14906">-        local.http = require("http");</tspan>

<tspan x="10" y="14922">-        local.https = require("https");</tspan>

<tspan x="10" y="14938">-        local.net = require("net");</tspan>

<tspan x="10" y="14954">-        local.os = require("os");</tspan>

<tspan x="10" y="14970">-        local.path = require("path");</tspan>

<tspan x="10" y="14986">-        local.querystring = require("querystring");</tspan>

<tspan x="10" y="15002">-        local.readline = require("readline");</tspan>

<tspan x="10" y="15018">-        local.repl = require("repl");</tspan>

<tspan x="10" y="15034">-        local.stream = require("stream");</tspan>

<tspan x="10" y="15050">-        local.string_decoder = require("string_decoder");</tspan>

<tspan x="10" y="15066">-        local.timers = require("timers");</tspan>

<tspan x="10" y="15082">-        local.tls = require("tls");</tspan>

<tspan x="10" y="15098">-        local.tty = require("tty");</tspan>

<tspan x="10" y="15114">-        local.url = require("url");</tspan>

<tspan x="10" y="15130">-        local.util = require("util");</tspan>

<tspan x="10" y="15146">-        local.vm = require("vm");</tspan>

<tspan x="10" y="15162">-        local.zlib = require("zlib");</tspan>

<tspan x="10" y="15178">-    }</tspan>

<tspan x="10" y="15194">-}(this));</tspan>

<tspan x="10" y="15210">-</tspan>

<tspan x="10" y="15226">-</tspan>

<tspan x="10" y="15242">-</tspan>

<tspan x="10" y="15258">-(function (local) {</tspan>

<tspan x="10" y="15274">-"use strict";</tspan>

<tspan x="10" y="15290">-</tspan>

<tspan x="10" y="15306">-</tspan>

<tspan x="10" y="15322">-</tspan>

<tspan x="10" y="15338">-// run shared js-env code - init-before</tspan>

<tspan x="10" y="15354">-(function () {</tspan>

<tspan x="10" y="15370">-// init local</tspan>

<tspan x="10" y="15386">-local = (globalThis.utility2 || require("utility2")).requireReadme();</tspan>

<tspan x="10" y="15402">-globalThis.local = local;</tspan>

<tspan x="10" y="15418">-// init test</tspan>

<tspan x="10" y="15434">-local.testRunDefault(local);</tspan>

<tspan x="10" y="15450">-}());</tspan>

<tspan x="10" y="15466">-</tspan>

<tspan x="10" y="15482">-</tspan>

<tspan x="10" y="15498">-</tspan>

<tspan x="10" y="15514">-// run shared js-env code - function</tspan>

<tspan x="10" y="15530">-(function () {</tspan>

<tspan x="10" y="15546">-local.testCase_dbLoad_error = function (options, onError) {</tspan>

<tspan x="10" y="15562">-/*</tspan>

<tspan x="10" y="15578">- * this function will test dbLoad's error handling-behavior</tspan>

<tspan x="10" y="15594">- */</tspan>

<tspan x="10" y="15610">-    local.testMock([</tspan>

<tspan x="10" y="15626">-        [local, {</tspan>

<tspan x="10" y="15642">-            storageKeys: function (fnc) {</tspan>

<tspan x="10" y="15658">-                fnc(local.errorDefault);</tspan>

<tspan x="10" y="15674">-            }</tspan>

<tspan x="10" y="15690">-        }]</tspan>

<tspan x="10" y="15706">-    ], function (onError) {</tspan>

<tspan x="10" y="15722">-        local.dbLoad(function (error) {</tspan>

<tspan x="10" y="15738">-            // validate error occurred</tspan>

<tspan x="10" y="15754">-            local.assertThrow(error, error);</tspan>

<tspan x="10" y="15770">-        });</tspan>

<tspan x="10" y="15786">-        onError(null, options);</tspan>

<tspan x="10" y="15802">-    }, onError);</tspan>

<tspan x="10" y="15818">-};</tspan>

<tspan x="10" y="15834">-</tspan>

<tspan x="10" y="15850">-local.testCase_dbTable_crudGetManyByQuery = function (options, onError) {</tspan>

<tspan x="10" y="15866">-/*</tspan>

<tspan x="10" y="15882">- * this function will test dbTable's crudGetManyByQuery handling-behavior</tspan>

<tspan x="10" y="15898">- */</tspan>

<tspan x="10" y="15914">-    options = {};</tspan>

<tspan x="10" y="15930">-    // test dbTableCreateOne's create handling-behavior</tspan>

<tspan x="10" y="15946">-    options.dbTable = local.dbTableCreateOne({</tspan>

<tspan x="10" y="15962">-        name: "testCase_dbTable_crudGetManyByQuery"</tspan>

<tspan x="10" y="15978">-    });</tspan>

<tspan x="10" y="15994">-    // validate dbRowCount</tspan>

<tspan x="10" y="16010">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="16026">-    // test isDirty handling-behavior</tspan>

<tspan x="10" y="16042">-    options.dbTable.crudRemoveOneById(options.dbTable.crudSetOneById({</tspan>

<tspan x="10" y="16058">-        field1: "dirty"</tspan>

<tspan x="10" y="16074">-    }));</tspan>

<tspan x="10" y="16090">-    // test null-case handling-behavior</tspan>

<tspan x="10" y="16106">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="16122">-        // test shuffle handling-behavior</tspan>

<tspan x="10" y="16138">-        shuffle: true</tspan>

<tspan x="10" y="16154">-    });</tspan>

<tspan x="10" y="16170">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="16186">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="16202">-    options.data = local.identity([</tspan>

<tspan x="10" y="16218">-        [],</tspan>

<tspan x="10" y="16234">-        [[], "", 0, {}, false, null, undefined],</tspan>

<tspan x="10" y="16250">-        -0.5,</tspan>

<tspan x="10" y="16266">-        -1,</tspan>

<tspan x="10" y="16282">-        -Infinity,</tspan>

<tspan x="10" y="16298">-        0,</tspan>

<tspan x="10" y="16314">-        0.5,</tspan>

<tspan x="10" y="16330">-        1,</tspan>

<tspan x="10" y="16346">-        Infinity,</tspan>

<tspan x="10" y="16362">-        NaN,</tspan>

<tspan x="10" y="16378">-        {},</tspan>

<tspan x="10" y="16394">-        false,</tspan>

<tspan x="10" y="16410">-        null,</tspan>

<tspan x="10" y="16426">-        true,</tspan>

<tspan x="10" y="16442">-        undefined</tspan>

<tspan x="10" y="16458">-    ]).sort().map(function (element) {</tspan>

<tspan x="10" y="16474">-        return {</tspan>

<tspan x="10" y="16490">-            field1: element</tspan>

<tspan x="10" y="16506">-        };</tspan>

<tspan x="10" y="16522">-    });</tspan>

<tspan x="10" y="16538">-    options.data = options.data.concat(options.data.map(function (dbRow) {</tspan>

<tspan x="10" y="16554">-        return {</tspan>

<tspan x="10" y="16570">-            field1: JSON.stringify(dbRow.field1)</tspan>

<tspan x="10" y="16586">-        };</tspan>

<tspan x="10" y="16602">-    }));</tspan>

<tspan x="10" y="16618">-    // test dbTableCreateOne's crudSetManyById handling-behavior</tspan>

<tspan x="10" y="16634">-    options.data = options.dbTable.crudSetManyById(options.data);</tspan>

<tspan x="10" y="16650">-    // validate dbRowCount</tspan>

<tspan x="10" y="16666">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 30);</tspan>

<tspan x="10" y="16682">-    // validate data</tspan>

<tspan x="10" y="16698">-    [</tspan>

<tspan x="10" y="16714">-        [],</tspan>

<tspan x="10" y="16730">-        [[], "", 0, {}, false, null, undefined],</tspan>

<tspan x="10" y="16746">-        -0.5,</tspan>

<tspan x="10" y="16762">-        -1,</tspan>

<tspan x="10" y="16778">-        undefined,</tspan>

<tspan x="10" y="16794">-        0,</tspan>

<tspan x="10" y="16810">-        0.5,</tspan>

<tspan x="10" y="16826">-        1,</tspan>

<tspan x="10" y="16842">-        undefined,</tspan>

<tspan x="10" y="16858">-        undefined,</tspan>

<tspan x="10" y="16874">-        {},</tspan>

<tspan x="10" y="16890">-        false,</tspan>

<tspan x="10" y="16906">-        undefined,</tspan>

<tspan x="10" y="16922">-        true,</tspan>

<tspan x="10" y="16938">-        undefined,</tspan>

<tspan x="10" y="16954">-        "[]",</tspan>

<tspan x="10" y="16970">-        "[[],\"\",0,{},false,null,null]",</tspan>

<tspan x="10" y="16986">-        "-0.5",</tspan>

<tspan x="10" y="17002">-        "-1",</tspan>

<tspan x="10" y="17018">-        "null",</tspan>

<tspan x="10" y="17034">-        "0",</tspan>

<tspan x="10" y="17050">-        "0.5",</tspan>

<tspan x="10" y="17066">-        "1",</tspan>

<tspan x="10" y="17082">-        "null",</tspan>

<tspan x="10" y="17098">-        "null",</tspan>

<tspan x="10" y="17114">-        "{}",</tspan>

<tspan x="10" y="17130">-        "false",</tspan>

<tspan x="10" y="17146">-        "null",</tspan>

<tspan x="10" y="17162">-        "true",</tspan>

<tspan x="10" y="17178">-        undefined</tspan>

<tspan x="10" y="17194">-    ].forEach(function (element, ii) {</tspan>

<tspan x="10" y="17210">-        local.assertJsonEqual(element, options.data[ii].field1);</tspan>

<tspan x="10" y="17226">-    });</tspan>

<tspan x="10" y="17242">-    // test null-case handling-behavior</tspan>

<tspan x="10" y="17258">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="17274">-        query: {</tspan>

<tspan x="10" y="17290">-            field1: { $undefined: null}</tspan>

<tspan x="10" y="17306">-        },</tspan>

<tspan x="10" y="17322">-        sort: [{</tspan>

<tspan x="10" y="17338">-            fieldName: "field1"</tspan>

<tspan x="10" y="17354">-        }]</tspan>

<tspan x="10" y="17370">-    });</tspan>

<tspan x="10" y="17386">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="17402">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="17418">-    // test null-case handling-behavior</tspan>

<tspan x="10" y="17434">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="17450">-        query: {</tspan>

<tspan x="10" y="17466">-            field1: {</tspan>

<tspan x="10" y="17482">-                $undefined: {}</tspan>

<tspan x="10" y="17498">-            }</tspan>

<tspan x="10" y="17514">-        },</tspan>

<tspan x="10" y="17530">-        sort: [{</tspan>

<tspan x="10" y="17546">-            fieldName: "field1"</tspan>

<tspan x="10" y="17562">-        }]</tspan>

<tspan x="10" y="17578">-    });</tspan>

<tspan x="10" y="17594">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="17610">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="17626">-    // test $eq's boolean handling-behavior</tspan>

<tspan x="10" y="17642">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="17658">-        query: {</tspan>

<tspan x="10" y="17674">-            field1: true</tspan>

<tspan x="10" y="17690">-        },</tspan>

<tspan x="10" y="17706">-        sort: [{</tspan>

<tspan x="10" y="17722">-            fieldName: "field1"</tspan>

<tspan x="10" y="17738">-        }]</tspan>

<tspan x="10" y="17754">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="17770">-        return dbRow.field1;</tspan>

<tspan x="10" y="17786">-    });</tspan>

<tspan x="10" y="17802">-    local.assertJsonEqual(options.data.length, 1);</tspan>

<tspan x="10" y="17818">-    local.assertJsonEqual(options.data, [true]);</tspan>

<tspan x="10" y="17834">-    // test $eq's null-case handling-behavior</tspan>

<tspan x="10" y="17850">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="17866">-        query: {</tspan>

<tspan x="10" y="17882">-            field1: null</tspan>

<tspan x="10" y="17898">-        },</tspan>

<tspan x="10" y="17914">-        sort: [{</tspan>

<tspan x="10" y="17930">-            fieldName: "field1"</tspan>

<tspan x="10" y="17946">-        }]</tspan>

<tspan x="10" y="17962">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="17978">-        return dbRow.field1;</tspan>

<tspan x="10" y="17994">-    });</tspan>

<tspan x="10" y="18010">-    local.assertJsonEqual(options.data.length, 7);</tspan>

<tspan x="10" y="18026">-    local.assertJsonEqual(</tspan>

<tspan x="10" y="18042">-        options.data.slice(0, -1),</tspan>

<tspan x="10" y="18058">-        [null, null, null, null, null, null]</tspan>

<tspan x="10" y="18074">-    );</tspan>

<tspan x="10" y="18090">-    // test $eq's number handling-behavior</tspan>

<tspan x="10" y="18106">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="18122">-        query: {</tspan>

<tspan x="10" y="18138">-            field1: 0</tspan>

<tspan x="10" y="18154">-        },</tspan>

<tspan x="10" y="18170">-        sort: [{</tspan>

<tspan x="10" y="18186">-            fieldName: "field1"</tspan>

<tspan x="10" y="18202">-        }]</tspan>

<tspan x="10" y="18218">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="18234">-        return dbRow.field1;</tspan>

<tspan x="10" y="18250">-    });</tspan>

<tspan x="10" y="18266">-    local.assertJsonEqual(options.data.length, 2);</tspan>

<tspan x="10" y="18282">-    local.assertJsonEqual(options.data.slice(0, -1), [0]);</tspan>

<tspan x="10" y="18298">-    // test $eq's string handling-behavior</tspan>

<tspan x="10" y="18314">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="18330">-        query: {</tspan>

<tspan x="10" y="18346">-            field1: "{}"</tspan>

<tspan x="10" y="18362">-        },</tspan>

<tspan x="10" y="18378">-        sort: [{</tspan>

<tspan x="10" y="18394">-            fieldName: "field1"</tspan>

<tspan x="10" y="18410">-        }]</tspan>

<tspan x="10" y="18426">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="18442">-        return dbRow.field1;</tspan>

<tspan x="10" y="18458">-    });</tspan>

<tspan x="10" y="18474">-    local.assertJsonEqual(options.data.length, 1);</tspan>

<tspan x="10" y="18490">-    local.assertJsonEqual(options.data, ["{}"]);</tspan>

<tspan x="10" y="18506">-    // test $exists's false handling-behavior</tspan>

<tspan x="10" y="18522">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="18538">-        query: {</tspan>

<tspan x="10" y="18554">-            field1: { $exists: false}</tspan>

<tspan x="10" y="18570">-        },</tspan>

<tspan x="10" y="18586">-        sort: [{</tspan>

<tspan x="10" y="18602">-            fieldName: "field1"</tspan>

<tspan x="10" y="18618">-        }]</tspan>

<tspan x="10" y="18634">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="18650">-        return dbRow.field1;</tspan>

<tspan x="10" y="18666">-    });</tspan>

<tspan x="10" y="18682">-    local.assertJsonEqual(options.data.length, 7);</tspan>

<tspan x="10" y="18698">-    // test $exists's null-case handling-behavior</tspan>

<tspan x="10" y="18714">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="18730">-        query: {</tspan>

<tspan x="10" y="18746">-            field1: {</tspan>

<tspan x="10" y="18762">-                $exists: null</tspan>

<tspan x="10" y="18778">-            }</tspan>

<tspan x="10" y="18794">-        },</tspan>

<tspan x="10" y="18810">-        sort: [{</tspan>

<tspan x="10" y="18826">-            fieldName: "field1"</tspan>

<tspan x="10" y="18842">-        }]</tspan>

<tspan x="10" y="18858">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="18874">-        return dbRow.field1;</tspan>

<tspan x="10" y="18890">-    });</tspan>

<tspan x="10" y="18906">-    local.assertJsonEqual(options.data.length, 7);</tspan>

<tspan x="10" y="18922">-    // test $exists's true handling-behavior</tspan>

<tspan x="10" y="18938">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="18954">-        query: {</tspan>

<tspan x="10" y="18970">-            field1: {</tspan>

<tspan x="10" y="18986">-                $exists: true</tspan>

<tspan x="10" y="19002">-            }</tspan>

<tspan x="10" y="19018">-        },</tspan>

<tspan x="10" y="19034">-        sort: [{</tspan>

<tspan x="10" y="19050">-            fieldName: "field1"</tspan>

<tspan x="10" y="19066">-        }]</tspan>

<tspan x="10" y="19082">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="19098">-        return dbRow.field1;</tspan>

<tspan x="10" y="19114">-    });</tspan>

<tspan x="10" y="19130">-    local.assertJsonEqual(options.data.length, 23);</tspan>

<tspan x="10" y="19146">-    // test $gt's boolean handling-behavior</tspan>

<tspan x="10" y="19162">-    // test $lt's boolean handling-behavior</tspan>

<tspan x="10" y="19178">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="19194">-        query: {</tspan>

<tspan x="10" y="19210">-            field1: { $gt: false, $lt: true}</tspan>

<tspan x="10" y="19226">-        },</tspan>

<tspan x="10" y="19242">-        sort: [{</tspan>

<tspan x="10" y="19258">-            fieldName: "field1"</tspan>

<tspan x="10" y="19274">-        }]</tspan>

<tspan x="10" y="19290">-    });</tspan>

<tspan x="10" y="19306">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="19322">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="19338">-    // test $gt's null-case handling-behavior</tspan>

<tspan x="10" y="19354">-    // test $lt's null-case handling-behavior</tspan>

<tspan x="10" y="19370">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="19386">-        query: {</tspan>

<tspan x="10" y="19402">-            field1: {</tspan>

<tspan x="10" y="19418">-                $gt: false,</tspan>

<tspan x="10" y="19434">-                $lt: true</tspan>

<tspan x="10" y="19450">-            }</tspan>

<tspan x="10" y="19466">-        },</tspan>

<tspan x="10" y="19482">-        sort: [{</tspan>

<tspan x="10" y="19498">-            fieldName: "field1"</tspan>

<tspan x="10" y="19514">-        }]</tspan>

<tspan x="10" y="19530">-    });</tspan>

<tspan x="10" y="19546">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="19562">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="19578">-    // test $gt's number handling-behavior</tspan>

<tspan x="10" y="19594">-    // test $lt's number handling-behavior</tspan>

<tspan x="10" y="19610">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="19626">-        query: {</tspan>

<tspan x="10" y="19642">-            field1: {</tspan>

<tspan x="10" y="19658">-                $gt: -1,</tspan>

<tspan x="10" y="19674">-                $lt: 1</tspan>

<tspan x="10" y="19690">-            }</tspan>

<tspan x="10" y="19706">-        },</tspan>

<tspan x="10" y="19722">-        sort: [{</tspan>

<tspan x="10" y="19738">-            fieldName: "field1"</tspan>

<tspan x="10" y="19754">-        }]</tspan>

<tspan x="10" y="19770">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="19786">-        return dbRow.field1;</tspan>

<tspan x="10" y="19802">-    });</tspan>

<tspan x="10" y="19818">-    local.assertJsonEqual(options.data.length, 4);</tspan>

<tspan x="10" y="19834">-    local.assertJsonEqual(options.data.slice(0, -1), [-0.5, 0, 0.5]);</tspan>

<tspan x="10" y="19850">-    // test $gt's string handling-behavior</tspan>

<tspan x="10" y="19866">-    // test $lt's string handling-behavior</tspan>

<tspan x="10" y="19882">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="19898">-        query: {</tspan>

<tspan x="10" y="19914">-            field1: {</tspan>

<tspan x="10" y="19930">-                $gt: "false",</tspan>

<tspan x="10" y="19946">-                $lt: "true"</tspan>

<tspan x="10" y="19962">-            }</tspan>

<tspan x="10" y="19978">-        },</tspan>

<tspan x="10" y="19994">-        sort: [{</tspan>

<tspan x="10" y="20010">-            fieldName: "field1"</tspan>

<tspan x="10" y="20026">-        }]</tspan>

<tspan x="10" y="20042">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="20058">-        return dbRow.field1;</tspan>

<tspan x="10" y="20074">-    });</tspan>

<tspan x="10" y="20090">-    local.assertJsonEqual(options.data.length, 4);</tspan>

<tspan x="10" y="20106">-    local.assertJsonEqual(options.data, ["null", "null", "null", "null"]);</tspan>

<tspan x="10" y="20122">-    // test $gte's boolean handling-behavior</tspan>

<tspan x="10" y="20138">-    // test $lte's boolean handling-behavior</tspan>

<tspan x="10" y="20154">-    // test $ne's boolean handling-behavior</tspan>

<tspan x="10" y="20170">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="20186">-        query: {</tspan>

<tspan x="10" y="20202">-            field1: { $gte: false, $lte: true, $ne: false}</tspan>

<tspan x="10" y="20218">-        },</tspan>

<tspan x="10" y="20234">-        sort: [{</tspan>

<tspan x="10" y="20250">-            fieldName: "field1"</tspan>

<tspan x="10" y="20266">-        }]</tspan>

<tspan x="10" y="20282">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="20298">-        return dbRow.field1;</tspan>

<tspan x="10" y="20314">-    });</tspan>

<tspan x="10" y="20330">-    local.assertJsonEqual(options.data.length, 2);</tspan>

<tspan x="10" y="20346">-    local.assertJsonEqual(options.data.slice(0, -1), [true]);</tspan>

<tspan x="10" y="20362">-    // test $gte's null-case handling-behavior</tspan>

<tspan x="10" y="20378">-    // test $lte's null-case handling-behavior</tspan>

<tspan x="10" y="20394">-    // test $ne's null-case handling-behavior</tspan>

<tspan x="10" y="20410">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="20426">-        query: {</tspan>

<tspan x="10" y="20442">-            field1: {</tspan>

<tspan x="10" y="20458">-                $gte: null,</tspan>

<tspan x="10" y="20474">-                $lte: null,</tspan>

<tspan x="10" y="20490">-                $ne: null</tspan>

<tspan x="10" y="20506">-            }</tspan>

<tspan x="10" y="20522">-        },</tspan>

<tspan x="10" y="20538">-        sort: [{</tspan>

<tspan x="10" y="20554">-            fieldName: "field1"</tspan>

<tspan x="10" y="20570">-        }]</tspan>

<tspan x="10" y="20586">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="20602">-        return dbRow.field1;</tspan>

<tspan x="10" y="20618">-    });</tspan>

<tspan x="10" y="20634">-    local.assertJsonEqual(options.data.length, 1);</tspan>

<tspan x="10" y="20650">-    local.assertJsonEqual(options.data.slice(0, -1), []);</tspan>

<tspan x="10" y="20666">-    // test $gte's number handling-behavior</tspan>

<tspan x="10" y="20682">-    // test $lte's number handling-behavior</tspan>

<tspan x="10" y="20698">-    // test $ne's number handling-behavior</tspan>

<tspan x="10" y="20714">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="20730">-        query: {</tspan>

<tspan x="10" y="20746">-            field1: {</tspan>

<tspan x="10" y="20762">-                $gte: -1,</tspan>

<tspan x="10" y="20778">-                $lte: 1,</tspan>

<tspan x="10" y="20794">-                $ne: 0</tspan>

<tspan x="10" y="20810">-            }</tspan>

<tspan x="10" y="20826">-        },</tspan>

<tspan x="10" y="20842">-        sort: [{</tspan>

<tspan x="10" y="20858">-            fieldName: "field1"</tspan>

<tspan x="10" y="20874">-        }]</tspan>

<tspan x="10" y="20890">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="20906">-        return dbRow.field1;</tspan>

<tspan x="10" y="20922">-    });</tspan>

<tspan x="10" y="20938">-    local.assertJsonEqual(options.data.length, 5);</tspan>

<tspan x="10" y="20954">-    local.assertJsonEqual(options.data.slice(0, -1), [-1, -0.5, 0.5, 1]);</tspan>

<tspan x="10" y="20970">-    // test $gte's number handling-behavior</tspan>

<tspan x="10" y="20986">-    // test $lte's number handling-behavior</tspan>

<tspan x="10" y="21002">-    // test $ne's number handling-behavior</tspan>

<tspan x="10" y="21018">-    // test fieldList handling-behavior</tspan>

<tspan x="10" y="21034">-    // test limit handling-behavior</tspan>

<tspan x="10" y="21050">-    // test skip handling-behavior</tspan>

<tspan x="10" y="21066">-    // test sort's isDescending handling-behavior</tspan>

<tspan x="10" y="21082">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="21098">-        fieldList: ["field1"],</tspan>

<tspan x="10" y="21114">-        limit: 2,</tspan>

<tspan x="10" y="21130">-        query: {</tspan>

<tspan x="10" y="21146">-            field1: {</tspan>

<tspan x="10" y="21162">-                $gte: -1,</tspan>

<tspan x="10" y="21178">-                $lte: 1,</tspan>

<tspan x="10" y="21194">-                $ne: 0</tspan>

<tspan x="10" y="21210">-            }</tspan>

<tspan x="10" y="21226">-        },</tspan>

<tspan x="10" y="21242">-        skip: 2,</tspan>

<tspan x="10" y="21258">-        sort: [{</tspan>

<tspan x="10" y="21274">-            fieldName: "field1",</tspan>

<tspan x="10" y="21290">-            isDescending: true</tspan>

<tspan x="10" y="21306">-        }]</tspan>

<tspan x="10" y="21322">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="21338">-        return dbRow.field1;</tspan>

<tspan x="10" y="21354">-    });</tspan>

<tspan x="10" y="21370">-    local.assertJsonEqual(options.data.length, 2);</tspan>

<tspan x="10" y="21386">-    local.assertJsonEqual(options.data.slice(), [0.5, -0.5]);</tspan>

<tspan x="10" y="21402">-    // test $gte's string handling-behavior</tspan>

<tspan x="10" y="21418">-    // test $lte's string handling-behavior</tspan>

<tspan x="10" y="21434">-    // test $ne's string handling-behavior</tspan>

<tspan x="10" y="21450">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="21466">-        query: {</tspan>

<tspan x="10" y="21482">-            field1: {</tspan>

<tspan x="10" y="21498">-                $gte: "false",</tspan>

<tspan x="10" y="21514">-                $lte: "true",</tspan>

<tspan x="10" y="21530">-                $ne: "null"</tspan>

<tspan x="10" y="21546">-            }</tspan>

<tspan x="10" y="21562">-        },</tspan>

<tspan x="10" y="21578">-        sort: [{</tspan>

<tspan x="10" y="21594">-            fieldName: "field1"</tspan>

<tspan x="10" y="21610">-        }]</tspan>

<tspan x="10" y="21626">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="21642">-        return dbRow.field1;</tspan>

<tspan x="10" y="21658">-    });</tspan>

<tspan x="10" y="21674">-    local.assertJsonEqual(options.data.length, 2);</tspan>

<tspan x="10" y="21690">-    local.assertJsonEqual(options.data, ["false", "true"]);</tspan>

<tspan x="10" y="21706">-    // test $in's list handling-behavior</tspan>

<tspan x="10" y="21722">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="21738">-        query: {</tspan>

<tspan x="10" y="21754">-            field1: { $in: [true, 1]}</tspan>

<tspan x="10" y="21770">-        },</tspan>

<tspan x="10" y="21786">-        sort: [{</tspan>

<tspan x="10" y="21802">-            fieldName: "field1"</tspan>

<tspan x="10" y="21818">-        }]</tspan>

<tspan x="10" y="21834">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="21850">-        return dbRow.field1;</tspan>

<tspan x="10" y="21866">-    });</tspan>

<tspan x="10" y="21882">-    local.assertJsonEqual(options.data.length, 2);</tspan>

<tspan x="10" y="21898">-    local.assertJsonEqual(options.data, [true, 1]);</tspan>

<tspan x="10" y="21914">-    // test $in's null-case handling-behavior</tspan>

<tspan x="10" y="21930">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="21946">-        query: {</tspan>

<tspan x="10" y="21962">-            field1: {</tspan>

<tspan x="10" y="21978">-                $in: null</tspan>

<tspan x="10" y="21994">-            }</tspan>

<tspan x="10" y="22010">-        },</tspan>

<tspan x="10" y="22026">-        sort: [{</tspan>

<tspan x="10" y="22042">-            fieldName: "field1"</tspan>

<tspan x="10" y="22058">-        }]</tspan>

<tspan x="10" y="22074">-    });</tspan>

<tspan x="10" y="22090">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="22106">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="22122">-    // test $in's string handling-behavior</tspan>

<tspan x="10" y="22138">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="22154">-        query: {</tspan>

<tspan x="10" y="22170">-            field1: {</tspan>

<tspan x="10" y="22186">-                $in: "0.5"</tspan>

<tspan x="10" y="22202">-            }</tspan>

<tspan x="10" y="22218">-        },</tspan>

<tspan x="10" y="22234">-        sort: [{</tspan>

<tspan x="10" y="22250">-            fieldName: "field1"</tspan>

<tspan x="10" y="22266">-        }]</tspan>

<tspan x="10" y="22282">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="22298">-        return dbRow.field1;</tspan>

<tspan x="10" y="22314">-    });</tspan>

<tspan x="10" y="22330">-    local.assertJsonEqual(options.data.length, 3);</tspan>

<tspan x="10" y="22346">-    local.assertJsonEqual(options.data.slice(0, -1), ["0", "0.5"]);</tspan>

<tspan x="10" y="22362">-    // test $nin's list handling-behavior</tspan>

<tspan x="10" y="22378">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="22394">-        query: {</tspan>

<tspan x="10" y="22410">-            field1: { $nin: [0, null]}</tspan>

<tspan x="10" y="22426">-        },</tspan>

<tspan x="10" y="22442">-        sort: [{</tspan>

<tspan x="10" y="22458">-            fieldName: "field1"</tspan>

<tspan x="10" y="22474">-        }]</tspan>

<tspan x="10" y="22490">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="22506">-        return dbRow.field1;</tspan>

<tspan x="10" y="22522">-    });</tspan>

<tspan x="10" y="22538">-    local.assertJsonEqual(options.data.length, 22);</tspan>

<tspan x="10" y="22554">-    // test $nin's null-case handling-behavior</tspan>

<tspan x="10" y="22570">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="22586">-        query: {</tspan>

<tspan x="10" y="22602">-            field1: {</tspan>

<tspan x="10" y="22618">-                $nin: null</tspan>

<tspan x="10" y="22634">-            }</tspan>

<tspan x="10" y="22650">-        },</tspan>

<tspan x="10" y="22666">-        sort: [{</tspan>

<tspan x="10" y="22682">-            fieldName: "field1"</tspan>

<tspan x="10" y="22698">-        }]</tspan>

<tspan x="10" y="22714">-    });</tspan>

<tspan x="10" y="22730">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="22746">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="22762">-    // test $nin's string handling-behavior</tspan>

<tspan x="10" y="22778">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="22794">-        query: {</tspan>

<tspan x="10" y="22810">-            field1: {</tspan>

<tspan x="10" y="22826">-                $nin: "[[],\"\",0,1,{},false,null,true]"</tspan>

<tspan x="10" y="22842">-            }</tspan>

<tspan x="10" y="22858">-        },</tspan>

<tspan x="10" y="22874">-        sort: [{</tspan>

<tspan x="10" y="22890">-            fieldName: "field1"</tspan>

<tspan x="10" y="22906">-        }]</tspan>

<tspan x="10" y="22922">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="22938">-        return dbRow.field1;</tspan>

<tspan x="10" y="22954">-    });</tspan>

<tspan x="10" y="22970">-    local.assertJsonEqual(options.data.length, 4);</tspan>

<tspan x="10" y="22986">-    local.assertJsonEqual(options.data.slice(0, -1), ["-0.5", "-1", "0.5"]);</tspan>

<tspan x="10" y="23002">-    // test $not's number handling-behavior</tspan>

<tspan x="10" y="23018">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="23034">-        query: {</tspan>

<tspan x="10" y="23050">-            field1: {</tspan>

<tspan x="10" y="23066">-            $not: {</tspan>

<tspan x="10" y="23082">-                    $gte: 0</tspan>

<tspan x="10" y="23098">-                }</tspan>

<tspan x="10" y="23114">-            }</tspan>

<tspan x="10" y="23130">-        },</tspan>

<tspan x="10" y="23146">-        sort: [{</tspan>

<tspan x="10" y="23162">-            fieldName: "field1"</tspan>

<tspan x="10" y="23178">-        }]</tspan>

<tspan x="10" y="23194">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="23210">-        return dbRow.field1;</tspan>

<tspan x="10" y="23226">-    });</tspan>

<tspan x="10" y="23242">-    local.assertJsonEqual(options.data.length, 26);</tspan>

<tspan x="10" y="23258">-    local.assertJsonEqual(options.data.slice(0, 15), [</tspan>

<tspan x="10" y="23274">-        null,</tspan>

<tspan x="10" y="23290">-        null,</tspan>

<tspan x="10" y="23306">-        null,</tspan>

<tspan x="10" y="23322">-        null,</tspan>

<tspan x="10" y="23338">-        null,</tspan>

<tspan x="10" y="23354">-        null,</tspan>

<tspan x="10" y="23370">-        false,</tspan>

<tspan x="10" y="23386">-        true,</tspan>

<tspan x="10" y="23402">-        -1,</tspan>

<tspan x="10" y="23418">-        -0.5,</tspan>

<tspan x="10" y="23434">-        "-0.5",</tspan>

<tspan x="10" y="23450">-        "-1",</tspan>

<tspan x="10" y="23466">-        "0",</tspan>

<tspan x="10" y="23482">-        "0.5",</tspan>

<tspan x="10" y="23498">-        "1"</tspan>

<tspan x="10" y="23514">-    ]);</tspan>

<tspan x="10" y="23530">-    // test $not's string handling-behavior</tspan>

<tspan x="10" y="23546">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="23562">-        query: {</tspan>

<tspan x="10" y="23578">-            field1: {</tspan>

<tspan x="10" y="23594">-                $not: {</tspan>

<tspan x="10" y="23610">-                    $gte: "0"</tspan>

<tspan x="10" y="23626">-                }</tspan>

<tspan x="10" y="23642">-            }</tspan>

<tspan x="10" y="23658">-        },</tspan>

<tspan x="10" y="23674">-        sort: [{</tspan>

<tspan x="10" y="23690">-            fieldName: "field1"</tspan>

<tspan x="10" y="23706">-        }]</tspan>

<tspan x="10" y="23722">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="23738">-        return dbRow.field1;</tspan>

<tspan x="10" y="23754">-    });</tspan>

<tspan x="10" y="23770">-    local.assertJsonEqual(options.data.length, 17);</tspan>

<tspan x="10" y="23786">-    local.assertJsonEqual(options.data.slice(0, -1), [</tspan>

<tspan x="10" y="23802">-        null,</tspan>

<tspan x="10" y="23818">-        null,</tspan>

<tspan x="10" y="23834">-        null,</tspan>

<tspan x="10" y="23850">-        null,</tspan>

<tspan x="10" y="23866">-        null,</tspan>

<tspan x="10" y="23882">-        null,</tspan>

<tspan x="10" y="23898">-        false,</tspan>

<tspan x="10" y="23914">-        true,</tspan>

<tspan x="10" y="23930">-        -1,</tspan>

<tspan x="10" y="23946">-        -0.5,</tspan>

<tspan x="10" y="23962">-        0,</tspan>

<tspan x="10" y="23978">-        0.5,</tspan>

<tspan x="10" y="23994">-        1,</tspan>

<tspan x="10" y="24010">-        "-0.5",</tspan>

<tspan x="10" y="24026">-        "-1",</tspan>

<tspan x="10" y="24042">-        {}</tspan>

<tspan x="10" y="24058">-    ]);</tspan>

<tspan x="10" y="24074">-    // test $or's null-case handling-behavior</tspan>

<tspan x="10" y="24090">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="24106">-        query: { $or: null},</tspan>

<tspan x="10" y="24122">-        sort: [{</tspan>

<tspan x="10" y="24138">-            fieldName: "field1"</tspan>

<tspan x="10" y="24154">-        }]</tspan>

<tspan x="10" y="24170">-    });</tspan>

<tspan x="10" y="24186">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="24202">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="24218">-    // test $or's empty-list handling-behavior</tspan>

<tspan x="10" y="24234">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="24250">-        query: {</tspan>

<tspan x="10" y="24266">-            $or: []</tspan>

<tspan x="10" y="24282">-        },</tspan>

<tspan x="10" y="24298">-        sort: [{</tspan>

<tspan x="10" y="24314">-            fieldName: "field1"</tspan>

<tspan x="10" y="24330">-        }]</tspan>

<tspan x="10" y="24346">-    });</tspan>

<tspan x="10" y="24362">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="24378">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="24394">-    // test $or's list handling-behavior</tspan>

<tspan x="10" y="24410">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="24426">-        query: {</tspan>

<tspan x="10" y="24442">-            $or: [{</tspan>

<tspan x="10" y="24458">-                field1: { $eq: -0.5}</tspan>

<tspan x="10" y="24474">-            }, {</tspan>

<tspan x="10" y="24490">-                field1: {</tspan>

<tspan x="10" y="24506">-                    $eq: 0</tspan>

<tspan x="10" y="24522">-                }</tspan>

<tspan x="10" y="24538">-            }, {</tspan>

<tspan x="10" y="24554">-                field1: {</tspan>

<tspan x="10" y="24570">-                    $eq: 0.5</tspan>

<tspan x="10" y="24586">-                }</tspan>

<tspan x="10" y="24602">-            }]</tspan>

<tspan x="10" y="24618">-        },</tspan>

<tspan x="10" y="24634">-        sort: [{</tspan>

<tspan x="10" y="24650">-            fieldName: "field1"</tspan>

<tspan x="10" y="24666">-        }]</tspan>

<tspan x="10" y="24682">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="24698">-        return dbRow.field1;</tspan>

<tspan x="10" y="24714">-    });</tspan>

<tspan x="10" y="24730">-    local.assertJsonEqual(options.data.length, 4);</tspan>

<tspan x="10" y="24746">-    local.assertJsonEqual(options.data.slice(0, -1), [-0.5, 0, 0.5]);</tspan>

<tspan x="10" y="24762">-    // test $regex's regex handling-behavior</tspan>

<tspan x="10" y="24778">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="24794">-        query: {</tspan>

<tspan x="10" y="24810">-            field1: { $regex: (</tspan>

<tspan x="10" y="24826">-                /1|true/</tspan>

<tspan x="10" y="24842">-            )}</tspan>

<tspan x="10" y="24858">-        },</tspan>

<tspan x="10" y="24874">-        sort: [{</tspan>

<tspan x="10" y="24890">-            fieldName: "field1"</tspan>

<tspan x="10" y="24906">-        }]</tspan>

<tspan x="10" y="24922">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="24938">-        return dbRow.field1;</tspan>

<tspan x="10" y="24954">-    });</tspan>

<tspan x="10" y="24970">-    local.assertJsonEqual(options.data.length, 6);</tspan>

<tspan x="10" y="24986">-    local.assertJsonEqual(options.data, [true, -1, 1, "-1", "1", "true"]);</tspan>

<tspan x="10" y="25002">-    // test $regex's null-case handling-behavior</tspan>

<tspan x="10" y="25018">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="25034">-        query: {</tspan>

<tspan x="10" y="25050">-            field1: {</tspan>

<tspan x="10" y="25066">-                $regex: null</tspan>

<tspan x="10" y="25082">-            }</tspan>

<tspan x="10" y="25098">-        },</tspan>

<tspan x="10" y="25114">-        sort: [{</tspan>

<tspan x="10" y="25130">-            fieldName: "field1"</tspan>

<tspan x="10" y="25146">-        }]</tspan>

<tspan x="10" y="25162">-    });</tspan>

<tspan x="10" y="25178">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="25194">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="25210">-    // test $typeof's boolean handling-behavior</tspan>

<tspan x="10" y="25226">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="25242">-        query: {</tspan>

<tspan x="10" y="25258">-            field1: { $typeof: "boolean"}</tspan>

<tspan x="10" y="25274">-        },</tspan>

<tspan x="10" y="25290">-        sort: [{</tspan>

<tspan x="10" y="25306">-            fieldName: "field1"</tspan>

<tspan x="10" y="25322">-        }]</tspan>

<tspan x="10" y="25338">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="25354">-        return dbRow.field1;</tspan>

<tspan x="10" y="25370">-    });</tspan>

<tspan x="10" y="25386">-    local.assertJsonEqual(options.data.length, 3);</tspan>

<tspan x="10" y="25402">-    // test $typeof's null-case handling-behavior</tspan>

<tspan x="10" y="25418">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="25434">-        query: {</tspan>

<tspan x="10" y="25450">-            field1: {</tspan>

<tspan x="10" y="25466">-                $typeof: null</tspan>

<tspan x="10" y="25482">-            }</tspan>

<tspan x="10" y="25498">-        },</tspan>

<tspan x="10" y="25514">-        sort: [{</tspan>

<tspan x="10" y="25530">-            fieldName: "field1"</tspan>

<tspan x="10" y="25546">-        }]</tspan>

<tspan x="10" y="25562">-    });</tspan>

<tspan x="10" y="25578">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="25594">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="25610">-    // test $typeof's number handling-behavior</tspan>

<tspan x="10" y="25626">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="25642">-        query: {</tspan>

<tspan x="10" y="25658">-            field1: {</tspan>

<tspan x="10" y="25674">-                $typeof: "number"</tspan>

<tspan x="10" y="25690">-            }</tspan>

<tspan x="10" y="25706">-        },</tspan>

<tspan x="10" y="25722">-        sort: [{</tspan>

<tspan x="10" y="25738">-            fieldName: "field1"</tspan>

<tspan x="10" y="25754">-        }]</tspan>

<tspan x="10" y="25770">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="25786">-        return dbRow.field1;</tspan>

<tspan x="10" y="25802">-    });</tspan>

<tspan x="10" y="25818">-    local.assertJsonEqual(options.data.length, 6);</tspan>

<tspan x="10" y="25834">-    // test $typeof's object handling-behavior</tspan>

<tspan x="10" y="25850">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="25866">-        query: {</tspan>

<tspan x="10" y="25882">-            field1: {</tspan>

<tspan x="10" y="25898">-                $typeof: "object"</tspan>

<tspan x="10" y="25914">-            }</tspan>

<tspan x="10" y="25930">-        },</tspan>

<tspan x="10" y="25946">-        sort: [{</tspan>

<tspan x="10" y="25962">-            fieldName: "field1"</tspan>

<tspan x="10" y="25978">-        }]</tspan>

<tspan x="10" y="25994">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="26010">-        return dbRow.field1;</tspan>

<tspan x="10" y="26026">-    });</tspan>

<tspan x="10" y="26042">-    local.assertJsonEqual(options.data.length, 8);</tspan>

<tspan x="10" y="26058">-    // test $typeof's string handling-behavior</tspan>

<tspan x="10" y="26074">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="26090">-        query: {</tspan>

<tspan x="10" y="26106">-            field1: {</tspan>

<tspan x="10" y="26122">-                $typeof: "string"</tspan>

<tspan x="10" y="26138">-            }</tspan>

<tspan x="10" y="26154">-        },</tspan>

<tspan x="10" y="26170">-        sort: [{</tspan>

<tspan x="10" y="26186">-            fieldName: "field1"</tspan>

<tspan x="10" y="26202">-        }]</tspan>

<tspan x="10" y="26218">-    }).map(function (dbRow) {</tspan>

<tspan x="10" y="26234">-        return dbRow.field1;</tspan>

<tspan x="10" y="26250">-    });</tspan>

<tspan x="10" y="26266">-    local.assertJsonEqual(options.data.length, 15);</tspan>

<tspan x="10" y="26282">-    // test $typeof's symbol handling-behavior</tspan>

<tspan x="10" y="26298">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="26314">-        query: {</tspan>

<tspan x="10" y="26330">-            field1: {</tspan>

<tspan x="10" y="26346">-                $typeof: "symbol"</tspan>

<tspan x="10" y="26362">-            }</tspan>

<tspan x="10" y="26378">-        },</tspan>

<tspan x="10" y="26394">-        sort: [{</tspan>

<tspan x="10" y="26410">-            fieldName: "field1"</tspan>

<tspan x="10" y="26426">-        }]</tspan>

<tspan x="10" y="26442">-    });</tspan>

<tspan x="10" y="26458">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="26474">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="26490">-    // test $typeof's undefined handling-behavior</tspan>

<tspan x="10" y="26506">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="26522">-        query: {</tspan>

<tspan x="10" y="26538">-            field1: {</tspan>

<tspan x="10" y="26554">-                $typeof: "undefined"</tspan>

<tspan x="10" y="26570">-            }</tspan>

<tspan x="10" y="26586">-        },</tspan>

<tspan x="10" y="26602">-        sort: [{</tspan>

<tspan x="10" y="26618">-            fieldName: "field1"</tspan>

<tspan x="10" y="26634">-        }]</tspan>

<tspan x="10" y="26650">-    });</tspan>

<tspan x="10" y="26666">-    local.assertJsonEqual(options.data.length, 0);</tspan>

<tspan x="10" y="26682">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="26698">-    onError();</tspan>

<tspan x="10" y="26714">-};</tspan>

<tspan x="10" y="26730">-</tspan>

<tspan x="10" y="26746">-local.testCase_dbTable_crudNullCase = function (options, onError) {</tspan>

<tspan x="10" y="26762">-/*</tspan>

<tspan x="10" y="26778">- * this function will test dbTable's crud null-case handling-behavior</tspan>

<tspan x="10" y="26794">- */</tspan>

<tspan x="10" y="26810">-    options = {};</tspan>

<tspan x="10" y="26826">-    // test dbTableCreateMany's null-case handling-behavior</tspan>

<tspan x="10" y="26842">-    local.dbTableCreateMany();</tspan>

<tspan x="10" y="26858">-    // test dbTableCreateOne's onError handling-behavior</tspan>

<tspan x="10" y="26874">-    options.dbTable = local.dbTableCreateOne({</tspan>

<tspan x="10" y="26890">-        name: "testCase_dbTable_crudNullCase"</tspan>

<tspan x="10" y="26906">-    }, local.onErrorDefault);</tspan>

<tspan x="10" y="26922">-    // test dbTableCreateOne's null-case handling-behavior</tspan>

<tspan x="10" y="26938">-    options.dbTable = local.dbTableCreateOne({</tspan>

<tspan x="10" y="26954">-        name: "testCase_dbTable_crudNullCase"</tspan>

<tspan x="10" y="26970">-    });</tspan>

<tspan x="10" y="26986">-    // test crudRemoveAll's null-case handling-behavior</tspan>

<tspan x="10" y="27002">-    options.dbTable.crudRemoveAll();</tspan>

<tspan x="10" y="27018">-    // test cancel-pending-save handling-behavior</tspan>

<tspan x="10" y="27034">-    options.dbTable.save(local.nop);</tspan>

<tspan x="10" y="27050">-    // test drop's null-case handling-behavior</tspan>

<tspan x="10" y="27066">-    options.dbTable.drop();</tspan>

<tspan x="10" y="27082">-    // test idIndexCreate's null-case handling-behavior</tspan>

<tspan x="10" y="27098">-    options.dbTable.idIndexCreate({</tspan>

<tspan x="10" y="27114">-        name: "_id"</tspan>

<tspan x="10" y="27130">-    });</tspan>

<tspan x="10" y="27146">-    // test idIndexRemove's null-case handling-behavior</tspan>

<tspan x="10" y="27162">-    options.dbTable.idIndexRemove({</tspan>

<tspan x="10" y="27178">-        name: "_id"</tspan>

<tspan x="10" y="27194">-    });</tspan>

<tspan x="10" y="27210">-    // validate dbRowCount</tspan>

<tspan x="10" y="27226">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="27242">-    // test crudCountManyByQuery's null-case handling-behavior</tspan>

<tspan x="10" y="27258">-    options.data = options.dbTable.crudCountManyByQuery();</tspan>

<tspan x="10" y="27274">-    // validate dbRowCount</tspan>

<tspan x="10" y="27290">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="27306">-    // validate data</tspan>

<tspan x="10" y="27322">-    local.assertJsonEqual(options.data, 0);</tspan>

<tspan x="10" y="27338">-    // test crudGetManyById's null-case handling-behavior</tspan>

<tspan x="10" y="27354">-    options.data = options.dbTable.crudGetManyById();</tspan>

<tspan x="10" y="27370">-    // validate dbRowCount</tspan>

<tspan x="10" y="27386">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="27402">-    // validate data</tspan>

<tspan x="10" y="27418">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="27434">-    // test crudGetManyByQuery's null-case handling-behavior</tspan>

<tspan x="10" y="27450">-    options.data = options.dbTable.crudGetManyByQuery();</tspan>

<tspan x="10" y="27466">-    // validate dbRowCount</tspan>

<tspan x="10" y="27482">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="27498">-    // validate data</tspan>

<tspan x="10" y="27514">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="27530">-    // test crudGetOneById's null-case handling-behavior</tspan>

<tspan x="10" y="27546">-    options.data = options.dbTable.crudGetOneById();</tspan>

<tspan x="10" y="27562">-    // validate dbRowCount</tspan>

<tspan x="10" y="27578">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="27594">-    // validate data</tspan>

<tspan x="10" y="27610">-    local.assertJsonEqual(options.data, null);</tspan>

<tspan x="10" y="27626">-    // test crudGetOneByRandom's null-case handling-behavior</tspan>

<tspan x="10" y="27642">-    options.data = options.dbTable.crudGetOneByRandom();</tspan>

<tspan x="10" y="27658">-    // validate dbRowCount</tspan>

<tspan x="10" y="27674">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="27690">-    // validate data</tspan>

<tspan x="10" y="27706">-    local.assertJsonEqual(options.data, null);</tspan>

<tspan x="10" y="27722">-    // test crudGetOneByQuery's null-case handling-behavior</tspan>

<tspan x="10" y="27738">-    options.data = options.dbTable.crudGetOneByQuery();</tspan>

<tspan x="10" y="27754">-    // validate dbRowCount</tspan>

<tspan x="10" y="27770">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="27786">-    // validate data</tspan>

<tspan x="10" y="27802">-    local.assertJsonEqual(options.data, null);</tspan>

<tspan x="10" y="27818">-    // test crudRemoveManyById's null-case handling-behavior</tspan>

<tspan x="10" y="27834">-    options.data = options.dbTable.crudRemoveManyById();</tspan>

<tspan x="10" y="27850">-    // validate dbRowCount</tspan>

<tspan x="10" y="27866">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="27882">-    // validate data</tspan>

<tspan x="10" y="27898">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="27914">-    // test crudRemoveManyByQuery's null-case handling-behavior</tspan>

<tspan x="10" y="27930">-    options.data = options.dbTable.crudRemoveManyByQuery();</tspan>

<tspan x="10" y="27946">-    // validate dbRowCount</tspan>

<tspan x="10" y="27962">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="27978">-    // validate data</tspan>

<tspan x="10" y="27994">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="28010">-    // test crudRemoveOneById's null-case handling-behavior</tspan>

<tspan x="10" y="28026">-    options.data = options.dbTable.crudRemoveOneById();</tspan>

<tspan x="10" y="28042">-    // validate dbRowCount</tspan>

<tspan x="10" y="28058">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="28074">-    // validate data</tspan>

<tspan x="10" y="28090">-    local.assertJsonEqual(options.data, null);</tspan>

<tspan x="10" y="28106">-    // test crudUpdateManyById's null-case handling-behavior</tspan>

<tspan x="10" y="28122">-    options.data = options.dbTable.crudUpdateManyById();</tspan>

<tspan x="10" y="28138">-    // validate dbRowCount</tspan>

<tspan x="10" y="28154">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="28170">-    // validate data</tspan>

<tspan x="10" y="28186">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="28202">-    // test crudUpdateManyByQuery's null-case handling-behavior</tspan>

<tspan x="10" y="28218">-    options.data = options.dbTable.crudUpdateManyByQuery();</tspan>

<tspan x="10" y="28234">-    // validate dbRowCount</tspan>

<tspan x="10" y="28250">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="28266">-    // validate data</tspan>

<tspan x="10" y="28282">-    local.assertJsonEqual(options.data, []);</tspan>

<tspan x="10" y="28298">-    // test crudSetOneById's and crudUpdateOneById's null-case handling-behavior</tspan>

<tspan x="10" y="28314">-    ["crudSetOneById", "crudUpdateOneById"].forEach(function (operation) {</tspan>

<tspan x="10" y="28330">-        options.data = options.dbTable[operation]();</tspan>

<tspan x="10" y="28346">-        // validate dbRowCount</tspan>

<tspan x="10" y="28362">-        local.assertJsonEqual(options.dbTable.crudCountAll(), 1);</tspan>

<tspan x="10" y="28378">-        options._id = options.data._id;</tspan>

<tspan x="10" y="28394">-        // validate timestamp</tspan>

<tspan x="10" y="28410">-        local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);</tspan>

<tspan x="10" y="28426">-        // test crudRemoveOneById's soft-delete handling-behavior</tspan>

<tspan x="10" y="28442">-        options.data = options.dbTable.crudRemoveOneById(options);</tspan>

<tspan x="10" y="28458">-        // validate dbRowCount</tspan>

<tspan x="10" y="28474">-        local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="28490">-        // validate data</tspan>

<tspan x="10" y="28506">-        local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="28522">-    });</tspan>

<tspan x="10" y="28538">-    // test crudGetOneById's null-case handling-behavior</tspan>

<tspan x="10" y="28554">-    options.data = options.dbTable.crudGetOneById(options);</tspan>

<tspan x="10" y="28570">-    // validate dbRowCount</tspan>

<tspan x="10" y="28586">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="28602">-    // validate data</tspan>

<tspan x="10" y="28618">-    local.assertJsonEqual(options.data, null);</tspan>

<tspan x="10" y="28634">-    // test crudRemoveOneById's null-case handling-behavior</tspan>

<tspan x="10" y="28650">-    options.data = options.dbTable.crudRemoveOneById(options);</tspan>

<tspan x="10" y="28666">-    // validate dbRowCount</tspan>

<tspan x="10" y="28682">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="28698">-    // validate data</tspan>

<tspan x="10" y="28714">-    local.assertJsonEqual(options.data, null);</tspan>

<tspan x="10" y="28730">-    onError();</tspan>

<tspan x="10" y="28746">-};</tspan>

<tspan x="10" y="28762">-</tspan>

<tspan x="10" y="28778">-local.testCase_dbTable_crudXxxById = function (options, onError) {</tspan>

<tspan x="10" y="28794">-/*</tspan>

<tspan x="10" y="28810">- * this function will test dbTable's crudXxxById handling-behavior</tspan>

<tspan x="10" y="28826">- */</tspan>

<tspan x="10" y="28842">-    options = {};</tspan>

<tspan x="10" y="28858">-    // test dbTableCreateMany's create handling-behavior</tspan>

<tspan x="10" y="28874">-    options.dbTable = local.dbTableCreateMany([{</tspan>

<tspan x="10" y="28890">-        idIndexCreateList: [null],</tspan>

<tspan x="10" y="28906">-        idIndexRemoveList: [null],</tspan>

<tspan x="10" y="28922">-        name: "testCase_dbTable_crudXxxById"</tspan>

<tspan x="10" y="28938">-    }])[0];</tspan>

<tspan x="10" y="28954">-    // validate dbRowCount</tspan>

<tspan x="10" y="28970">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="28986">-    // test crudSetManyById's insert handling-behavior</tspan>

<tspan x="10" y="29002">-    options.data = options.dbTable.crudSetManyById([null, null]);</tspan>

<tspan x="10" y="29018">-    // validate dbRowCount</tspan>

<tspan x="10" y="29034">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);</tspan>

<tspan x="10" y="29050">-    // validate data</tspan>

<tspan x="10" y="29066">-    local.assertJsonEqual(options.data.length, 2);</tspan>

<tspan x="10" y="29082">-    // test crudRemoveManyById's soft-delete handling-behavior</tspan>

<tspan x="10" y="29098">-    options.data = options.dbTable.crudRemoveManyById(options.data);</tspan>

<tspan x="10" y="29114">-    // validate dbRowCount</tspan>

<tspan x="10" y="29130">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 0);</tspan>

<tspan x="10" y="29146">-    // validate data</tspan>

<tspan x="10" y="29162">-    local.assertJsonEqual(options.data.length, 2);</tspan>

<tspan x="10" y="29178">-    // test crudSetManyById's insert handling-behavior</tspan>

<tspan x="10" y="29194">-    options.data = options.dbTable.crudSetManyById([null, {</tspan>

<tspan x="10" y="29210">-        field1: 1,</tspan>

<tspan x="10" y="29226">-        field2: 2,</tspan>

<tspan x="10" y="29242">-        field3: 3</tspan>

<tspan x="10" y="29258">-    }])[1];</tspan>

<tspan x="10" y="29274">-    // validate dbRowCount</tspan>

<tspan x="10" y="29290">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);</tspan>

<tspan x="10" y="29306">-    // validate timestamp</tspan>

<tspan x="10" y="29322">-    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);</tspan>

<tspan x="10" y="29338">-    // validate data</tspan>

<tspan x="10" y="29354">-    local.assertJsonNotEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="29370">-    local.assertJsonEqual(options.data.id2, undefined);</tspan>

<tspan x="10" y="29386">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="29402">-    local.assertJsonEqual(options.data.field2, 2);</tspan>

<tspan x="10" y="29418">-    local.assertJsonEqual(options.data.field3, 3);</tspan>

<tspan x="10" y="29434">-    // test idIndexCreate's create handling-behavior</tspan>

<tspan x="10" y="29450">-    // coverage-hack - $isRemoved</tspan>

<tspan x="10" y="29466">-    options.dbTable.crudSetOneById({</tspan>

<tspan x="10" y="29482">-        _id: "undefined"</tspan>

<tspan x="10" y="29498">-    });</tspan>

<tspan x="10" y="29514">-    options.dbTable.crudRemoveOneById({</tspan>

<tspan x="10" y="29530">-        _id: "undefined"</tspan>

<tspan x="10" y="29546">-    });</tspan>

<tspan x="10" y="29562">-    options._id = options.data._id;</tspan>

<tspan x="10" y="29578">-    options.dbTable.idIndexCreate({</tspan>

<tspan x="10" y="29594">-        isInteger: true,</tspan>

<tspan x="10" y="29610">-        name: "id2"</tspan>

<tspan x="10" y="29626">-    });</tspan>

<tspan x="10" y="29642">-    // test crudGetManyById's get handling-behavior</tspan>

<tspan x="10" y="29658">-    options.data = options.dbTable.crudGetManyById([{</tspan>

<tspan x="10" y="29674">-        _id: options._id</tspan>

<tspan x="10" y="29690">-    }])[0];</tspan>

<tspan x="10" y="29706">-    // validate dbRowCount</tspan>

<tspan x="10" y="29722">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);</tspan>

<tspan x="10" y="29738">-    // validate data</tspan>

<tspan x="10" y="29754">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="29770">-    local.assertJsonNotEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="29786">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="29802">-    local.assertJsonEqual(options.data.field2, 2);</tspan>

<tspan x="10" y="29818">-    // test crudUpdateManyById's update handling-behavior</tspan>

<tspan x="10" y="29834">-    options.id2 = options.data.id2;</tspan>

<tspan x="10" y="29850">-    options.data = options.dbTable.crudUpdateManyById([{</tspan>

<tspan x="10" y="29866">-        id2: options.id2,</tspan>

<tspan x="10" y="29882">-        field2: NaN,</tspan>

<tspan x="10" y="29898">-        field3: [new Date(0)]</tspan>

<tspan x="10" y="29914">-    }])[0];</tspan>

<tspan x="10" y="29930">-    // validate dbRowCount</tspan>

<tspan x="10" y="29946">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);</tspan>

<tspan x="10" y="29962">-    // validate timestamp</tspan>

<tspan x="10" y="29978">-    local.assertThrow(options.data._timeCreated &lt;= options.data._timeUpdated, options.data);</tspan>

<tspan x="10" y="29994">-    // validate data</tspan>

<tspan x="10" y="30010">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="30026">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="30042">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="30058">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="30074">-    local.assertJsonEqual(options.data.field3, ["1970-01-01T00:00:00.000Z"]);</tspan>

<tspan x="10" y="30090">-    // test crudSetManyById's replace handling-behavior</tspan>

<tspan x="10" y="30106">-    options.data = options.dbTable.crudSetManyById([{</tspan>

<tspan x="10" y="30122">-        id2: options.id2</tspan>

<tspan x="10" y="30138">-    }])[0];</tspan>

<tspan x="10" y="30154">-    // validate dbRowCount</tspan>

<tspan x="10" y="30170">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);</tspan>

<tspan x="10" y="30186">-    // validate timestamp</tspan>

<tspan x="10" y="30202">-    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);</tspan>

<tspan x="10" y="30218">-    // validate data</tspan>

<tspan x="10" y="30234">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="30250">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="30266">-    local.assertJsonEqual(options.data.field1, undefined);</tspan>

<tspan x="10" y="30282">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="30298">-    local.assertJsonEqual(options.data.field3, undefined);</tspan>

<tspan x="10" y="30314">-    // test crudUpdateManyById's update handling-behavior</tspan>

<tspan x="10" y="30330">-    options.data = options.dbTable.crudUpdateManyById([{</tspan>

<tspan x="10" y="30346">-        id2: options.id2,</tspan>

<tspan x="10" y="30362">-        field1: 1</tspan>

<tspan x="10" y="30378">-    }])[0];</tspan>

<tspan x="10" y="30394">-    // validate dbRowCount</tspan>

<tspan x="10" y="30410">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);</tspan>

<tspan x="10" y="30426">-    // validate timestamp</tspan>

<tspan x="10" y="30442">-    local.assertThrow(options.data._timeCreated &lt;= options.data._timeUpdated, options.data);</tspan>

<tspan x="10" y="30458">-    // validate data</tspan>

<tspan x="10" y="30474">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="30490">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="30506">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="30522">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="30538">-    local.assertJsonEqual(options.data.field3, undefined);</tspan>

<tspan x="10" y="30554">-    // test crudRemoveManyById's soft-delete handling-behavior</tspan>

<tspan x="10" y="30570">-    options.data = options.dbTable.crudRemoveManyById([options])[0];</tspan>

<tspan x="10" y="30586">-    // validate dbRowCount</tspan>

<tspan x="10" y="30602">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 1);</tspan>

<tspan x="10" y="30618">-    // validate data</tspan>

<tspan x="10" y="30634">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="30650">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="30666">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="30682">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="30698">-    local.assertJsonEqual(options.data.field3, undefined);</tspan>

<tspan x="10" y="30714">-    // test crudSetManyById's re-insert handling-behavior</tspan>

<tspan x="10" y="30730">-    options.data = options.dbTable.crudSetManyById([{</tspan>

<tspan x="10" y="30746">-        id2: options.id2</tspan>

<tspan x="10" y="30762">-    }])[0];</tspan>

<tspan x="10" y="30778">-    // validate dbRowCount</tspan>

<tspan x="10" y="30794">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);</tspan>

<tspan x="10" y="30810">-    // validate timestamp</tspan>

<tspan x="10" y="30826">-    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);</tspan>

<tspan x="10" y="30842">-    // validate data</tspan>

<tspan x="10" y="30858">-    local.assertJsonNotEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="30874">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="30890">-    local.assertJsonEqual(options.data.field1, undefined);</tspan>

<tspan x="10" y="30906">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="30922">-    local.assertJsonEqual(options.data.field3, undefined);</tspan>

<tspan x="10" y="30938">-    // test crudRemoveManyById's soft-delete handling-behavior</tspan>

<tspan x="10" y="30954">-    options._id = options.data._id;</tspan>

<tspan x="10" y="30970">-    options.data = options.dbTable.crudRemoveManyById([options])[0];</tspan>

<tspan x="10" y="30986">-    // validate dbRowCount</tspan>

<tspan x="10" y="31002">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 1);</tspan>

<tspan x="10" y="31018">-    // validate data</tspan>

<tspan x="10" y="31034">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="31050">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="31066">-    local.assertJsonEqual(options.data.field1, undefined);</tspan>

<tspan x="10" y="31082">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="31098">-    local.assertJsonEqual(options.data.field3, undefined);</tspan>

<tspan x="10" y="31114">-    onError();</tspan>

<tspan x="10" y="31130">-};</tspan>

<tspan x="10" y="31146">-</tspan>

<tspan x="10" y="31162">-local.testCase_dbTable_crudXxxByQuery = function (options, onError) {</tspan>

<tspan x="10" y="31178">-/*</tspan>

<tspan x="10" y="31194">- * this function will test dbTable's crudXxxByQuery handling-behavior</tspan>

<tspan x="10" y="31210">- */</tspan>

<tspan x="10" y="31226">-    options = {};</tspan>

<tspan x="10" y="31242">-    // test dbTableCreateMany's create handling-behavior</tspan>

<tspan x="10" y="31258">-    options.dbTable = local.dbTableCreateMany([{</tspan>

<tspan x="10" y="31274">-        idIndexCreateList: [null],</tspan>

<tspan x="10" y="31290">-        idIndexRemoveList: [null],</tspan>

<tspan x="10" y="31306">-        name: "testCase_dbTable_crudXxxByQuery"</tspan>

<tspan x="10" y="31322">-    }])[0];</tspan>

<tspan x="10" y="31338">-    // drop dbTable</tspan>

<tspan x="10" y="31354">-    options.dbTable.drop();</tspan>

<tspan x="10" y="31370">-    // validate dbRowCount</tspan>

<tspan x="10" y="31386">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 0);</tspan>

<tspan x="10" y="31402">-    // test crudSetManyById's insert handling-behavior</tspan>

<tspan x="10" y="31418">-    options.data = options.dbTable.crudSetManyById([null, null]);</tspan>

<tspan x="10" y="31434">-    // validate dbRowCount</tspan>

<tspan x="10" y="31450">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);</tspan>

<tspan x="10" y="31466">-    // validate data</tspan>

<tspan x="10" y="31482">-    local.assertJsonEqual(options.data.length, 2);</tspan>

<tspan x="10" y="31498">-    // test crudRemoveManyByQuery's soft-delete handling-behavior</tspan>

<tspan x="10" y="31514">-    options.data = options.dbTable.crudRemoveManyByQuery();</tspan>

<tspan x="10" y="31530">-    // validate dbRowCount</tspan>

<tspan x="10" y="31546">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 0);</tspan>

<tspan x="10" y="31562">-    // validate data</tspan>

<tspan x="10" y="31578">-    local.assertJsonEqual(options.data.length, 2);</tspan>

<tspan x="10" y="31594">-    // test crudSetManyById's insert handling-behavior</tspan>

<tspan x="10" y="31610">-    options.data = options.dbTable.crudSetManyById([null, {</tspan>

<tspan x="10" y="31626">-        field1: 1,</tspan>

<tspan x="10" y="31642">-        field2: 2,</tspan>

<tspan x="10" y="31658">-        field3: 3</tspan>

<tspan x="10" y="31674">-    }])[1];</tspan>

<tspan x="10" y="31690">-    // validate dbRowCount</tspan>

<tspan x="10" y="31706">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);</tspan>

<tspan x="10" y="31722">-    // validate timestamp</tspan>

<tspan x="10" y="31738">-    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);</tspan>

<tspan x="10" y="31754">-    // validate data</tspan>

<tspan x="10" y="31770">-    local.assertJsonNotEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="31786">-    local.assertJsonEqual(options.data.id2, undefined);</tspan>

<tspan x="10" y="31802">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="31818">-    local.assertJsonEqual(options.data.field2, 2);</tspan>

<tspan x="10" y="31834">-    local.assertJsonEqual(options.data.field3, 3);</tspan>

<tspan x="10" y="31850">-    // test idIndexCreate's create handling-behavior</tspan>

<tspan x="10" y="31866">-    options._id = options.data._id;</tspan>

<tspan x="10" y="31882">-    options.dbTable.idIndexCreate({</tspan>

<tspan x="10" y="31898">-        isInteger: true,</tspan>

<tspan x="10" y="31914">-        name: "id2"</tspan>

<tspan x="10" y="31930">-    });</tspan>

<tspan x="10" y="31946">-    // test crudGetManyByQuery's get handling-behavior</tspan>

<tspan x="10" y="31962">-    options.data = options.dbTable.crudGetManyByQuery({</tspan>

<tspan x="10" y="31978">-        query: {</tspan>

<tspan x="10" y="31994">-            _id: options._id</tspan>

<tspan x="10" y="32010">-        }</tspan>

<tspan x="10" y="32026">-    })[0];</tspan>

<tspan x="10" y="32042">-    // validate dbRowCount</tspan>

<tspan x="10" y="32058">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);</tspan>

<tspan x="10" y="32074">-    // validate data</tspan>

<tspan x="10" y="32090">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="32106">-    local.assertJsonNotEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="32122">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="32138">-    local.assertJsonEqual(options.data.field2, 2);</tspan>

<tspan x="10" y="32154">-    // test crudGetOneByQuery's get handling-behavior</tspan>

<tspan x="10" y="32170">-    options.data = options.dbTable.crudGetOneByQuery({</tspan>

<tspan x="10" y="32186">-        _id: options._id</tspan>

<tspan x="10" y="32202">-    });</tspan>

<tspan x="10" y="32218">-    // validate dbRowCount</tspan>

<tspan x="10" y="32234">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);</tspan>

<tspan x="10" y="32250">-    // validate data</tspan>

<tspan x="10" y="32266">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="32282">-    local.assertJsonNotEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="32298">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="32314">-    local.assertJsonEqual(options.data.field2, 2);</tspan>

<tspan x="10" y="32330">-    // test crudUpdateManyByQuery's update handling-behavior</tspan>

<tspan x="10" y="32346">-    options.id2 = options.data.id2;</tspan>

<tspan x="10" y="32362">-    options.data = options.dbTable.crudUpdateManyByQuery({</tspan>

<tspan x="10" y="32378">-        id2: options.id2</tspan>

<tspan x="10" y="32394">-    }, {</tspan>

<tspan x="10" y="32410">-        id2: options.id2,</tspan>

<tspan x="10" y="32426">-        field2: NaN,</tspan>

<tspan x="10" y="32442">-        field3: [new Date(0)]</tspan>

<tspan x="10" y="32458">-    })[0];</tspan>

<tspan x="10" y="32474">-    // validate dbRowCount</tspan>

<tspan x="10" y="32490">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);</tspan>

<tspan x="10" y="32506">-    // validate timestamp</tspan>

<tspan x="10" y="32522">-    local.assertThrow(options.data._timeCreated &lt;= options.data._timeUpdated, options.data);</tspan>

<tspan x="10" y="32538">-    // validate data</tspan>

<tspan x="10" y="32554">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="32570">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="32586">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="32602">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="32618">-    local.assertJsonEqual(options.data.field3, ["1970-01-01T00:00:00.000Z"]);</tspan>

<tspan x="10" y="32634">-    // test crudSetManyById's replace handling-behavior</tspan>

<tspan x="10" y="32650">-    options.data = options.dbTable.crudSetManyById([{</tspan>

<tspan x="10" y="32666">-        id2: options.id2</tspan>

<tspan x="10" y="32682">-    }])[0];</tspan>

<tspan x="10" y="32698">-    // validate dbRowCount</tspan>

<tspan x="10" y="32714">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);</tspan>

<tspan x="10" y="32730">-    // validate timestamp</tspan>

<tspan x="10" y="32746">-    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);</tspan>

<tspan x="10" y="32762">-    // validate data</tspan>

<tspan x="10" y="32778">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="32794">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="32810">-    local.assertJsonEqual(options.data.field1, undefined);</tspan>

<tspan x="10" y="32826">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="32842">-    local.assertJsonEqual(options.data.field3, undefined);</tspan>

<tspan x="10" y="32858">-    // test crudUpdateManyByQuery's update handling-behavior</tspan>

<tspan x="10" y="32874">-    options.data = options.dbTable.crudUpdateManyByQuery({</tspan>

<tspan x="10" y="32890">-        id2: options.id2</tspan>

<tspan x="10" y="32906">-    }, {</tspan>

<tspan x="10" y="32922">-        id2: options.id2,</tspan>

<tspan x="10" y="32938">-        field1: 1</tspan>

<tspan x="10" y="32954">-    })[0];</tspan>

<tspan x="10" y="32970">-    // validate dbRowCount</tspan>

<tspan x="10" y="32986">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);</tspan>

<tspan x="10" y="33002">-    // validate timestamp</tspan>

<tspan x="10" y="33018">-    local.assertThrow(options.data._timeCreated &lt;= options.data._timeUpdated, options.data);</tspan>

<tspan x="10" y="33034">-    // validate data</tspan>

<tspan x="10" y="33050">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="33066">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="33082">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="33098">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="33114">-    local.assertJsonEqual(options.data.field3, undefined);</tspan>

<tspan x="10" y="33130">-    // test crudRemoveManyByQuery's soft-delete handling-behavior</tspan>

<tspan x="10" y="33146">-    options.data = options.dbTable.crudRemoveManyByQuery({</tspan>

<tspan x="10" y="33162">-        _id: options._id</tspan>

<tspan x="10" y="33178">-    })[0];</tspan>

<tspan x="10" y="33194">-    // validate dbRowCount</tspan>

<tspan x="10" y="33210">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 1);</tspan>

<tspan x="10" y="33226">-    // validate data</tspan>

<tspan x="10" y="33242">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="33258">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="33274">-    local.assertJsonEqual(options.data.field1, 1);</tspan>

<tspan x="10" y="33290">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="33306">-    local.assertJsonEqual(options.data.field3, undefined);</tspan>

<tspan x="10" y="33322">-    // test crudSetManyById's re-insert handling-behavior</tspan>

<tspan x="10" y="33338">-    options.data = options.dbTable.crudSetManyById([{</tspan>

<tspan x="10" y="33354">-        id2: options.id2</tspan>

<tspan x="10" y="33370">-    }])[0];</tspan>

<tspan x="10" y="33386">-    // validate dbRowCount</tspan>

<tspan x="10" y="33402">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);</tspan>

<tspan x="10" y="33418">-    // validate timestamp</tspan>

<tspan x="10" y="33434">-    local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);</tspan>

<tspan x="10" y="33450">-    // validate data</tspan>

<tspan x="10" y="33466">-    local.assertJsonNotEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="33482">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="33498">-    local.assertJsonEqual(options.data.field1, undefined);</tspan>

<tspan x="10" y="33514">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="33530">-    local.assertJsonEqual(options.data.field3, undefined);</tspan>

<tspan x="10" y="33546">-    // test crudRemoveManyByQuery's soft-delete handling-behavior</tspan>

<tspan x="10" y="33562">-    options._id = options.data._id;</tspan>

<tspan x="10" y="33578">-    options.data = options.dbTable.crudRemoveManyByQuery({</tspan>

<tspan x="10" y="33594">-        _id: options._id</tspan>

<tspan x="10" y="33610">-    })[0];</tspan>

<tspan x="10" y="33626">-    // validate dbRowCount</tspan>

<tspan x="10" y="33642">-    local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 1);</tspan>

<tspan x="10" y="33658">-    // validate data</tspan>

<tspan x="10" y="33674">-    local.assertJsonEqual(options.data._id, options._id);</tspan>

<tspan x="10" y="33690">-    local.assertJsonEqual(options.data.id2, options.id2);</tspan>

<tspan x="10" y="33706">-    local.assertJsonEqual(options.data.field1, undefined);</tspan>

<tspan x="10" y="33722">-    local.assertJsonEqual(options.data.field2, undefined);</tspan>

<tspan x="10" y="33738">-    local.assertJsonEqual(options.data.field3, undefined);</tspan>

<tspan x="10" y="33754">-    onError();</tspan>

<tspan x="10" y="33770">-};</tspan>

<tspan x="10" y="33786">-</tspan>

<tspan x="10" y="33802">-local.testCase_dbTable_persistence = function (options, onError) {</tspan>

<tspan x="10" y="33818">-/*</tspan>

<tspan x="10" y="33834">- * this function will test dbTable's persistence handling-behavior</tspan>

<tspan x="10" y="33850">- */</tspan>

<tspan x="10" y="33866">-    options = {};</tspan>

<tspan x="10" y="33882">-    // remove all dbRow's from db</tspan>

<tspan x="10" y="33898">-    local.dbCrudRemoveAll();</tspan>

<tspan x="10" y="33914">-    // drop db</tspan>

<tspan x="10" y="33930">-    local.dbDrop();</tspan>

<tspan x="10" y="33946">-    // save db</tspan>

<tspan x="10" y="33962">-    local.dbSave();</tspan>

<tspan x="10" y="33978">-    // load db</tspan>

<tspan x="10" y="33994">-    local.dbLoad();</tspan>

<tspan x="10" y="34010">-    // import db</tspan>

<tspan x="10" y="34026">-    local.dbImport(</tspan>

<tspan x="10" y="34042">-        "testCase_dbTable_persistence idIndexCreate {\"name\":\"_id\"}\n"</tspan>

<tspan x="10" y="34058">-        + "testCase_dbTable_persistence idIndexCreate {\"name\":\"id2\"}\n"</tspan>

<tspan x="10" y="34074">-        + "testCase_dbTable_persistence sizeLimit 0\n"</tspan>

<tspan x="10" y="34090">-        + "testCase_dbTable_persistence sortDefault []\n"</tspan>

<tspan x="10" y="34106">-        + "testCase_dbTable_persistence dbRowSet {\"_id\":\"id1\"}\n"</tspan>

<tspan x="10" y="34122">-        + "undefined undefined undefined"</tspan>

<tspan x="10" y="34138">-    );</tspan>

<tspan x="10" y="34154">-    options.dbTable = local.dbTableCreateOne({</tspan>

<tspan x="10" y="34170">-        name: "testCase_dbTable_persistence"</tspan>

<tspan x="10" y="34186">-    });</tspan>

<tspan x="10" y="34202">-    options.data = local.dbExport();</tspan>

<tspan x="10" y="34218">-    // validate dbTable has idIndex._id</tspan>

<tspan x="10" y="34234">-    local.assertThrow(options.data.indexOf(</tspan>

<tspan x="10" y="34250">-        "testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"_id\"}"</tspan>

<tspan x="10" y="34266">-    ) &gt;= 0, options.data);</tspan>

<tspan x="10" y="34282">-    // validate dbTable has idIndex.id2</tspan>

<tspan x="10" y="34298">-    local.assertThrow(options.data.indexOf(</tspan>

<tspan x="10" y="34314">-        "testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"id2\"}"</tspan>

<tspan x="10" y="34330">-    ) &gt;= 0, options.data);</tspan>

<tspan x="10" y="34346">-    // validate dbTable has dbRow1</tspan>

<tspan x="10" y="34362">-    local.assertThrow(options.data.indexOf(</tspan>

<tspan x="10" y="34378">-        "testCase_dbTable_persistence dbRowSet {\"_id\":\"id1\","</tspan>

<tspan x="10" y="34394">-    ) &gt;= 0, options.data);</tspan>

<tspan x="10" y="34410">-    // remove all dbRow's from dbTable</tspan>

<tspan x="10" y="34426">-    options.dbTable.crudRemoveAll();</tspan>

<tspan x="10" y="34442">-    options.data = options.dbTable.export();</tspan>

<tspan x="10" y="34458">-    // validate dbTable has idIndex._id</tspan>

<tspan x="10" y="34474">-    local.assertThrow(options.data.indexOf(</tspan>

<tspan x="10" y="34490">-        "testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"_id\"}"</tspan>

<tspan x="10" y="34506">-    ) &gt;= 0, options.data);</tspan>

<tspan x="10" y="34522">-    // validate dbTable has idIndex.id2</tspan>

<tspan x="10" y="34538">-    local.assertThrow(options.data.indexOf(</tspan>

<tspan x="10" y="34554">-        "testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"id2\"}"</tspan>

<tspan x="10" y="34570">-    ) &gt;= 0, options.data);</tspan>

<tspan x="10" y="34586">-    // validate dbTable has no dbRow1</tspan>

<tspan x="10" y="34602">-    local.assertThrow(options.data.indexOf(</tspan>

<tspan x="10" y="34618">-        "testCase_dbTable_persistence dbRowSet {\"_id\":\"id1\","</tspan>

<tspan x="10" y="34634">-    ) &lt; 0, options.data);</tspan>

<tspan x="10" y="34650">-    // drop dbTable</tspan>

<tspan x="10" y="34666">-    options.dbTable.drop();</tspan>

<tspan x="10" y="34682">-    options.data = options.dbTable.export();</tspan>

<tspan x="10" y="34698">-    // validate dbTable has idIndex._id</tspan>

<tspan x="10" y="34714">-    local.assertThrow(options.data.indexOf(</tspan>

<tspan x="10" y="34730">-        "testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"_id\"}"</tspan>

<tspan x="10" y="34746">-    ) &gt;= 0, options.data);</tspan>

<tspan x="10" y="34762">-    // validate dbTable has no idIndex.id2</tspan>

<tspan x="10" y="34778">-    local.assertThrow(options.data.indexOf(</tspan>

<tspan x="10" y="34794">-        "testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"id2\"}"</tspan>

<tspan x="10" y="34810">-    ) &lt; 0, options.data);</tspan>

<tspan x="10" y="34826">-    // validate dbTable has no dbRow1</tspan>

<tspan x="10" y="34842">-    local.assertThrow(options.data.indexOf(</tspan>

<tspan x="10" y="34858">-        "testCase_dbTable_persistence dbRowSet {\"_id\":\"id1\","</tspan>

<tspan x="10" y="34874">-    ) &lt; 0, options.data);</tspan>

<tspan x="10" y="34890">-    // save db</tspan>

<tspan x="10" y="34906">-    options.dbTable.save(function (error) {</tspan>

<tspan x="10" y="34922">-        // validate no error occurred</tspan>

<tspan x="10" y="34938">-        local.assertThrow(!error, error);</tspan>

<tspan x="10" y="34954">-        // load db</tspan>

<tspan x="10" y="34970">-        local.dbLoad(onError);</tspan>

<tspan x="10" y="34986">-    });</tspan>

<tspan x="10" y="35002">-};</tspan>

<tspan x="10" y="35018">-</tspan>

<tspan x="10" y="35034">-local.testCase_dbTable_sizeLimit = function (options, onError) {</tspan>

<tspan x="10" y="35050">-/*</tspan>

<tspan x="10" y="35066">- * this function will test dbTable's sizeLimit handling-behavior</tspan>

<tspan x="10" y="35082">- */</tspan>

<tspan x="10" y="35098">-    options = {};</tspan>

<tspan x="10" y="35114">-    options.dbTable = local.dbTableCreateOne({</tspan>

<tspan x="10" y="35130">-        name: "testCase_dbTable_sizeLimit",</tspan>

<tspan x="10" y="35146">-        sizeLimit: 2</tspan>

<tspan x="10" y="35162">-    });</tspan>

<tspan x="10" y="35178">-    options.dbTable.crudSetOneById({});</tspan>

<tspan x="10" y="35194">-    // validate dbRowCount</tspan>

<tspan x="10" y="35210">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 1);</tspan>

<tspan x="10" y="35226">-    options.dbTable.crudSetOneById({});</tspan>

<tspan x="10" y="35242">-    // validate dbRowCount</tspan>

<tspan x="10" y="35258">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);</tspan>

<tspan x="10" y="35274">-    options.dbTable.crudSetOneById({});</tspan>

<tspan x="10" y="35290">-    // validate dbRowCount</tspan>

<tspan x="10" y="35306">-    local.assertJsonEqual(options.dbTable.crudCountAll(), 2);</tspan>

<tspan x="10" y="35322">-    onError();</tspan>

<tspan x="10" y="35338">-};</tspan>

<tspan x="10" y="35354">-</tspan>

<tspan x="10" y="35370">-local.testCase_onEventDomDb_default = function (options, onError) {</tspan>

<tspan x="10" y="35386">-/*</tspan>

<tspan x="10" y="35402">- * this function will test onEventDomDb's default handling-behavior</tspan>

<tspan x="10" y="35418">- */</tspan>

<tspan x="10" y="35434">-    if (!local.isBrowser) {</tspan>

<tspan x="10" y="35450">-        onError(null, options);</tspan>

<tspan x="10" y="35466">-        return;</tspan>

<tspan x="10" y="35482">-    }</tspan>

<tspan x="10" y="35498">-    options = {};</tspan>

<tspan x="10" y="35514">-    options.addEventListener = local.nop;</tspan>

<tspan x="10" y="35530">-    options.click = local.nop;</tspan>

<tspan x="10" y="35546">-    options.files = [];</tspan>

<tspan x="10" y="35562">-    local.testMock([</tspan>

<tspan x="10" y="35578">-        [document, {</tspan>

<tspan x="10" y="35594">-            querySelector: function () {</tspan>

<tspan x="10" y="35610">-                return options;</tspan>

<tspan x="10" y="35626">-            }</tspan>

<tspan x="10" y="35642">-        }],</tspan>

<tspan x="10" y="35658">-        [local, {</tspan>

<tspan x="10" y="35674">-            dbDrop: function (onError) {</tspan>

<tspan x="10" y="35690">-                onError();</tspan>

<tspan x="10" y="35706">-            },</tspan>

<tspan x="10" y="35722">-            dbExport: local.nop,</tspan>

<tspan x="10" y="35738">-            dbImport: local.nop</tspan>

<tspan x="10" y="35754">-        }],</tspan>

<tspan x="10" y="35770">-        [globalThis, {</tspan>

<tspan x="10" y="35786">-            FileReader: function () {</tspan>

<tspan x="10" y="35802">-                this.addEventListener = function (_, fnc) {</tspan>

<tspan x="10" y="35818">-                    fnc(_);</tspan>

<tspan x="10" y="35834">-                };</tspan>

<tspan x="10" y="35850">-                this.readAsText = local.nop;</tspan>

<tspan x="10" y="35866">-            },</tspan>

<tspan x="10" y="35882">-            setTimeout: function (fnc) {</tspan>

<tspan x="10" y="35898">-                fnc();</tspan>

<tspan x="10" y="35914">-            },</tspan>

<tspan x="10" y="35930">-            utility2: null,</tspan>

<tspan x="10" y="35946">-            utility2_dbSeedList: null,</tspan>

<tspan x="10" y="35962">-            utility2_onReadyAfter: null,</tspan>

<tspan x="10" y="35978">-            utility2_onReadyBefore: null</tspan>

<tspan x="10" y="35994">-        }]</tspan>

<tspan x="10" y="36010">-    ], function (onError) {</tspan>

<tspan x="10" y="36026">-        [</tspan>

<tspan x="10" y="36042">-            "dbExportButton1",</tspan>

<tspan x="10" y="36058">-            "dbImportButton1",</tspan>

<tspan x="10" y="36074">-            "dbImportInput1",</tspan>

<tspan x="10" y="36090">-            "dbResetButton1"</tspan>

<tspan x="10" y="36106">-        ].forEach(function (id) {</tspan>

<tspan x="10" y="36122">-            ["change", "click"].forEach(function (type) {</tspan>

<tspan x="10" y="36138">-                [0, 1].forEach(function (ii) {</tspan>

<tspan x="10" y="36154">-                    options.files[0] = ii;</tspan>

<tspan x="10" y="36170">-                    local.onEventDomDb({</tspan>

<tspan x="10" y="36186">-                        target: {</tspan>

<tspan x="10" y="36202">-                            dataset: {},</tspan>

<tspan x="10" y="36218">-                            id: id</tspan>

<tspan x="10" y="36234">-                        },</tspan>

<tspan x="10" y="36250">-                        type: type</tspan>

<tspan x="10" y="36266">-                    });</tspan>

<tspan x="10" y="36282">-                    globalThis.utility2_dbSeedList = ii &amp;&amp; [{</tspan>

<tspan x="10" y="36298">-                        name: "dbTable1"</tspan>

<tspan x="10" y="36314">-                    }];</tspan>

<tspan x="10" y="36330">-                });</tspan>

<tspan x="10" y="36346">-            });</tspan>

<tspan x="10" y="36362">-        });</tspan>

<tspan x="10" y="36378">-        onError();</tspan>

<tspan x="10" y="36394">-    }, onError);</tspan>

<tspan x="10" y="36410">-};</tspan>

<tspan x="10" y="36426">-</tspan>

<tspan x="10" y="36442">-local.testCase_sortCompare_default = function (options, onError) {</tspan>

<tspan x="10" y="36458">-/*</tspan>

<tspan x="10" y="36474">- * this function will test sortCompare's default handling-behavior</tspan>

<tspan x="10" y="36490">- */</tspan>

<tspan x="10" y="36506">-    options = {};</tspan>

<tspan x="10" y="36522">-    options.data = local.identity([</tspan>

<tspan x="10" y="36538">-        undefined,</tspan>

<tspan x="10" y="36554">-        [],</tspan>

<tspan x="10" y="36570">-        "",</tspan>

<tspan x="10" y="36586">-        -1, -Infinity, 0, 0, 1, Infinity,</tspan>

<tspan x="10" y="36602">-        {},</tspan>

<tspan x="10" y="36618">-        "a", "aa",</tspan>

<tspan x="10" y="36634">-        false, false, null, null, true, true</tspan>

<tspan x="10" y="36650">-    ]).sort();</tspan>

<tspan x="10" y="36666">-    options.data = options.data.sort(local.sortCompare);</tspan>

<tspan x="10" y="36682">-    local.assertJsonEqual(options.data.slice(0, -3), [</tspan>

<tspan x="10" y="36698">-        null, null,</tspan>

<tspan x="10" y="36714">-        false, false, true, true,</tspan>

<tspan x="10" y="36730">-        -Infinity, -1, 0, 0, 1, Infinity,</tspan>

<tspan x="10" y="36746">-        "", "a", "aa"</tspan>

<tspan x="10" y="36762">-    ]);</tspan>

<tspan x="10" y="36778">-    options.data = options.data.reverse().sort(local.sortCompare);</tspan>

<tspan x="10" y="36794">-    local.assertJsonEqual(options.data.slice(0, -3), [</tspan>

<tspan x="10" y="36810">-        null, null,</tspan>

<tspan x="10" y="36826">-        false, false, true, true,</tspan>

<tspan x="10" y="36842">-        -Infinity, -1, 0, 0, 1, Infinity,</tspan>

<tspan x="10" y="36858">-        "", "a", "aa"</tspan>

<tspan x="10" y="36874">-    ]);</tspan>

<tspan x="10" y="36890">-    // coverage-hack</tspan>

<tspan x="10" y="36906">-    options.data.forEach(function (aa) {</tspan>

<tspan x="10" y="36922">-        [{}, null, Symbol()].forEach(function (bb) {</tspan>

<tspan x="10" y="36938">-            local.sortCompare(aa, bb);</tspan>

<tspan x="10" y="36954">-            local.sortCompare(bb, aa);</tspan>

<tspan x="10" y="36970">-        });</tspan>

<tspan x="10" y="36986">-    });</tspan>

<tspan x="10" y="37002">-    onError();</tspan>

<tspan x="10" y="37018">-};</tspan>

<tspan x="10" y="37034">-</tspan>

<tspan x="10" y="37050">-local.testCase_storageXxx_misc = function (options, onError) {</tspan>

<tspan x="10" y="37066">-/*</tspan>

<tspan x="10" y="37082">- * this function will test storageXxx's misc handling-behavior</tspan>

<tspan x="10" y="37098">- */</tspan>

<tspan x="10" y="37114">-    var onParallel;</tspan>

<tspan x="10" y="37130">-    // jslint-hack</tspan>

<tspan x="10" y="37146">-    local.nop(options);</tspan>

<tspan x="10" y="37162">-    onParallel = local.onParallel(onError);</tspan>

<tspan x="10" y="37178">-    onParallel.counter += 1;</tspan>

<tspan x="10" y="37194">-    // test storageInit's init handling-behavior</tspan>

<tspan x="10" y="37210">-    local.storageInit();</tspan>

<tspan x="10" y="37226">-    // test storageInit's re-init handling-behavior</tspan>

<tspan x="10" y="37242">-    local.storageInit();</tspan>

<tspan x="10" y="37258">-    // test crud handling-behavior</tspan>

<tspan x="10" y="37274">-    onParallel.counter += 1;</tspan>

<tspan x="10" y="37290">-    local.storageClear(onParallel);</tspan>

<tspan x="10" y="37306">-    onParallel.counter += 1;</tspan>

<tspan x="10" y="37322">-    local.storageGetItem("undefined", onParallel);</tspan>

<tspan x="10" y="37338">-    onParallel.counter += 1;</tspan>

<tspan x="10" y="37354">-    local.storageKeys(onParallel);</tspan>

<tspan x="10" y="37370">-    onParallel.counter += 1;</tspan>

<tspan x="10" y="37386">-    local.storageLength(onParallel);</tspan>

<tspan x="10" y="37402">-    onParallel.counter += 1;</tspan>

<tspan x="10" y="37418">-    local.storageRemoveItem("undefined", onParallel);</tspan>

<tspan x="10" y="37434">-    onParallel.counter += 1;</tspan>

<tspan x="10" y="37450">-    local.storageSetItem("undefined", "undefined", onParallel);</tspan>

<tspan x="10" y="37466">-    //!! onParallel.counter += 1;</tspan>

<tspan x="10" y="37482">-    //!! local.storageKeys(function () {</tspan>

<tspan x="10" y="37498">-        //!! if (local.isBrowser) {</tspan>

<tspan x="10" y="37514">-            //!! // test indexedDB's onupgradeneeded handling-behavior</tspan>

<tspan x="10" y="37530">-            //!! local._debugStorageRequestIndexedDB.onupgradeneeded();</tspan>

<tspan x="10" y="37546">-        //!! }</tspan>

<tspan x="10" y="37562">-        //!! onParallel();</tspan>

<tspan x="10" y="37578">-    //!! });</tspan>

<tspan x="10" y="37594">-    onParallel();</tspan>

<tspan x="10" y="37610">-};</tspan>

<tspan x="10" y="37626">-}());</tspan>

<tspan x="10" y="37642">-</tspan>

<tspan x="10" y="37658">-</tspan>

<tspan x="10" y="37674">-</tspan>

<tspan x="10" y="37690">-}());</tspan>

<tspan x="10" y="37706">jslint-autofix - modified and saved file /tmp/npmTestPublished/node_modules/db-lite/test.js</tspan>

<tspan x="10" y="37722">jslint /tmp/npmTestPublished/node_modules/db-lite/test.js</tspan>

<tspan x="10" y="37738">  1 Unexpected ': id'. // line 1506, column 31</tspan>

<tspan x="10" y="37754">    id: id</tspan>

<tspan x="10" y="37770">{</tspan>

<tspan x="10" y="37786">    "name": "JSLintError",</tspan>

<tspan x="10" y="37802">    "column": 31,</tspan>

<tspan x="10" y="37818">    "line": 1506,</tspan>

<tspan x="10" y="37834">    "code": "unexpected_a",</tspan>

<tspan x="10" y="37850">    "a": ": id",</tspan>

<tspan x="10" y="37866">    "d": {</tspan>

<tspan x="10" y="37882">        "from": 30,</tspan>

<tspan x="10" y="37898">        "id": ":",</tspan>

<tspan x="10" y="37914">        "identifier": false,</tspan>

<tspan x="10" y="37930">        "line": 1505,</tspan>

<tspan x="10" y="37946">        "nr": 8212,</tspan>

<tspan x="10" y="37962">        "thru": 31</tspan>

<tspan x="10" y="37978">    },</tspan>

<tspan x="10" y="37994">    "message": "Unexpected ': id'.",</tspan>

<tspan x="10" y="38010">    "source": "                            id: id",</tspan>

<tspan x="10" y="38026">    "ignore": null,</tspan>

<tspan x="10" y="38042">    "c": {},</tspan>

<tspan x="10" y="38058">    "option": {</tspan>

<tspan x="10" y="38074">        "modeNext": 12,</tspan>

<tspan x="10" y="38090">        "autofix": true,</tspan>

<tspan x="10" y="38106">        "conditional": true,</tspan>

<tspan x="10" y="38122">        "file": "/tmp/npmTestPublished/node_modules/db-lite/test.js",</tspan>

<tspan x="10" y="38138">        "errorText": "",</tspan>

<tspan x="10" y="38154">        "fileType": ".js",</tspan>

<tspan x="10" y="38170">        "utility2": true,</tspan>

<tspan x="10" y="38186">        "edition": "2019-01-31",</tspan>

<tspan x="10" y="38202">        "id": "(JSLint)",</tspan>

<tspan x="10" y="38218">        "json": false,</tspan>

<tspan x="10" y="38234">        "module": false,</tspan>

<tspan x="10" y="38250">        "ok": false,</tspan>

<tspan x="10" y="38266">        "stop": false,</tspan>

<tspan x="10" y="38282">        "bitwise": true,</tspan>

<tspan x="10" y="38298">        "browser": true,</tspan>

<tspan x="10" y="38314">        "node": true,</tspan>

<tspan x="10" y="38330">        "this": true</tspan>

<tspan x="10" y="38346">    },</tspan>

<tspan x="10" y="38362">    "stack": null,</tspan>

<tspan x="10" y="38378">    "evidence": "                            id: id"</tspan>

<tspan x="10" y="38394">}</tspan>

<tspan x="10" y="38410">Error</tspan>

<tspan x="10" y="38426">    at warn_at_extra (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslin\</tspan>
<tspan x="10" y="38442">t.js:7157:42)</tspan>

<tspan x="10" y="38458">    at warn_at (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:2\</tspan>
<tspan x="10" y="38474">463:5)</tspan>

<tspan x="10" y="38490">    at warn (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:2486\</tspan>
<tspan x="10" y="38506">:29)</tspan>

<tspan x="10" y="38522">    at member (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:50\</tspan>
<tspan x="10" y="38538">25:25)</tspan>

<tspan x="10" y="38554">    at member (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:50\</tspan>
<tspan x="10" y="38570">41:24)</tspan>

<tspan x="10" y="38586">    at /tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:5043:10</tspan>

<tspan x="10" y="38602">    at Object.the_symbol.nud (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/l\</tspan>
<tspan x="10" y="38618">ib.jslint.js:4269:20)</tspan>

<tspan x="10" y="38634">    at expression (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.j\</tspan>
<tspan x="10" y="38650">s:3795:27)</tspan>

<tspan x="10" y="38666">    at member (/tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:50\</tspan>
<tspan x="10" y="38682">23:29)</tspan>

<tspan x="10" y="38698">    at /tmp/npmTestPublished/node_modules/db-lite/node_modules/utility2/lib.jslint.js:5043:10</tspan>

<tspan x="10" y="38714">  2 Unexpected ': type'. // line 1508, column 29</tspan>

<tspan x="10" y="38730">    type: type</tspan>

<tspan x="10" y="38746">jslint - 497ms /tmp/npmTestPublished/node_modules/db-lite/test.js</tspan>

<tspan x="10" y="38762">testRunDefault - 1014 ms - [node test-case 4 of 17 passed] - testCase_buildTest_default</tspan>

<tspan x="10" y="38778">testRunDefault - 1017 ms - [node test-case 5 of 17 passed] - testCase_dbLoad_error</tspan>

<tspan x="10" y="38794">testRunDefault - 1152 ms - [node test-case 6 of 17 passed] - testCase_dbTable_crudGetManyByQuery</tspan>

<tspan x="10" y="38810">testRunDefault - 1159 ms - [node test-case 7 of 17 passed] - testCase_dbTable_crudNullCase</tspan>

<tspan x="10" y="38826">testRunDefault - 1165 ms - [node test-case 8 of 17 passed] - testCase_dbTable_crudXxxById</tspan>

<tspan x="10" y="38842">testRunDefault - 1171 ms - [node test-case 9 of 17 passed] - testCase_dbTable_crudXxxByQuery</tspan>

<tspan x="10" y="38858">testRunDefault - 1186 ms - [node test-case 10 of 17 passed] - testCase_dbTable_sizeLimit</tspan>

<tspan x="10" y="38874">testRunDefault - 1188 ms - [node test-case 11 of 17 passed] - testCase_nop_default</tspan>

<tspan x="10" y="38890">testRunDefault - 1189 ms - [node test-case 12 of 17 passed] - testCase_onEventDomDb_default</tspan>

<tspan x="10" y="38906">testRunDefault - 1191 ms - [node test-case 13 of 17 passed] - testCase_sortCompare_default</tspan>

<tspan x="10" y="38922">testRunDefault - 1354 ms - [node test-case 14 of 17 passed] - testCase_storageXxx_misc</tspan>

<tspan x="10" y="38938">http-server listening on port 63049</tspan>

<tspan x="10" y="38954">Xlib:  extension "RANDR" missing on display ":99.0".</tspan>

<tspan x="10" y="38970">testRunDefault - 2190 ms - [node test-case 15 of 17 passed] - testCase_dbTable_persistence</tspan>

<tspan x="10" y="38986">[6591:0804/070550.045391:ERROR:bus.cc(395)] Failed to connect to the bus: Could not parse server\</tspan>
<tspan x="10" y="39002"> address: Unknown address type (examples of valid types are "tcp" and on UNIX "unix")</tspan>

<tspan x="10" y="39018">[6591:0804/070550.052534:ERROR:bus.cc(395)] Failed to connect to the bus: Could not parse server\</tspan>
<tspan x="10" y="39034"> address: Unknown address type (examples of valid types are "tcp" and on UNIX "unix")</tspan>

<tspan x="10" y="39050">[6653:0804/070550.246053:ERROR:sandbox_linux.cc(344)] InitializeSandbox() called with multiple t\</tspan>
<tspan x="10" y="39066">hreads in process gpu-process.</tspan>

<tspan x="10" y="39082">[6591:0804/070550.470418:INFO:CONSOLE(188)] "%cElectron Security Warning (Insecure Content-Secur\</tspan>
<tspan x="10" y="39098">ity-Policy)", source: /tmp/npmTestPublished/node_modules/db-lite/node_modules/electron-lite/exte\</tspan>
<tspan x="10" y="39114">rnal/resources/electron.asar/renderer/security-warnings.js (188)</tspan>

<tspan x="10" y="39130">[6591:0804/070550.470523:INFO:CONSOLE(188)] "%cElectron Security Warning (Insecure Content-Secur\</tspan>
<tspan x="10" y="39146">ity-Policy)", source: /tmp/npmTestPublished/node_modules/db-lite/node_modules/electron-lite/exte\</tspan>
<tspan x="10" y="39162">rnal/resources/electron.asar/renderer/security-warnings.js (188)</tspan>

<tspan x="10" y="39178">[6591:0804/070551.235225:WARNING:quota_manager.cc(1629)] No storage quota provided in QuotaSetti\</tspan>
<tspan x="10" y="39194">ngs.</tspan>

<tspan x="10" y="39210">[6591:0804/070551.247778:INFO:CONSOLE(8)] "db - dropping database ...", source: http://127.0.0.1\</tspan>
<tspan x="10" y="39226">:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39242">[6591:0804/070551.267685:INFO:CONSOLE(128)] "%cElectron Security Warning (Insecure Resources)", \</tspan>
<tspan x="10" y="39258">source: /tmp/npmTestPublished/node_modules/db-lite/node_modules/electron-lite/external/resources\</tspan>
<tspan x="10" y="39274">/electron.asar/renderer/security-warnings.js (128)</tspan>

<tspan x="10" y="39290">[6591:0804/070551.274493:INFO:CONSOLE(188)] "%cElectron Security Warning (Insecure Content-Secur\</tspan>
<tspan x="10" y="39306">ity-Policy)", source: /tmp/npmTestPublished/node_modules/db-lite/node_modules/electron-lite/exte\</tspan>
<tspan x="10" y="39322">rnal/resources/electron.asar/renderer/security-warnings.js (188)</tspan>

<tspan x="10" y="39338">[6591:0804/070551.293175:INFO:CONSOLE(8)] "db - dropping database ...", source: http://127.0.0.1\</tspan>
<tspan x="10" y="39354">:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39370">[6591:0804/070551.316105:INFO:CONSOLE(128)] "%cElectron Security Warning (Insecure Resources)", \</tspan>
<tspan x="10" y="39386">source: /tmp/npmTestPublished/node_modules/db-lite/node_modules/electron-lite/external/resources\</tspan>
<tspan x="10" y="39402">/electron.asar/renderer/security-warnings.js (128)</tspan>

<tspan x="10" y="39418">[6591:0804/070551.328726:INFO:CONSOLE(188)] "%cElectron Security Warning (Insecure Content-Secur\</tspan>
<tspan x="10" y="39434">ity-Policy)", source: /tmp/npmTestPublished/node_modules/db-lite/node_modules/electron-lite/exte\</tspan>
<tspan x="10" y="39450">rnal/resources/electron.asar/renderer/security-warnings.js (188)</tspan>

<tspan x="10" y="39466">[6591:0804/070551.338544:INFO:CONSOLE(8)] "testRunDefault - 21 ms - [browser test-case 1 of 11 p\</tspan>
<tspan x="10" y="39482">assed] - testCase_dbLoad_error", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39498">[6591:0804/070551.377883:INFO:CONSOLE(8)] "testRunDefault - 11 ms - [browser test-case 1 of 11 p\</tspan>
<tspan x="10" y="39514">assed] - testCase_dbLoad_error", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39530">[6591:0804/070551.421393:INFO:CONSOLE(8)] "testRunDefault - 104 ms - [browser test-case 2 of 11 \</tspan>
<tspan x="10" y="39546">passed] - testCase_dbTable_crudGetManyByQuery", source: http://127.0.0.1:34173/assets.example.js\</tspan>
<tspan x="10" y="39562"> (8)</tspan>

<tspan x="10" y="39578">[6591:0804/070551.433765:INFO:CONSOLE(8)] "testRunDefault - 117 ms - [browser test-case 3 of 11 \</tspan>
<tspan x="10" y="39594">passed] - testCase_dbTable_crudNullCase", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39610">[6591:0804/070551.449551:INFO:CONSOLE(8)] "testRunDefault - 133 ms - [browser test-case 4 of 11 \</tspan>
<tspan x="10" y="39626">passed] - testCase_dbTable_crudXxxById", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39642">[6591:0804/070551.460843:INFO:CONSOLE(8)] "testRunDefault - 144 ms - [browser test-case 5 of 11 \</tspan>
<tspan x="10" y="39658">passed] - testCase_dbTable_crudXxxByQuery", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39674">[6591:0804/070551.485462:INFO:CONSOLE(8)] "testRunDefault - 118 ms - [browser test-case 2 of 11 \</tspan>
<tspan x="10" y="39690">passed] - testCase_dbTable_crudGetManyByQuery", source: http://127.0.0.1:34173/assets.example.js\</tspan>
<tspan x="10" y="39706"> (8)</tspan>

<tspan x="10" y="39722">[6591:0804/070551.494251:INFO:CONSOLE(8)] "testRunDefault - 176 ms - [browser test-case 6 of 11 \</tspan>
<tspan x="10" y="39738">passed] - testCase_dbTable_sizeLimit", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39754">[6591:0804/070551.497007:INFO:CONSOLE(8)] "testRunDefault - 180 ms - [browser test-case 7 of 11 \</tspan>
<tspan x="10" y="39770">passed] - testCase_nop_default", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39786">[6591:0804/070551.520109:INFO:CONSOLE(8)] "testRunDefault - 153 ms - [browser test-case 3 of 11 \</tspan>
<tspan x="10" y="39802">passed] - testCase_dbTable_crudNullCase", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39818">[6591:0804/070551.531793:INFO:CONSOLE(8)] "testRunDefault - 165 ms - [browser test-case 4 of 11 \</tspan>
<tspan x="10" y="39834">passed] - testCase_dbTable_crudXxxById", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39850">[6591:0804/070551.542910:INFO:CONSOLE(8)] "testRunDefault - 225 ms - [browser test-case 8 of 11 \</tspan>
<tspan x="10" y="39866">passed] - testCase_onEventDomDb_default", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39882">[6591:0804/070551.548383:INFO:CONSOLE(8)] "testRunDefault - 181 ms - [browser test-case 5 of 11 \</tspan>
<tspan x="10" y="39898">passed] - testCase_dbTable_crudXxxByQuery", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39914">[6591:0804/070551.554603:INFO:CONSOLE(8)] "testRunDefault - 238 ms - [browser test-case 9 of 11 \</tspan>
<tspan x="10" y="39930">passed] - testCase_sortCompare_default", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39946">[6591:0804/070551.570435:INFO:CONSOLE(8)] "testRunDefault - 203 ms - [browser test-case 6 of 11 \</tspan>
<tspan x="10" y="39962">passed] - testCase_dbTable_sizeLimit", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="39978">[6591:0804/070551.574446:INFO:CONSOLE(8)] "testRunDefault - 207 ms - [browser test-case 7 of 11 \</tspan>
<tspan x="10" y="39994">passed] - testCase_nop_default", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40010">[6591:0804/070551.606490:INFO:CONSOLE(8)] "testRunDefault - 240 ms - [browser test-case 8 of 11 \</tspan>
<tspan x="10" y="40026">passed] - testCase_onEventDomDb_default", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40042">[6591:0804/070551.610703:INFO:CONSOLE(8)] "testRunDefault - 244 ms - [browser test-case 9 of 11 \</tspan>
<tspan x="10" y="40058">passed] - testCase_sortCompare_default", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40074">[6591:0804/070551.643402:INFO:CONSOLE(8)] "testRunDefault - 326 ms - [browser test-case 10 of 11\</tspan>
<tspan x="10" y="40090"> passed] - testCase_storageXxx_misc", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40106">[6591:0804/070551.652884:INFO:CONSOLE(8)] "testRunDefault - 286 ms - [browser test-case 10 of 11\</tspan>
<tspan x="10" y="40122"> passed] - testCase_storageXxx_misc", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40138">[6591:0804/070552.515986:INFO:CONSOLE(8)] "testRunDefault - 1199 ms - [browser test-case 11 of 1\</tspan>
<tspan x="10" y="40154">1 passed] - testCase_dbTable_persistence", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40170">[6591:0804/070552.586026:INFO:CONSOLE(8)] "testRunDefault - 1219 ms - [browser test-case 11 of 1\</tspan>
<tspan x="10" y="40186">1 passed] - testCase_dbTable_persistence", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40202">testRunDefault - 5319 ms - testCase pending - testCase_buildApp_default, testCase_webpage_defaul\</tspan>
<tspan x="10" y="40218">t ...</tspan>

<tspan x="10" y="40234">[6591:0804/070553.525878:INFO:CONSOLE(8)] "----------|-----------|-----------|-----------|------\</tspan>
<tspan x="10" y="40250">-----|</tspan>

<tspan x="10" y="40266">File      |   % Stmts |% Branches |   % Funcs |   % Lines |</tspan>

<tspan x="10" y="40282">----------|-----------|-----------|-----------|-----------|</tspan>

<tspan x="10" y="40298">----------|-----------|-----------|-----------|-----------|</tspan>

<tspan x="10" y="40314">All files |       100 |       100 |       100 |       100 |</tspan>

<tspan x="10" y="40330">----------|-----------|-----------|-----------|-----------|</tspan>

<tspan x="10" y="40346">", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40362">[6591:0804/070553.531555:INFO:CONSOLE(8)] "created coverage file /tmp/build/coverage.html/index.\</tspan>
<tspan x="10" y="40378">html", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40394">[6591:0804/070553.627861:INFO:CONSOLE(8)] "----------|-----------|-----------|-----------|------\</tspan>
<tspan x="10" y="40410">-----|</tspan>

<tspan x="10" y="40426">File      |   % Stmts |% Branches |   % Funcs |   % Lines |</tspan>

<tspan x="10" y="40442">----------|-----------|-----------|-----------|-----------|</tspan>

<tspan x="10" y="40458">----------|-----------|-----------|-----------|-----------|</tspan>

<tspan x="10" y="40474">All files |       100 |       100 |       100 |       100 |</tspan>

<tspan x="10" y="40490">----------|-----------|-----------|-----------|-----------|</tspan>

<tspan x="10" y="40506">", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40522">[6591:0804/070553.628035:INFO:CONSOLE(8)] "created coverage file /tmp/build/coverage.html/index.\</tspan>
<tspan x="10" y="40538">html", source: http://127.0.0.1:34173/assets.example.js (8)</tspan>

<tspan x="10" y="40554">testRunDefault - 6608 ms - [node test-case 16 of 17 passed] - testCase_buildApp_default</tspan>

<tspan x="10" y="40570">[6591:0804/070556.329459:INFO:CONSOLE(8)] "null", source: http://127.0.0.1:34173/assets.example.\</tspan>
<tspan x="10" y="40586">js (8)</tspan>

<tspan x="10" y="40602">[6591:0804/070556.455818:INFO:CONSOLE(8)] "Error: ENOENT: no such file or directory, rename '/tm\</tspan>
<tspan x="10" y="40618">p/npmTestPublished/node_modules/db-lite/tmp/electron.16c5b72d8ed0.90fee83a0ef2.html' -&gt; '/tmp/np\</tspan>
<tspan x="10" y="40634">mTestPublished/node_modules/db-lite/tmp/electron.html'", source: http://127.0.0.1:34173/assets.e\</tspan>
<tspan x="10" y="40650">xample.js (8)</tspan>

<tspan x="10" y="40666"></tspan>

<tspan x="10" y="40682">browserTest - created screenshot file /home/travis/build/kaizhu256/node-db-lite/tmp/build/screen\</tspan>
<tspan x="10" y="40698">shot.npmTestPublished.browser.%2F.png</tspan>

<tspan x="10" y="40714"></tspan>

<tspan x="10" y="40730">browserTest - created screenshot file /home/travis/build/kaizhu256/node-db-lite/tmp/build/screen\</tspan>
<tspan x="10" y="40746">shot.npmTestPublished.browser.%2F.html</tspan>

<tspan x="10" y="40762"></tspan>

<tspan x="10" y="40778">browserTest - created screenshot file /home/travis/build/kaizhu256/node-db-lite/tmp/build/screen\</tspan>
<tspan x="10" y="40794">shot.npmTestPublished.browser.%2F.png</tspan>

<tspan x="10" y="40810"></tspan>

<tspan x="10" y="40826">browserTest - created screenshot file /home/travis/build/kaizhu256/node-db-lite/tmp/build/screen\</tspan>
<tspan x="10" y="40842">shot.npmTestPublished.browser.%2F.html</tspan>

<tspan x="10" y="40858">testRunDefault - 8789 ms - [node test-case 17 of 17 passed] - testCase_webpage_default</tspan>

<tspan x="10" y="40874">-----------------|-----------|-----------|-----------|-----------|</tspan>

<tspan x="10" y="40890">File             |   % Stmts |% Branches |   % Funcs |   % Lines |</tspan>

<tspan x="10" y="40906">-----------------|-----------|-----------|-----------|-----------|</tspan>

<tspan x="10" y="40922">   db-lite/      |     99.89 |     99.22 |       100 |     99.89 |</tspan>

<tspan x="10" y="40938">      example.js |       100 |       100 |       100 |       100 |</tspan>

<tspan x="10" y="40954">      lib.db.js  |     99.82 |     98.98 |       100 |     99.82 |</tspan>

<tspan x="10" y="40970">      test.js    |       100 |       100 |       100 |       100 |</tspan>

<tspan x="10" y="40986">-----------------|-----------|-----------|-----------|-----------|</tspan>

<tspan x="10" y="41002">All files        |     99.89 |     99.22 |       100 |     99.89 |</tspan>

<tspan x="10" y="41018">-----------------|-----------|-----------|-----------|-----------|</tspan>

<tspan x="10" y="41034"></tspan>

<tspan x="10" y="41050">created coverage file /tmp/npmTestPublished/node_modules/db-lite/tmp/build/coverage.html/index.h\</tspan>
<tspan x="10" y="41066">tml</tspan>

<tspan x="10" y="41082"></tspan>

<tspan x="10" y="41098">-------------------------------------------------------</tspan>

<tspan x="10" y="41114">| test-report - npmTestPublished - browser - / - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537\</tspan>
<tspan x="10" y="41130">.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Electron/2.0.18 Safari/537.36 - 2019-08-04T07:05:50\</tspan>
<tspan x="10" y="41146">.719Z</tspan>

<tspan x="10" y="41162">|    2010 ms            0 failed       11 passed      |</tspan>

<tspan x="10" y="41178">-------------------------------------------------------</tspan>

<tspan x="10" y="41194">| test-report - npmTestPublished - node - linux v12.7.0 - 2019-08-04T07:05:46.588Z</tspan>

<tspan x="10" y="41210">|    8790 ms            0 failed       17 passed      |</tspan>

<tspan x="10" y="41226">-------------------------------------------------------</tspan>

<tspan x="10" y="41242"></tspan>

<tspan x="10" y="41258">created test-report file /tmp/npmTestPublished/node_modules/db-lite/tmp/build/test-report.html</tspan>

<tspan x="10" y="41274"></tspan>

<tspan x="10" y="41290"></tspan>

<tspan x="10" y="41306">npmTestPublished - 0 failed tests</tspan>

<tspan x="10" y="41322"></tspan>

<tspan x="10" y="41338"></tspan>

<tspan x="10" y="41354">[MODE_BUILD=npmTestPublished] - 2019-08-04T07:05:57.856Z - EXIT_CODE - 0</tspan>

</text>
</svg>
