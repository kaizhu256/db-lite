{"/home/travis/build/kaizhu256/node-db-lite/test.js":"/* istanbul instrument in package db */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // re-init local\n        local = local.global.local = (local.global.utility2 ||\n            require('utility2')).requireReadme();\n        // init test\n        local.testRunInit(local);\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        local.testCase_consoleLog_default = function (options, onError) {\n        /*\n         * this function will test consoleLog's default handling-behavior\n         */\n            options = {};\n            options.data = null;\n            console.log(options.data);\n            options.data = '\\n';\n            console.log(options.data);\n            onError();\n        };\n\n        local.testCase_dbTable_crudGetManyByQuery = function (options, onError) {\n        /*\n         * this function will test dbTable's crudGetManyByQuery handling-behavior\n         */\n            options = {};\n            // test dbTableCreateOne's create handling-behavior\n            options.dbTable = local.dbTableCreateOne({\n                name: 'testCase_dbTable_crudGetManyByQuery'\n            });\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // test isDirty handling-behavior\n            options.dbTable.crudRemoveOneById(options.dbTable.crudSetOneById({\n                field1: 'dirty'\n            }));\n            // test null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                // test shuffle handling-behavior\n                shuffle: true\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            options.data = [\n                [],\n                [[], '', 0, {}, false, null, undefined].sort(),\n                -0.5,\n                -1,\n                -Infinity,\n                0,\n                0.5,\n                1,\n                Infinity,\n                NaN,\n                {},\n                false,\n                null,\n                true,\n                undefined\n            ].sort().map(function (element) {\n                return { field1: element };\n            });\n            options.data = options.data.concat.apply(\n                options.data,\n                options.data.map(function (dbRow) {\n                    return { field1: JSON.stringify(dbRow.field1) };\n                })\n            );\n            // test dbTableCreateOne's crudSetManyById handling-behavior\n            options.data = options.dbTable.crudSetManyById(options.data);\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 30);\n            // validate data\n            [\n                [],\n                [[], '', 0, {}, false, null, null],\n                -0.5,\n                -1,\n                undefined,\n                0,\n                0.5,\n                1,\n                undefined,\n                undefined,\n                {},\n                false,\n                undefined,\n                true,\n                undefined,\n                '[]',\n                '[[],\"\",0,{},false,null,null]',\n                '-0.5',\n                '-1',\n                'null',\n                '0',\n                '0.5',\n                '1',\n                'null',\n                'null',\n                '{}',\n                'false',\n                'null',\n                'true',\n                undefined\n            ].forEach(function (element, ii) {\n                local.assertJsonEqual(element, options.data[ii].field1);\n            });\n            // test null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $undefined: null } },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $undefined: {} } },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test $eq's boolean handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: true },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 1);\n            local.assertJsonEqual(options.data, [true]);\n            // test $eq's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: null },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 7);\n            local.assertJsonEqual(\n                options.data.slice(0, -1),\n                [null, null, null, null, null, null]\n            );\n            // test $eq's number handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: 0 },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 2);\n            local.assertJsonEqual(options.data.slice(0, -1), [0]);\n            // test $eq's string handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: '{}' },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 1);\n            local.assertJsonEqual(options.data, ['{}']);\n            // test $exists's false handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $exists: false } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 7);\n            // test $exists's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $exists: null } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 7);\n            // test $exists's true handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $exists: true } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 23);\n            // test $gt's boolean handling-behavior\n            // test $lt's boolean handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $gt: false, $lt: true } },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test $gt's null-case handling-behavior\n            // test $lt's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $gt: false, $lt: true } },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test $gt's number handling-behavior\n            // test $lt's number handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $gt: -1, $lt: 1 } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 4);\n            local.assertJsonEqual(options.data.slice(0, -1), [-0.5, 0, 0.5]);\n            // test $gt's string handling-behavior\n            // test $lt's string handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $gt: 'false', $lt: 'true' } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 4);\n            local.assertJsonEqual(options.data, ['null', 'null', 'null', 'null']);\n            // test $gte's boolean handling-behavior\n            // test $lte's boolean handling-behavior\n            // test $ne's boolean handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $gte: false, $lte: true, $ne: false } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 2);\n            local.assertJsonEqual(options.data.slice(0, -1), [true]);\n            // test $gte's null-case handling-behavior\n            // test $lte's null-case handling-behavior\n            // test $ne's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $gte: null, $lte: null, $ne: null } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 1);\n            local.assertJsonEqual(options.data.slice(0, -1), []);\n            // test $gte's number handling-behavior\n            // test $lte's number handling-behavior\n            // test $ne's number handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $gte: -1, $lte: 1, $ne: 0 } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 5);\n            local.assertJsonEqual(options.data.slice(0, -1), [-1, -0.5, 0.5, 1]);\n            // test $gte's number handling-behavior\n            // test $lte's number handling-behavior\n            // test $ne's number handling-behavior\n            // test fieldList handling-behavior\n            // test limit handling-behavior\n            // test skip handling-behavior\n            // test sort's isDescending handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                fieldList: ['field1'],\n                limit: 2,\n                query: { field1: { $gte: -1, $lte: 1, $ne: 0 } },\n                skip: 2,\n                sort: [{ fieldName: 'field1', isDescending: true }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 2);\n            local.assertJsonEqual(options.data.slice(), [0.5, -0.5]);\n            // test $gte's string handling-behavior\n            // test $lte's string handling-behavior\n            // test $ne's string handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $gte: 'false', $lte: 'true', $ne: 'null' } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 2);\n            local.assertJsonEqual(options.data, ['false', 'true']);\n            // test $in's list handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $in: [true, 1] } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 2);\n            local.assertJsonEqual(options.data, [true, 1]);\n            // test $in's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $in: null } },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test $in's string handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $in: '0.5' } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 3);\n            local.assertJsonEqual(options.data.slice(0, -1), ['0', '0.5']);\n            // test $nin's list handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $nin: [0, null] } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 22);\n            // test $nin's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $nin: null } },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test $nin's string handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: {\n                    $nin: '[[],\"\",0,1,{},false,null,true]'\n                } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 4);\n            local.assertJsonEqual(options.data.slice(0, -1), ['-0.5', '-1', '0.5']);\n            // test $not's number handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: {\n                    $not: { $gte: 0 }\n                } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 26);\n            local.assertJsonEqual(options.data.slice(0, 15), [\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                false,\n                true,\n                -1,\n                -0.5,\n                '-0.5',\n                '-1',\n                '0',\n                '0.5',\n                '1'\n            ]);\n            // test $not's string handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: {\n                    $not: { $gte: '0' }\n                } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 17);\n            local.assertJsonEqual(options.data.slice(0, -1), [\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                false,\n                true,\n                -1,\n                -0.5,\n                0,\n                0.5,\n                1,\n                '-0.5',\n                '-1',\n                {}\n            ]);\n            // test $or's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { $or: null },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test $or's empty-list handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { $or: [] },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test $or's list handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { $or: [\n                    { field1: { $eq: -0.5 } },\n                    { field1: { $eq: 0 } },\n                    { field1: { $eq: 0.5 } }\n                ] },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 4);\n            local.assertJsonEqual(options.data.slice(0, -1), [-0.5, 0, 0.5]);\n            // test $regex's regex handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $regex: (/1|true/) } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 6);\n            local.assertJsonEqual(options.data, [true, -1, 1, '-1', '1', 'true']);\n            // test $regex's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $regex: null } },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test $typeof's boolean handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $typeof: 'boolean' } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 3);\n            // test $typeof's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $typeof: null } },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test $typeof's number handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $typeof: 'number' } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 6);\n            // test $typeof's object handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $typeof: 'object' } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 8);\n            // test $typeof's string handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $typeof: 'string' } },\n                sort: [{ fieldName: 'field1' }]\n            }).map(function (dbRow) {\n                return dbRow.field1;\n            });\n            local.assertJsonEqual(options.data.length, 15);\n            // test $typeof's symbol handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $typeof: 'symbol' } },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            // test $typeof's undefined handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { field1: { $typeof: 'undefined' } },\n                sort: [{ fieldName: 'field1' }]\n            });\n            local.assertJsonEqual(options.data.length, 0);\n            local.assertJsonEqual(options.data, []);\n            onError();\n        };\n\n        local.testCase_dbTable_crudNullCase = function (options, onError) {\n        /*\n         * this function will test dbTable's crud null-case handling-behavior\n         */\n            options = {};\n            // test dbTableCreateMany's null-case handling-behavior\n            local.dbTableCreateMany();\n            // test dbTableCreateOne's onError handling-behavior\n            options.dbTable = local.dbTableCreateOne({\n                name: 'testCase_dbTable_crudNullCase'\n            }, local.onErrorDefault);\n            // test dbTableCreateOne's null-case handling-behavior\n            options.dbTable = local.dbTableCreateOne({\n                name: 'testCase_dbTable_crudNullCase'\n            });\n            // test crudRemoveAll's null-case handling-behavior\n            options.dbTable.crudRemoveAll();\n            // test cancel-pending-save handling-behavior\n            options.dbTable.save(local.nop);\n            // test drop's null-case handling-behavior\n            options.dbTable.drop();\n            // test idIndexCreate's null-case handling-behavior\n            options.dbTable.idIndexCreate({ name: '_id' });\n            // test idIndexRemove's null-case handling-behavior\n            options.dbTable.idIndexRemove({ name: '_id' });\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // test crudCountManyByQuery's null-case handling-behavior\n            options.data = options.dbTable.crudCountManyByQuery();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, 0);\n            // test crudGetManyById's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyById();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, []);\n            // test crudGetManyByQuery's null-case handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, []);\n            // test crudGetOneById's null-case handling-behavior\n            options.data = options.dbTable.crudGetOneById();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, null);\n            // test crudGetOneByRandom's null-case handling-behavior\n            options.data = options.dbTable.crudGetOneByRandom();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, null);\n            // test crudGetOneByQuery's null-case handling-behavior\n            options.data = options.dbTable.crudGetOneByQuery();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, null);\n            // test crudRemoveManyById's null-case handling-behavior\n            options.data = options.dbTable.crudRemoveManyById();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, []);\n            // test crudRemoveManyByQuery's null-case handling-behavior\n            options.data = options.dbTable.crudRemoveManyByQuery();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, []);\n            // test crudRemoveOneById's null-case handling-behavior\n            options.data = options.dbTable.crudRemoveOneById();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, null);\n            // test crudUpdateManyById's null-case handling-behavior\n            options.data = options.dbTable.crudUpdateManyById();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, []);\n            // test crudUpdateManyByQuery's null-case handling-behavior\n            options.data = options.dbTable.crudUpdateManyByQuery();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, []);\n            // test crudSetOneById's and crudUpdateOneById's null-case handling-behavior\n            ['crudSetOneById', 'crudUpdateOneById'].forEach(function (operation) {\n                options.data = options.dbTable[operation]();\n                // validate dbRowCount\n                local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n                options._id = options.data._id;\n                // validate timestamp\n                local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n                // test crudRemoveOneById's soft-delete handling-behavior\n                options.data = options.dbTable.crudRemoveOneById(options);\n                // validate dbRowCount\n                local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n                // validate data\n                local.assertJsonEqual(options.data._id, options._id);\n            });\n            // test crudGetOneById's null-case handling-behavior\n            options.data = options.dbTable.crudGetOneById(options);\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, null);\n            // test crudRemoveOneById's null-case handling-behavior\n            options.data = options.dbTable.crudRemoveOneById(options);\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data, null);\n            onError();\n        };\n\n        local.testCase_dbTable_crudXxxById = function (options, onError) {\n        /*\n         * this function will test dbTable's crudXxxById handling-behavior\n         */\n            options = {};\n            // test dbTableCreateMany's create handling-behavior\n            options.dbTable = local.dbTableCreateMany([{\n                idIndexCreateList: [null],\n                idIndexRemoveList: [null],\n                name: 'testCase_dbTable_crudXxxById'\n            }])[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // test crudSetManyById's insert handling-behavior\n            options.data = options.dbTable.crudSetManyById([null, null]);\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n            // validate data\n            local.assertJsonEqual(options.data.length, 2);\n            // test crudRemoveManyById's soft-delete handling-behavior\n            options.data = options.dbTable.crudRemoveManyById(options.data);\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 0);\n            // validate data\n            local.assertJsonEqual(options.data.length, 2);\n            // test crudSetManyById's insert handling-behavior\n            options.data = options.dbTable.crudSetManyById([null, {\n                field1: 1,\n                field2: 2,\n                field3: 3\n            }])[1];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n            // validate timestamp\n            local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n            // validate data\n            local.assertJsonNotEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, undefined);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, 2);\n            local.assertJsonEqual(options.data.field3, 3);\n            // test idIndexCreate's create handling-behavior\n            // coverage-hack - $meta.isRemoved\n            options.dbTable.crudSetOneById({ _id: 'undefined' });\n            options.dbTable.crudRemoveOneById({ _id: 'undefined' });\n            options._id = options.data._id;\n            options.dbTable.idIndexCreate({ isInteger: true, name: 'id2' });\n            // test crudGetManyById's get handling-behavior\n            options.data = options.dbTable.crudGetManyById([{ _id: options._id }])[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonNotEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, 2);\n            // test crudUpdateManyById's update handling-behavior\n            options.id2 = options.data.id2;\n            options.data = options.dbTable.crudUpdateManyById([{\n                id2: options.id2,\n                field2: NaN,\n                field3: [new Date(0)]\n            }])[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n            // validate timestamp\n            local.assert(options.data._timeCreated <= options.data._timeUpdated, options.data);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, ['1970-01-01T00:00:00.000Z']);\n            // test crudSetManyById's replace handling-behavior\n            options.data = options.dbTable.crudSetManyById([{ id2: options.id2 }])[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n            // validate timestamp\n            local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, undefined);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, undefined);\n            // test crudUpdateManyById's update handling-behavior\n            options.data = options.dbTable.crudUpdateManyById([{\n                id2: options.id2,\n                field1: 1\n            }])[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n            // validate timestamp\n            local.assert(options.data._timeCreated <= options.data._timeUpdated, options.data);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, undefined);\n            // test crudRemoveManyById's soft-delete handling-behavior\n            options.data = options.dbTable.crudRemoveManyById([options])[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, undefined);\n            // test crudSetManyById's re-insert handling-behavior\n            options.data = options.dbTable.crudSetManyById([{ id2: options.id2 }])[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n            // validate timestamp\n            local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n            // validate data\n            local.assertJsonNotEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, undefined);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, undefined);\n            // test crudRemoveManyById's soft-delete handling-behavior\n            options._id = options.data._id;\n            options.data = options.dbTable.crudRemoveManyById([options])[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, undefined);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, undefined);\n            onError();\n        };\n\n        local.testCase_dbTable_crudXxxByQuery = function (options, onError) {\n        /*\n         * this function will test dbTable's crudXxxByQuery handling-behavior\n         */\n            options = {};\n            // test dbTableCreateMany's create handling-behavior\n            options.dbTable = local.dbTableCreateMany([{\n                idIndexCreateList: [null],\n                idIndexRemoveList: [null],\n                name: 'testCase_dbTable_crudXxxByQuery'\n            }])[0];\n            // drop dbTable\n            options.dbTable.drop();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 0);\n            // test crudSetManyById's insert handling-behavior\n            options.data = options.dbTable.crudSetManyById([null, null]);\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n            // validate data\n            local.assertJsonEqual(options.data.length, 2);\n            // test crudRemoveManyByQuery's soft-delete handling-behavior\n            options.data = options.dbTable.crudRemoveManyByQuery();\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 0);\n            // validate data\n            local.assertJsonEqual(options.data.length, 2);\n            // test crudSetManyById's insert handling-behavior\n            options.data = options.dbTable.crudSetManyById([null, {\n                field1: 1,\n                field2: 2,\n                field3: 3\n            }])[1];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n            // validate timestamp\n            local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n            // validate data\n            local.assertJsonNotEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, undefined);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, 2);\n            local.assertJsonEqual(options.data.field3, 3);\n            // test idIndexCreate's create handling-behavior\n            options._id = options.data._id;\n            options.dbTable.idIndexCreate({ isInteger: true, name: 'id2' });\n            // test crudGetManyByQuery's get handling-behavior\n            options.data = options.dbTable.crudGetManyByQuery({\n                query: { _id: options._id }\n            })[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonNotEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, 2);\n            // test crudGetOneByQuery's get handling-behavior\n            options.data = options.dbTable.crudGetOneByQuery({ _id: options._id });\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonNotEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, 2);\n            // test crudUpdateManyByQuery's update handling-behavior\n            options.id2 = options.data.id2;\n            options.data = options.dbTable.crudUpdateManyByQuery({\n                id2: options.id2\n            }, {\n                id2: options.id2,\n                field2: NaN,\n                field3: [new Date(0)]\n            })[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n            // validate timestamp\n            local.assert(options.data._timeCreated <= options.data._timeUpdated, options.data);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, ['1970-01-01T00:00:00.000Z']);\n            // test crudSetManyById's replace handling-behavior\n            options.data = options.dbTable.crudSetManyById([{ id2: options.id2 }])[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n            // validate timestamp\n            local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, undefined);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, undefined);\n            // test crudUpdateManyByQuery's update handling-behavior\n            options.data = options.dbTable.crudUpdateManyByQuery({\n                id2: options.id2\n            }, {\n                id2: options.id2,\n                field1: 1\n            })[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n            // validate timestamp\n            local.assert(options.data._timeCreated <= options.data._timeUpdated, options.data);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, undefined);\n            // test crudRemoveManyByQuery's soft-delete handling-behavior\n            options.data = options.dbTable.crudRemoveManyByQuery({ _id: options._id })[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 1);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, 1);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, undefined);\n            // test crudSetManyById's re-insert handling-behavior\n            options.data = options.dbTable.crudSetManyById([{ id2: options.id2 }])[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 2);\n            // validate timestamp\n            local.assertJsonEqual(options.data._timeCreated, options.data._timeUpdated);\n            // validate data\n            local.assertJsonNotEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, undefined);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, undefined);\n            // test crudRemoveManyByQuery's soft-delete handling-behavior\n            options._id = options.data._id;\n            options.data = options.dbTable.crudRemoveManyByQuery({ _id: options._id })[0];\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountManyByQuery(), 1);\n            // validate data\n            local.assertJsonEqual(options.data._id, options._id);\n            local.assertJsonEqual(options.data.id2, options.id2);\n            local.assertJsonEqual(options.data.field1, undefined);\n            local.assertJsonEqual(options.data.field2, undefined);\n            local.assertJsonEqual(options.data.field3, undefined);\n            onError();\n        };\n\n        local.testCase_dbTable_persistence = function (options, onError) {\n        /*\n         * this function will test dbTable's persistence handling-behavior\n         */\n            options = {};\n            // remove all dbRow's from db\n            local.dbCrudRemoveAll();\n            // drop db\n            local.dbDrop();\n            // save db\n            local.dbSave();\n            // load db\n            local.dbLoad();\n            // import db\n            local.dbImport('testCase_dbTable_persistence idIndexCreate {\"name\":\"_id\"}\\n' +\n                'testCase_dbTable_persistence idIndexCreate {\"name\":\"id2\"}\\n' +\n                'testCase_dbTable_persistence sizeLimit 0\\n' +\n                'testCase_dbTable_persistence sortDefault []\\n' +\n                'testCase_dbTable_persistence dbRowSet {\"_id\":\"id1\"}\\n' +\n                'undefined undefined undefined');\n            options.dbTable = local.dbTableCreateOne({ name: 'testCase_dbTable_persistence' });\n            options.data = local.dbExport();\n            // validate dbTable has idIndex._id\n            local.assert(options.data.indexOf(\n                'testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"_id\"}'\n            ) >= 0, options.data);\n            // validate dbTable has idIndex.id2\n            local.assert(options.data.indexOf(\n                'testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"id2\"}'\n            ) >= 0, options.data);\n            // validate dbTable has dbRow1\n            local.assert(options.data.indexOf(\n                'testCase_dbTable_persistence dbRowSet {\"_id\":\"id1\",'\n            ) >= 0, options.data);\n            // remove all dbRow's from dbTable\n            options.dbTable.crudRemoveAll();\n            options.data = options.dbTable.export();\n            // validate dbTable has idIndex._id\n            local.assert(options.data.indexOf(\n                'testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"_id\"}'\n            ) >= 0, options.data);\n            // validate dbTable has idIndex.id2\n            local.assert(options.data.indexOf(\n                'testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"id2\"}'\n            ) >= 0, options.data);\n            // validate dbTable has no dbRow1\n            local.assert(options.data.indexOf(\n                'testCase_dbTable_persistence dbRowSet {\"_id\":\"id1\",'\n            ) < 0, options.data);\n            // drop dbTable\n            options.dbTable.drop();\n            options.data = options.dbTable.export();\n            // validate dbTable has idIndex._id\n            local.assert(options.data.indexOf(\n                'testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"_id\"}'\n            ) >= 0, options.data);\n            // validate dbTable has no idIndex.id2\n            local.assert(options.data.indexOf(\n                'testCase_dbTable_persistence idIndexCreate {\"isInteger\":false,\"name\":\"id2\"}'\n            ) < 0, options.data);\n            // validate dbTable has no dbRow1\n            local.assert(options.data.indexOf(\n                'testCase_dbTable_persistence dbRowSet {\"_id\":\"id1\",'\n            ) < 0, options.data);\n            // save db\n            options.dbTable.save(function (error) {\n                // validate no error occurred\n                local.assert(!error, error);\n                // load db\n                local.dbLoad(onError);\n            });\n        };\n\n        local.testCase_dbTable_sizeLimit = function (options, onError) {\n        /*\n         * this function will test dbTable's sizeLimit handling-behavior\n         */\n            options = {};\n            options.dbTable = local.dbTableCreateOne({\n                name: 'testCase_dbTable_sizeLimit',\n                sizeLimit: 2\n            });\n            options.dbTable.crudSetOneById({});\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 1);\n            options.dbTable.crudSetOneById({});\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n            options.dbTable.crudSetOneById({});\n            // validate dbRowCount\n            local.assertJsonEqual(options.dbTable.crudCountAll(), 2);\n            onError();\n        };\n\n        local.testCase_sortCompare_default = function (options, onError) {\n        /*\n         * this function will test sortCompare's default handling-behavior\n         */\n            options = {};\n            options.data = [\n                undefined,\n                [],\n                '',\n                -1, -Infinity, 0, 0, 1, Infinity,\n                {},\n                'a', 'aa',\n                false, false, null, null, true, true\n            ].sort();\n            options.data = options.data.sort(local.sortCompare);\n            local.assertJsonEqual(options.data.slice(0, -3), [\n                null, null,\n                false, false, true, true,\n                -Infinity, -1, 0, 0, 1, Infinity,\n                '', 'a', 'aa'\n            ]);\n            options.data = options.data.reverse().sort(local.sortCompare);\n            local.assertJsonEqual(options.data.slice(0, -3), [\n                null, null,\n                false, false, true, true,\n                -Infinity, -1, 0, 0, 1, Infinity,\n                '', 'a', 'aa'\n            ]);\n            // coverage-hack\n            options.data.forEach(function (aa) {\n                [{}, null, local.global.Symbol()].forEach(function (bb) {\n                    local.sortCompare(aa, bb);\n                    local.sortCompare(bb, aa);\n                });\n            });\n            onError();\n        };\n\n        local.testCase_storageXxx_misc = function (options, onError) {\n        /*\n         * this function will test storageXxx's misc handling-behavior\n         */\n            var onParallel;\n            // jslint-hack\n            local.nop(options);\n            onParallel = local.onParallel(onError);\n            onParallel.counter += 1;\n            // test storageInit's init handling-behavior\n            local.storageInit();\n            // test storageInit's re-init handling-behavior\n            local.storageInit();\n            // test crud handling-behavior\n            onParallel.counter += 1;\n            local.storageClear(onParallel);\n            onParallel.counter += 1;\n            local.storageGetItem('undefined', onParallel);\n            onParallel.counter += 1;\n            local.storageKeys(onParallel);\n            onParallel.counter += 1;\n            local.storageLength(onParallel);\n            onParallel.counter += 1;\n            local.storageRemoveItem('undefined', onParallel);\n            onParallel.counter += 1;\n            local.storageSetItem('undefined', 'undefined', onParallel);\n            onParallel.counter += 1;\n            local.storageKeys(function () {\n                if (local.modeJs === 'browser') {\n                    // test indexedDB's onupgradeneeded handling-behavior\n                    local._debugStorageRequestIndexedDB.onupgradeneeded();\n                }\n                onParallel();\n            });\n            onParallel();\n        };\n    }());\n}());\n","/home/travis/build/kaizhu256/node-db-lite/lib.db.js":"///usr/bin/env node\n/*\n * assets.db-lite.js\n *\n * this zero-dependency package will provide a persistent, in-browser database\n *\n * browser example:\n *     <script src=\"assets.db-lite.js\"></script>\n *     <script>\n *     var dbTable1;\n *     dbTable1 = window.dbTable1 = window.utility2_db.dbTableCreateOne({ name: \"dbTable1\" });\n *     dbTable1.idIndexCreate({ name: \"field1\" });\n *     dbTable1.crudSetOneById({ field1: \"hello\", field2: \"world\" });\n *     console.log(dbTable1.crudGetManyByQuery({\n *         limit: Infinity,\n *         query: { field1: \"hello\" },\n *         skip: 0,\n *         sort: [{ fieldName: 'field1', isDescending: false }]\n *     }));\n *     </script>\n *\n * node example:\n *     var db, dbTable1;\n *     utility2_db = require(\"./assets.db-lite.js\");\n *     dbTable1 = global.dbTable1 = utility2_db.dbTableCreateOne({ name: \"dbTable1\" });\n *     dbTable1.idIndexCreate({ name: \"field1\" });\n *     dbTable1.crudSetOneById({ field1: \"hello\", field2: \"world\" });\n *     console.log(dbTable1.crudGetManyByQuery({\n *         limit: Infinity,\n *         query: { field1: \"hello\" },\n *         skip: 0,\n *         sort: [{ fieldName: 'field1', isDescending: false }]\n *     }));\n */\n\n\n\n/* istanbul instrument in package db */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        /* istanbul ignore next */\n        if (!local) {\n            local = local.global.utility2_rollup ||\n                local.global.utility2_rollup_old ||\n                require('./assets.utility2.rollup.js');\n            local.fs = null;\n        }\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_db = local;\n        } else {\n            // require builtins\n            // local.assert = require('assert');\n            local.buffer = require('buffer');\n            local.child_process = require('child_process');\n            local.cluster = require('cluster');\n            local.console = require('console');\n            local.constants = require('constants');\n            local.crypto = require('crypto');\n            local.dgram = require('dgram');\n            local.dns = require('dns');\n            local.domain = require('domain');\n            local.events = require('events');\n            local.fs = require('fs');\n            local.http = require('http');\n            local.https = require('https');\n            local.module = require('module');\n            local.net = require('net');\n            local.os = require('os');\n            local.path = require('path');\n            local.process = require('process');\n            local.punycode = require('punycode');\n            local.querystring = require('querystring');\n            local.readline = require('readline');\n            local.repl = require('repl');\n            local.stream = require('stream');\n            local.string_decoder = require('string_decoder');\n            local.timers = require('timers');\n            local.tls = require('tls');\n            local.tty = require('tty');\n            local.url = require('url');\n            local.util = require('util');\n            local.v8 = require('v8');\n            local.vm = require('vm');\n            local.zlib = require('zlib');\n/* validateLineSortedReset */\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n        }\n        // init lib\n        local.local = local.db = local;\n    }());\n\n\n\n    // run shared js-env code - function-before\n    /* istanbul ignore next */\n    (function () {\n        local.assert = function (passed, message, onError) {\n        /*\n         * this function will throw the error message if passed is falsey\n         */\n            var error;\n            if (passed) {\n                return;\n            }\n            error = message && message.message\n                // if message is an error-object, then leave it as is\n                ? message\n                : new Error(typeof message === 'string'\n                    // if message is a string, then leave it as is\n                    ? message\n                    // else JSON.stringify message\n                    : JSON.stringify(message));\n            // debug error\n            local._debugAssertError = error;\n            onError = onError || function (error) {\n                throw error;\n            };\n            onError(error);\n        };\n\n        local.cliRun = function (fnc) {\n        /*\n         * this function will run the cli\n         */\n            var nop;\n            nop = function () {\n            /*\n             * this function will do nothing\n             */\n                return;\n            };\n            local.cliDict._eval = local.cliDict._eval || function () {\n            /*\n             * code\n             * eval code\n             */\n                local.global.local = local;\n                require('vm').runInThisContext(process.argv[3]);\n            };\n            local.cliDict['--eval'] = local.cliDict['--eval'] || local.cliDict._eval;\n            local.cliDict['-e'] = local.cliDict['-e'] || local.cliDict._eval;\n            local.cliDict._help = local.cliDict._help || function () {\n            /*\n             * [none]\n             * print help\n             */\n                var element, result, lengthList, sortDict;\n                console.log(require(__dirname + '/package.json').name + ' v' +\n                    require(__dirname + '/package.json').version);\n                sortDict = {};\n                result = [['[command]', '[args]', '[description]', -1]];\n                lengthList = [result[0][0].length, result[0][1].length];\n                Object.keys(local.cliDict).sort().forEach(function (key, ii) {\n                    if (key[0] === '_' && key !== '_default') {\n                        return;\n                    }\n                    sortDict[local.cliDict[key].toString()] =\n                        sortDict[local.cliDict[key].toString()] || (ii + 1);\n                    element = (/\\n +\\*(.*)\\n +\\*(.*)/).exec(local.cliDict[key].toString());\n                    // coverage-hack - ignore else-statement\n                    nop(local.global.__coverage__ && (function () {\n                        element = element || ['', '', ''];\n                    }()));\n                    element = [\n                        key.replace('_default', '[none]') + ' ',\n                        element[1].trim() + ' ',\n                        element[2].trim(),\n                        (sortDict[local.cliDict[key].toString()] << 8) + ii\n                    ];\n                    result.push(element);\n                    lengthList.forEach(function (length, jj) {\n                        lengthList[jj] = Math.max(element[jj].length, length);\n                    });\n                });\n                result.sort(function (aa, bb) {\n                    return aa[3] < bb[3]\n                        ? -1\n                        : 1;\n                });\n                console.log('usage:   ' + __filename + ' [command] [args]');\n                console.log('example: ' + __filename + ' --eval    ' +\n                    '\"console.log(\\'hello world\\')\"\\n');\n                result.forEach(function (element, ii) {\n                    lengthList.forEach(function (length, jj) {\n                        while (element[jj].length < length) {\n                            element[jj] += '-';\n                        }\n                    });\n                    element = element.slice(0, 3).join('---- ');\n                    if (!ii) {\n                        element = element.replace((/-/g), ' ');\n                    }\n                    console.log(element);\n                });\n            };\n            local.cliDict['--help'] = local.cliDict['--help'] || local.cliDict._help;\n            local.cliDict['-h'] = local.cliDict['-h'] || local.cliDict._help;\n            local.cliDict._default = local.cliDict._default || local.cliDict._help;\n            local.cliDict.help = local.cliDict.help || local.cliDict._help;\n            local.cliDict._interactive = local.cliDict._interactive || function () {\n            /*\n             * [none]\n             * start interactive-mode\n             */\n                local.global.local = local;\n                local.replStart();\n            };\n            if (local.replStart) {\n                local.cliDict['--interactive'] = local.cliDict['--interactive'] ||\n                    local.cliDict._interactive;\n                local.cliDict['-i'] = local.cliDict['-i'] || local.cliDict._interactive;\n            }\n            local.cliDict._version = local.cliDict._version || function () {\n            /*\n             * [none]\n             * print version\n             */\n                console.log(require(__dirname + '/package.json').version);\n            };\n            local.cliDict['--version'] = local.cliDict['--version'] || local.cliDict._version;\n            local.cliDict['-v'] = local.cliDict['-v'] || local.cliDict._version;\n            // run fnc()\n            fnc = fnc || function () {\n                if (local.cliDict[process.argv[2]]) {\n                    local.cliDict[process.argv[2]]();\n                    return;\n                }\n                local.cliDict._default();\n            };\n            fnc();\n        };\n\n        local.jsonCopy = function (jsonObj) {\n        /*\n         * this function will return a deep-copy of the jsonObj\n         */\n            return jsonObj === undefined\n                ? undefined\n                : JSON.parse(JSON.stringify(jsonObj));\n        };\n\n        local.jsonStringifyOrdered = function (jsonObj, replacer, space) {\n        /*\n         * this function will JSON.stringify the jsonObj,\n         * with object-keys sorted and circular-references removed\n         */\n            var circularList, stringify, tmp;\n            stringify = function (jsonObj) {\n            /*\n             * this function will recursively JSON.stringify the jsonObj,\n             * with object-keys sorted and circular-references removed\n             */\n                // if jsonObj is not an object or function, then JSON.stringify as normal\n                if (!(jsonObj &&\n                        typeof jsonObj === 'object' &&\n                        typeof jsonObj.toJSON !== 'function')) {\n                    return JSON.stringify(jsonObj);\n                }\n                // ignore circular-reference\n                if (circularList.indexOf(jsonObj) >= 0) {\n                    return;\n                }\n                circularList.push(jsonObj);\n                // if jsonObj is an array, then recurse its jsonObjs\n                if (Array.isArray(jsonObj)) {\n                    return '[' + jsonObj.map(function (jsonObj) {\n                        // recurse\n                        tmp = stringify(jsonObj);\n                        return typeof tmp === 'string'\n                            ? tmp\n                            : 'null';\n                    }).join(',') + ']';\n                }\n                // if jsonObj is not an array, then recurse its items with object-keys sorted\n                return '{' + Object.keys(jsonObj)\n                    // sort object-keys\n                    .sort()\n                    .map(function (key) {\n                        // recurse\n                        tmp = stringify(jsonObj[key]);\n                        if (typeof tmp === 'string') {\n                            return JSON.stringify(key) + ':' + tmp;\n                        }\n                    })\n                    .filter(function (jsonObj) {\n                        return typeof jsonObj === 'string';\n                    })\n                    .join(',') + '}';\n            };\n            circularList = [];\n            // try to derefernce all properties in jsonObj\n            (function () {\n                try {\n                    jsonObj = JSON.parse(JSON.stringify(jsonObj));\n                } catch (ignore) {\n                }\n            }());\n            return JSON.stringify(typeof jsonObj === 'object' && jsonObj\n                // recurse\n                ? JSON.parse(stringify(jsonObj))\n                : jsonObj, replacer, space);\n        };\n\n        local.listShuffle = function (list) {\n        /*\n         * https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n         * this function will inplace shuffle the list, via fisher-yates algorithm\n         */\n            var ii, random, swap;\n            for (ii = list.length - 1; ii > 0; ii -= 1) {\n                // coerce to finite integer\n                random = (Math.random() * (ii + 1)) | 0;\n                swap = list[ii];\n                list[ii] = list[random];\n                list[random] = swap;\n            }\n            return list;\n        };\n\n        local.nop = function () {\n        /*\n         * this function will do nothing\n         */\n            return;\n        };\n\n        local.normalizeValue = function (type, value, valueDefault) {\n        /*\n         * this function will normalize the value by type\n         */\n            switch (type) {\n            case 'list':\n                return Array.isArray(value)\n                    ? value\n                    : valueDefault || [];\n            case 'number':\n                return Number(value) || valueDefault || 0;\n            case 'string':\n                return typeof value === 'string'\n                    ? value\n                    : valueDefault || '';\n            }\n        };\n\n        local.objectSetOverride = function (arg, overrides, depth, env) {\n        /*\n         * this function will recursively set overrides for items in the arg\n         */\n            arg = arg || {};\n            env = env || (typeof process === 'object' && process.env) || {};\n            overrides = overrides || {};\n            Object.keys(overrides).forEach(function (key) {\n                var arg2, overrides2;\n                arg2 = arg[key];\n                overrides2 = overrides[key];\n                if (overrides2 === undefined) {\n                    return;\n                }\n                // if both arg2 and overrides2 are non-null and non-array objects,\n                // then recurse with arg2 and overrides2\n                if (depth > 1 &&\n                        // arg2 is a non-null and non-array object\n                        typeof arg2 === 'object' && arg2 && !Array.isArray(arg2) &&\n                        // overrides2 is a non-null and non-array object\n                        typeof overrides2 === 'object' && overrides2 &&\n                        !Array.isArray(overrides2)) {\n                    local.objectSetOverride(arg2, overrides2, depth - 1, env);\n                    return;\n                }\n                // else set arg[key] with overrides[key]\n                arg[key] = arg === env\n                    // if arg is env, then overrides falsey value with empty string\n                    ? overrides2 || ''\n                    : overrides2;\n            });\n            return arg;\n        };\n\n        local.onErrorDefault = function (error) {\n        /*\n         * this function will if error exists, then print error.stack to stderr\n         */\n            if (error && !local.global.__coverage__) {\n                console.error(error);\n            }\n        };\n\n        local.onErrorWithStack = function (onError) {\n        /*\n         * this function will create a new callback that will call onError,\n         * and append the current stack to any error\n         */\n            var stack;\n            stack = new Error().stack.replace((/(.*?)\\n.*?$/m), '$1');\n            return function (error, data, meta) {\n                if (error &&\n                        error !== local.errorDefault &&\n                        String(error.stack).indexOf(stack.split('\\n')[2]) < 0) {\n                    // append the current stack to error.stack\n                    error.stack += '\\n' + stack;\n                }\n                onError(error, data, meta);\n            };\n        };\n\n        local.onParallel = function (onError, onEach, onRetry) {\n        /*\n         * this function will create a function that will\n         * 1. run async tasks in parallel\n         * 2. if counter === 0 or error occurred, then call onError with error\n         */\n            var onParallel;\n            onError = local.onErrorWithStack(onError);\n            onEach = onEach || local.nop;\n            onRetry = onRetry || local.nop;\n            onParallel = function (error, data) {\n                if (onRetry(error, data)) {\n                    return;\n                }\n                // decrement counter\n                onParallel.counter -= 1;\n                // validate counter\n                local.assert(\n                    onParallel.counter >= 0 || error || onParallel.error,\n                    'invalid onParallel.counter = ' + onParallel.counter\n                );\n                // ensure onError is run only once\n                if (onParallel.counter < 0) {\n                    return;\n                }\n                // handle error\n                if (error) {\n                    onParallel.error = error;\n                    // ensure counter <= 0\n                    onParallel.counter = -Math.abs(onParallel.counter);\n                }\n                // call onError when isDone\n                if (onParallel.counter <= 0) {\n                    onError(error, data);\n                    return;\n                }\n                onEach();\n            };\n            // init counter\n            onParallel.counter = 0;\n            // return callback\n            return onParallel;\n        };\n\n        local.replStart = function () {\n        /*\n         * this function will start the repl-debugger\n         */\n            /*jslint evil: true*/\n            var self;\n            if (global.utility2_serverRepl1) {\n                return;\n            }\n            // start replServer\n            self = global.utility2_serverRepl1 = require('repl').start({ useGlobal: true });\n            self.nop = function () {\n            /*\n             * this function will do nothing\n             */\n                return;\n            };\n            self.onError = function (error) {\n            /*\n             * this function will debug any repl-error\n             */\n                // debug error\n                global.utility2_debugReplError = error;\n                console.error(error);\n            };\n            // save repl eval function\n            self.evalDefault = self.eval;\n            // hook custom repl eval function\n            self.eval = function (script, context, file, onError) {\n                var match, onError2;\n                match = (/^(\\S+)(.*?)\\n/).exec(script) || {};\n                onError2 = function (error, data) {\n                    // debug error\n                    global.utility2_debugReplError = error || global.utility2_debugReplError;\n                    onError(error, data);\n                };\n                switch (match[1]) {\n                // syntax sugar to run async shell command\n                case '$':\n                    switch (match[2]) {\n                    // syntax sugar to run git diff\n                    case ' git diff':\n                        match[2] = ' git diff --color | cat';\n                        break;\n                    // syntax sugar to run git log\n                    case ' git log':\n                        match[2] = ' git log -n 4 | cat';\n                        break;\n                    }\n                    // run async shell command\n                    require('child_process').spawn(match[2], {\n                        shell: true,\n                        stdio: ['ignore', 1, 2]\n                    })\n                        // on shell exit, print return prompt\n                        .on('exit', function (exitCode) {\n                            console.error('exit-code ' + exitCode);\n                            self.evalDefault(\n                                '\\n',\n                                context,\n                                file,\n                                onError2\n                            );\n                        });\n                    script = '\\n';\n                    break;\n                // syntax sugar to grep current dir\n                case 'grep':\n                    // run async shell command\n                    require('child_process').spawn('find . -type f | grep -v ' +\n/* jslint-ignore-begin */\n'\"\\\n/\\\\.\\\\|\\\\(\\\\b\\\\|_\\\\)\\\\(\\\\.\\\\d\\\\|\\\narchive\\\\|artifact\\\\|\\\nbower_component\\\\|build\\\\|\\\ncoverage\\\\|\\\ndoc\\\\|\\\nexternal\\\\|\\\nfixture\\\\|\\\ngit_module\\\\|\\\njquery\\\\|\\\nlog\\\\|\\\nmin\\\\|mock\\\\|\\\nnode_module\\\\|\\\nrollup\\\\|\\\nswp\\\\|\\\ntmp\\\\|\\\nvendor\\\\)s\\\\{0,1\\\\}\\\\(\\\\b\\\\|_\\\\)\\\n\" ' +\n/* jslint-ignore-end */\n                            '| tr \"\\\\n\" \"\\\\000\" | xargs -0 grep -in \"' +\n                            match[2].trim() + '\"', { shell: true, stdio: ['ignore', 1, 2] })\n                        // on shell exit, print return prompt\n                        .on('exit', function (exitCode) {\n                            console.error('exit-code ' + exitCode);\n                            self.evalDefault(\n                                '\\n',\n                                context,\n                                file,\n                                onError2\n                            );\n                        });\n                    script = '\\n';\n                    break;\n                // syntax sugar to list object's keys, sorted by item-type\n                case 'keys':\n                    script = 'console.error(Object.keys(' + match[2] +\n                        ').map(function (key) {' +\n                        'return typeof ' + match[2] + '[key] + \" \" + key + \"\\\\n\";' +\n                        '}).sort().join(\"\") + Object.keys(' + match[2] + ').length)\\n';\n                    break;\n                // syntax sugar to print stringified arg\n                case 'print':\n                    script = 'console.error(String(' + match[2] + '))\\n';\n                    break;\n                }\n                // eval the script\n                self.evalDefault(script, context, file, onError2);\n            };\n            self.socket = { end: self.nop, on: self.nop, write: self.nop };\n            // init process.stdout\n            process.stdout._writeDefault = process.stdout._writeDefault ||\n                process.stdout._write;\n            process.stdout._write = function (chunk, encoding, callback) {\n                process.stdout._writeDefault(chunk, encoding, callback);\n                // coverage-hack - ignore else-statement\n                self.nop(self.socket.writable && (function () {\n                    self.socket.write(chunk, encoding);\n                }()));\n            };\n            // start tcp-server\n            global.utility2_serverReplTcp1 = require('net').createServer(function (socket) {\n                // init socket\n                self.socket = socket;\n                self.socket.on('data', self.write.bind(self));\n                self.socket.on('error', self.onError);\n                self.socket.setKeepAlive(true);\n            });\n            // coverage-hack - ignore else-statement\n            self.nop(process.env.PORT_REPL && (function () {\n                console.error('repl-server listening on tcp-port ' + process.env.PORT_REPL);\n                global.utility2_serverReplTcp1.listen(process.env.PORT_REPL);\n            }()));\n        };\n\n        local.setTimeoutOnError = function (onError, timeout, error, data) {\n        /*\n         * this function will async-call onError\n         */\n            if (typeof onError === 'function') {\n                setTimeout(function () {\n                    onError(error, data);\n                }, timeout);\n            }\n            return data;\n        };\n    }());\n\n\n\n    // run shared js-env code - lib.storage.js\n    (function (local) {\n        var child_process,\n            clear,\n            defer,\n            deferList,\n            fs,\n            getItem,\n            init,\n            keys,\n            length,\n            modeJs,\n            os,\n            removeItem,\n            setItem,\n            storage,\n            storageDir;\n\n        // init modeJs\n        modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        storageDir = 'tmp/storage.' + (local.modeJs === 'browser'\n            ? 'undefined'\n            : process.env.NODE_ENV);\n        switch (modeJs) {\n        case 'node':\n            // require modules\n            child_process = require('child_process');\n            fs = require('fs');\n            os = require('os');\n            break;\n        }\n\n        clear = function (onError) {\n        /*\n         * this function will clear storage\n         */\n            defer({ action: 'clear' }, onError);\n        };\n\n        defer = function (options, onError) {\n        /*\n         * this function will defer options.action until storage is ready\n         */\n            var data, isDone, objectStore, onError2, request, tmp;\n            onError = onError || function (error) {\n                // validate no error occurred\n                local.assert(!error, error);\n            };\n            if (!storage) {\n                deferList.push(function () {\n                    defer(options, onError);\n                });\n                init();\n                return;\n            }\n            switch (modeJs) {\n            case 'browser':\n                onError2 = function () {\n                    /* istanbul ignore next */\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    onError(\n                        request && (request.error || request.transaction.error),\n                        data || request.result || ''\n                    );\n                };\n                switch (options.action) {\n                case 'clear':\n                case 'removeItem':\n                case 'setItem':\n                    objectStore = storage\n                        .transaction(storageDir, 'readwrite')\n                        .objectStore(storageDir);\n                    break;\n                default:\n                    objectStore = storage\n                        .transaction(storageDir, 'readonly')\n                        .objectStore(storageDir);\n                }\n                switch (options.action) {\n                case 'clear':\n                    request = objectStore.clear();\n                    break;\n                case 'getItem':\n                    request = objectStore.get(String(options.key));\n                    break;\n                case 'keys':\n                    data = [];\n                    request = objectStore.openCursor();\n                    request.onsuccess = function () {\n                        if (!request.result) {\n                            onError2();\n                            return;\n                        }\n                        data.push(request.result.key);\n                        request.result.continue();\n                    };\n                    break;\n                case 'length':\n                    request = objectStore.count();\n                    break;\n                case 'removeItem':\n                    request = objectStore.delete(String(options.key));\n                    break;\n                case 'setItem':\n                    request = objectStore.put(options.value, String(options.key));\n                    break;\n                }\n                ['onabort', 'onerror', 'onsuccess'].forEach(function (handler) {\n                    request[handler] = request[handler] || onError2;\n                });\n                // debug request\n                local._debugStorageRequest = request;\n                break;\n            case 'node':\n                switch (options.action) {\n                case 'clear':\n                    child_process.spawnSync('rm -f ' + storage + '/*', {\n                        shell: true,\n                        stdio: ['ignore', 1, 2]\n                    });\n                    setTimeout(onError);\n                    break;\n                case 'getItem':\n                    fs.readFile(\n                        storage + '/' + encodeURIComponent(String(options.key)),\n                        'utf8',\n                        // ignore error\n                        function (error, data) {\n                            onError(error && null, data || '');\n                        }\n                    );\n                    break;\n                case 'keys':\n                    fs.readdir(storage, function (error, data) {\n                        onError(error, data && data.map(decodeURIComponent));\n                    });\n                    break;\n                case 'length':\n                    fs.readdir(storage, function (error, data) {\n                        onError(error, data && data.length);\n                    });\n                    break;\n                case 'removeItem':\n                    fs.unlink(\n                        storage + '/' + encodeURIComponent(String(options.key)),\n                        // ignore error\n                        function () {\n                            onError();\n                        }\n                    );\n                    break;\n                case 'setItem':\n                    tmp = os.tmpdir() + '/' + Date.now() + Math.random();\n                    // save to tmp\n                    fs.writeFile(tmp, options.value, function (error) {\n                        // validate no error occurred\n                        local.assert(!error, error);\n                        // rename tmp to key\n                        fs.rename(\n                            tmp,\n                            storage + '/' + encodeURIComponent(String(options.key)),\n                            onError\n                        );\n                    });\n                    break;\n                }\n                break;\n            }\n        };\n\n        deferList = [];\n\n        getItem = function (key, onError) {\n        /*\n         * this function will get the item with the given key from storage\n         */\n            defer({ action: 'getItem', key: key }, onError);\n        };\n\n        init = function () {\n        /*\n         * this function will init storage\n         */\n            var onError, request;\n            onError = function (error) {\n                // validate no error occurred\n                local.assert(!error, error);\n                if (modeJs === 'browser') {\n                    storage = window[storageDir];\n                }\n                while (deferList.length) {\n                    deferList.shift()();\n                }\n            };\n            if (modeJs === 'browser') {\n                storage = window[storageDir];\n            }\n            if (storage) {\n                onError();\n                return;\n            }\n            switch (modeJs) {\n            case 'browser':\n                // init indexedDB\n                try {\n                    request = window.indexedDB.open(storageDir);\n                    // debug request\n                    local._debugStorageRequestIndexedDB = request;\n                    request.onerror = onError;\n                    request.onsuccess = function () {\n                        window[storageDir] = request.result;\n                        onError();\n                    };\n                    request.onupgradeneeded = function () {\n                        if (!request.result.objectStoreNames.contains(storageDir)) {\n                            request.result.createObjectStore(storageDir);\n                        }\n                    };\n                } catch (ignore) {\n                }\n                break;\n            case 'node':\n                // mkdirp storage\n                storage = storageDir;\n                child_process.spawnSync(\n                    'mkdir',\n                    ['-p', storage],\n                    { stdio: ['ignore', 1, 2] }\n                );\n                onError();\n                break;\n            }\n        };\n\n        keys = function (onError) {\n        /*\n         * this function will get all the keys in storage\n         */\n            defer({ action: 'keys' }, onError);\n        };\n\n        length = function (onError) {\n        /*\n         * this function will get the number of items in storage\n         */\n            defer({ action: 'length' }, onError);\n        };\n\n        removeItem = function (key, onError) {\n        /*\n         * this function will remove the item with the given key from storage\n         */\n            defer({ action: 'removeItem', key: key }, onError);\n        };\n\n        setItem = function (key, value, onError) {\n        /*\n         * this function will set the item with the given key and value to storage\n         */\n            defer({ action: 'setItem', key: key, value: value }, onError);\n        };\n\n        // init local\n        local.storage = storage;\n        local.storageClear = clear;\n        local.storageDefer = defer;\n        local.storageDeferList = deferList;\n        local.storageDir = storageDir;\n        local.storageGetItem = getItem;\n        local.storageInit = init;\n        local.storageKeys = keys;\n        local.storageLength = length;\n        local.storageRemoveItem = removeItem;\n        local.storageSetItem = setItem;\n    }(local));\n\n\n\n    // run shared js-env code - lib.dbTable.js\n    (function () {\n        local._DbTable = function (options) {\n        /*\n         * this function will create a dbTable\n         */\n            options = local.objectSetOverride(options);\n            this.name = String(options.name);\n            // register dbTable in dbTableDict\n            local.dbTableDict[this.name] = this;\n            this.dbRowList = [];\n            this.isDirty = null;\n            this.idIndexList = [{ isInteger: false, name: '_id', dict: {} }];\n            this.onSaveList = [];\n            this.sizeLimit = options.sizeLimit || 0;\n        };\n\n        local._DbTable.prototype._cleanup = function () {\n        /*\n         * this function will cleanup soft-deleted records from the dbTable\n         */\n            var dbRow, ii, list;\n            if (!this.isDirty && this.dbRowList.length <= this.sizeLimit) {\n                return;\n            }\n            this.isDirty = null;\n            // cleanup dbRowList\n            list = this.dbRowList;\n            this.dbRowList = [];\n            // optimization - for-loop\n            for (ii = 0; ii < list.length; ii += 1) {\n                dbRow = list[ii];\n                // cleanup isRemoved\n                if (!dbRow.$meta.isRemoved) {\n                    this.dbRowList.push(dbRow);\n                }\n            }\n            if (this.sizeLimit && this.dbRowList.length >= 1.5 * this.sizeLimit) {\n                this.dbRowList = this._crudGetManyByQuery(\n                    {},\n                    this.sortDefault,\n                    0,\n                    this.sizeLimit\n                );\n            }\n        };\n\n        local._DbTable.prototype._crudGetManyByQuery = function (\n            query,\n            sort,\n            skip,\n            limit,\n            shuffle\n        ) {\n        /*\n         * this function will get the dbRow's in the dbTable,\n         * with the given query, sort, skip, and limit\n         */\n            var ii, result;\n            result = this.dbRowList;\n            // get by query\n            if (result.length && query && Object.keys(query).length) {\n                result = local.dbRowListGetManyByQuery(this.dbRowList, query);\n            }\n            // sort\n            local.normalizeValue('list', sort).forEach(function (element) {\n                // bug-workaround - v8 does not have stable-sort\n                // optimization - for-loop\n                for (ii = 0; ii < result.length; ii += 1) {\n                    result[ii].$meta.ii = ii;\n                }\n                if (element.isDescending) {\n                    result.sort(function (aa, bb) {\n                        return -local.sortCompare(\n                            local.dbRowGetItem(aa, element.fieldName),\n                            local.dbRowGetItem(bb, element.fieldName),\n                            aa.$meta.ii,\n                            bb.$meta.ii\n                        );\n                    });\n                } else {\n                    result.sort(function (aa, bb) {\n                        return local.sortCompare(\n                            local.dbRowGetItem(aa, element.fieldName),\n                            local.dbRowGetItem(bb, element.fieldName),\n                            aa.$meta.ii,\n                            bb.$meta.ii\n                        );\n                    });\n                }\n            });\n            // skip\n            result = result.slice(skip || 0);\n            // shuffle\n            ((shuffle && local.listShuffle) || local.nop)(result);\n            // limit\n            result = result.slice(0, limit || Infinity);\n            return result;\n        };\n\n        local._DbTable.prototype._crudGetOneById = function (idDict) {\n        /*\n         * this function will get the dbRow in the dbTable with the given idDict\n         */\n            var id, result;\n            idDict = local.objectSetOverride(idDict);\n            result = null;\n            this.idIndexList.some(function (idIndex) {\n                id = idDict[idIndex.name];\n                // optimization - hasOwnProperty\n                if (idIndex.dict.hasOwnProperty(id)) {\n                    result = idIndex.dict[id];\n                    return result;\n                }\n            });\n            return result;\n        };\n\n        local._DbTable.prototype._crudRemoveOneById = function (idDict, circularList) {\n        /*\n         * this function will remove the dbRow from the dbTable with the given idDict\n         */\n            var id, result, self;\n            if (!idDict) {\n                return null;\n            }\n            self = this;\n            circularList = circularList || [idDict];\n            result = null;\n            self.idIndexList.forEach(function (idIndex) {\n                id = idDict[idIndex.name];\n                // optimization - hasOwnProperty\n                if (!idIndex.dict.hasOwnProperty(id)) {\n                    return;\n                }\n                result = idIndex.dict[id];\n                delete idIndex.dict[id];\n                // optimization - soft-delete\n                result.$meta.isRemoved = true;\n                self.isDirty = true;\n                if (circularList.indexOf(result) >= 0) {\n                    return;\n                }\n                circularList.push(result);\n                // recurse\n                self._crudRemoveOneById(result, circularList);\n            });\n            self.save();\n            return result;\n        };\n\n        local._DbTable.prototype._crudSetOneById = function (dbRow) {\n        /*\n         * this function will set the dbRow into the dbTable with the given dbRow._id\n         * WARNING - existing dbRow with conflicting dbRow._id will be removed\n         */\n            var existing, id, normalize, timeNow;\n            normalize = function (dbRow) {\n            /*\n             * this function will recursively normalize dbRow\n             */\n                if (typeof dbRow === 'object' && dbRow) {\n                    Object.keys(dbRow).forEach(function (key) {\n                        // remove invalid property\n                        if (key[0] === '$' || key.indexOf('.') >= 0 || dbRow[key] === null) {\n                            // optimization - soft-delete\n                            dbRow[key] = undefined;\n                            return;\n                        }\n                        // recurse\n                        normalize(dbRow[key]);\n                    });\n                }\n            };\n            dbRow = local.jsonCopy(typeof dbRow === 'object' && dbRow\n                ? dbRow\n                : {});\n            // update timestamp\n            timeNow = new Date().toISOString();\n            dbRow._timeCreated = dbRow._timeCreated || timeNow;\n            if (!local.modeImport) {\n                dbRow._timeUpdated = timeNow;\n            }\n            // normalize\n            normalize(dbRow);\n            dbRow = local.jsonCopy(dbRow);\n            // remove existing dbRow\n            existing = this._crudRemoveOneById(dbRow) || dbRow;\n            // init meta\n            dbRow.$meta = { isRemoved: null };\n            this.idIndexList.forEach(function (idIndex) {\n                // auto-set id\n                id = local.dbRowSetId(existing, idIndex);\n                // copy id from existing to dbRow\n                dbRow[idIndex.name] = id;\n                // set dbRow\n                idIndex.dict[id] = dbRow;\n            });\n            // update dbRowList\n            this.dbRowList.push(dbRow);\n            this.save();\n            return dbRow;\n        };\n\n        local._DbTable.prototype._crudUpdateOneById = function (dbRow) {\n        /*\n         * this function will update the dbRow in the dbTable,\n         * if it exists with the given dbRow._id\n         * WARNING\n         * existing dbRow's with conflicting unique-keys (besides the one being updated)\n         * will be removed\n         */\n            var id, result;\n            dbRow = local.jsonCopy(local.objectSetOverride(dbRow));\n            result = null;\n            this.idIndexList.some(function (idIndex) {\n                id = dbRow[idIndex.name];\n                // optimization - hasOwnProperty\n                if (idIndex.dict.hasOwnProperty(id)) {\n                    result = idIndex.dict[id];\n                    return true;\n                }\n            });\n            result = result || {};\n            // remove existing dbRow\n            this._crudRemoveOneById(result);\n            // update dbRow\n            dbRow._timeCreated = undefined;\n            local.objectSetOverride(result, dbRow, 10);\n            // replace dbRow\n            result = this._crudSetOneById(result);\n            return result;\n        };\n\n        local._DbTable.prototype.crudCountAll = function (onError) {\n        /*\n         * this function will count all of dbRow's in the dbTable\n         */\n            this._cleanup();\n            return local.setTimeoutOnError(onError, 0, null, this.dbRowList.length);\n        };\n\n        local._DbTable.prototype.crudCountManyByQuery = function (query, onError) {\n        /*\n         * this function will count the number of dbRow's in the dbTable with the given query\n         */\n            this._cleanup();\n            return local.setTimeoutOnError(\n                onError,\n                0,\n                null,\n                this._crudGetManyByQuery(query).length\n            );\n        };\n\n        local._DbTable.prototype.crudGetManyById = function (idDictList, onError) {\n        /*\n         * this function will get the dbRow's in the dbTable with the given idDictList\n         */\n            var self;\n            this._cleanup();\n            self = this;\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                local.normalizeValue('list', idDictList).map(function (idDict) {\n                    return self._crudGetOneById(idDict);\n                })\n            ));\n        };\n\n        local._DbTable.prototype.crudGetManyByQuery = function (options, onError) {\n        /*\n         * this function will get the dbRow's in the dbTable with the given options.query\n         */\n            this._cleanup();\n            options = local.objectSetOverride(options);\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                this._crudGetManyByQuery(\n                    options.query,\n                    options.sort || this.sortDefault,\n                    options.skip,\n                    options.limit,\n                    options.shuffle\n                ),\n                options.fieldList\n            ));\n        };\n\n        local._DbTable.prototype.crudGetOneById = function (idDict, onError) {\n        /*\n         * this function will get the dbRow in the dbTable with the given idDict\n         */\n            this._cleanup();\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                this._crudGetOneById(idDict)\n            ));\n        };\n\n        local._DbTable.prototype.crudGetOneByQuery = function (query, onError) {\n        /*\n         * this function will get the dbRow in the dbTable with the given query\n         */\n            var ii, result;\n            this._cleanup();\n            // optimization - for-loop\n            for (ii = 0; ii < this.dbRowList.length; ii += 1) {\n                result = local.dbRowListGetManyByQuery([this.dbRowList[ii]], query)[0];\n                if (result) {\n                    break;\n                }\n            }\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(result));\n        };\n\n        local._DbTable.prototype.crudGetOneByRandom = function (onError) {\n        /*\n         * this function will get a random dbRow in the dbTable\n         */\n            this._cleanup();\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                this.dbRowList[Math.floor(Math.random() * this.dbRowList.length)]\n            ));\n        };\n\n        local._DbTable.prototype.crudRemoveAll = function (onError) {\n        /*\n         * this function will remove all of the dbRow's from the dbTable\n         */\n            var idIndexList;\n            // save idIndexList\n            idIndexList = this.idIndexList;\n            // reset dbTable\n            local._DbTable.call(this, this);\n            // restore idIndexList\n            local.dbTableCreateOne({\n                name: this.name,\n                idIndexCreateList: idIndexList\n            }, onError);\n        };\n\n        local._DbTable.prototype.crudRemoveManyById = function (idDictList, onError) {\n        /*\n         * this function will remove the dbRow's from the dbTable with the given idDictList\n         */\n            var self;\n            self = this;\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                local.normalizeValue('list', idDictList).map(function (dbRow) {\n                    return self._crudRemoveOneById(dbRow);\n                })\n            ));\n        };\n\n        local._DbTable.prototype.crudRemoveManyByQuery = function (query, onError) {\n        /*\n         * this function will remove the dbRow's from the dbTable with the given query\n         */\n            var self;\n            self = this;\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                self._crudGetManyByQuery(query).map(function (dbRow) {\n                    return self._crudRemoveOneById(dbRow);\n                })\n            ));\n        };\n\n        local._DbTable.prototype.crudRemoveOneById = function (idDict, onError) {\n        /*\n         * this function will remove the dbRow from the dbTable with the given idDict\n         */\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                this._crudRemoveOneById(idDict)\n            ));\n        };\n\n        local._DbTable.prototype.crudSetManyById = function (dbRowList, onError) {\n        /*\n         * this function will set the dbRowList into the dbTable\n         */\n            var self;\n            self = this;\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                local.normalizeValue('list', dbRowList).map(function (dbRow) {\n                    return self._crudSetOneById(dbRow);\n                })\n            ));\n        };\n\n        local._DbTable.prototype.crudSetOneById = function (dbRow, onError) {\n        /*\n         * this function will set the dbRow into the dbTable with the given dbRow._id\n         */\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                this._crudSetOneById(dbRow)\n            ));\n        };\n\n        local._DbTable.prototype.crudUpdateManyById = function (dbRowList, onError) {\n        /*\n         * this function will update the dbRowList in the dbTable,\n         * if they exist with the given dbRow._id's\n         */\n            var self;\n            self = this;\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                local.normalizeValue('list', dbRowList).map(function (dbRow) {\n                    return self._crudUpdateOneById(dbRow);\n                })\n            ));\n        };\n\n        local._DbTable.prototype.crudUpdateManyByQuery = function (query, dbRow, onError) {\n        /*\n         * this function will update the dbRow's in the dbTable with the given query\n         */\n            var result, self, tmp;\n            self = this;\n            tmp = local.jsonCopy(local.objectSetOverride(dbRow));\n            result = self._crudGetManyByQuery(query).map(function (dbRow) {\n                tmp._id = dbRow._id;\n                return self._crudUpdateOneById(tmp);\n            });\n            return local.setTimeoutOnError(onError, 0, null, result);\n        };\n\n        local._DbTable.prototype.crudUpdateOneById = function (dbRow, onError) {\n        /*\n         * this function will update the dbRow in the dbTable,\n         * if it exists with the given dbRow._id\n         */\n            return local.setTimeoutOnError(onError, 0, null, local.dbRowProject(\n                this._crudUpdateOneById(dbRow)\n            ));\n        };\n\n        local._DbTable.prototype.drop = function (onError) {\n        /*\n         * this function will drop the dbTable\n         */\n            console.error('dropping dbTable ' + this.name + ' ...');\n            // cancel pending save\n            this.timerSave = null;\n            while (this.onSaveList.length) {\n                this.onSaveList.shift()();\n            }\n            // reset dbTable\n            local._DbTable.call(this, this);\n            // clear persistence\n            local.storageRemoveItem('dbTable.' + this.name + '.json', onError);\n        };\n\n        local._DbTable.prototype.export = function (onError) {\n        /*\n         * this function will export the db\n         */\n            var result, self;\n            this._cleanup();\n            self = this;\n            result = '';\n            self.idIndexList.forEach(function (idIndex) {\n                result += self.name + ' idIndexCreate ' + JSON.stringify({\n                    isInteger: idIndex.isInteger,\n                    name: idIndex.name\n                }) + '\\n';\n            });\n            result += self.name + ' sizeLimit ' + self.sizeLimit + '\\n';\n            result += self.name + ' sortDefault ' + JSON.stringify(self.sortDefault) + '\\n';\n            self.crudGetManyByQuery({}).forEach(function (dbRow) {\n                result += self.name + ' dbRowSet ' + JSON.stringify(dbRow) + '\\n';\n            });\n            return local.setTimeoutOnError(onError, 0, null, result.trim());\n        };\n\n        local._DbTable.prototype.idIndexCreate = function (options, onError) {\n        /*\n         * this function will create an idIndex with the given options.name\n         */\n            var dbRow, idIndex, ii, name;\n            options = local.objectSetOverride(options);\n            name = String(options.name);\n            // disallow idIndex with dot-name\n            if (name.indexOf('.') >= 0 || name === '_id') {\n                return local.setTimeoutOnError(onError);\n            }\n            // remove existing idIndex\n            this.idIndexRemove(options);\n            // init idIndex\n            idIndex = {\n                dict: {},\n                isInteger: !!options.isInteger,\n                name: name\n            };\n            this.idIndexList.push(idIndex);\n            // populate idIndex with dbRowList\n            // optimization - for-loop\n            for (ii = 0; ii < this.dbRowList.length; ii += 1) {\n                dbRow = this.dbRowList[ii];\n                // auto-set id\n                if (!dbRow.$meta.isRemoved) {\n                    idIndex.dict[local.dbRowSetId(dbRow, idIndex)] = dbRow;\n                }\n            }\n            this.save();\n            return local.setTimeoutOnError(onError);\n        };\n\n        local._DbTable.prototype.idIndexRemove = function (options, onError) {\n        /*\n         * this function will remove the idIndex with the given options.name\n         */\n            var name;\n            options = local.objectSetOverride(options);\n            name = String(options.name);\n            this.idIndexList = this.idIndexList.filter(function (idIndex) {\n                return idIndex.name !== name || idIndex.name === '_id';\n            });\n            this.save();\n            return local.setTimeoutOnError(onError);\n        };\n\n        local._DbTable.prototype.save = function (onError) {\n        /*\n         * this function will save the dbTable to storage\n         */\n            var self;\n            self = this;\n            if (local.modeImport) {\n                return;\n            }\n            if (onError) {\n                self.onSaveList.push(onError);\n            }\n            // throttle storage-writes to once every 1000 ms\n            self.timerSave = self.timerSave || setTimeout(function () {\n                self.timerSave = null;\n                local.storageSetItem('dbTable.' + self.name + '.json', self.export(), function (\n                    error\n                ) {\n                    while (self.onSaveList.length) {\n                        self.onSaveList.shift()(error);\n                    }\n                });\n            }, 1000);\n        };\n\n        local.dbCrudRemoveAll = function (onError) {\n        /*\n         * this function will remove all dbRow's from the db\n         */\n            var onParallel;\n            onParallel = local.onParallel(function (error) {\n                local.setTimeoutOnError(onError, 0, error);\n            });\n            onParallel.counter += 1;\n            Object.keys(local.dbTableDict).forEach(function (key) {\n                onParallel.counter += 1;\n                local.dbTableDict[key].crudRemoveAll(onParallel);\n            });\n            onParallel();\n        };\n\n        local.dbDrop = function (onError) {\n        /*\n         * this function will drop the db\n         */\n            var onParallel;\n            onParallel = local.onParallel(function (error) {\n                local.setTimeoutOnError(onError, 0, error);\n            });\n            onParallel.counter += 1;\n            onParallel.counter += 1;\n            local.storageClear(onParallel);\n            Object.keys(local.dbTableDict).forEach(function (key) {\n                onParallel.counter += 1;\n                local.dbTableDict[key].drop(onParallel);\n            });\n            onParallel();\n        };\n\n        local.dbExport = function (onError) {\n        /*\n         * this function will export the db as serialized text\n         */\n            var result;\n            result = '';\n            Object.keys(local.dbTableDict).forEach(function (key) {\n                result += local.dbTableDict[key].export();\n                result += '\\n\\n';\n            });\n            return local.setTimeoutOnError(onError, 0, null, result.trim());\n        };\n\n        local.dbImport = function (text, onError) {\n        /*\n         * this function will import the serialized text into the db\n         */\n            var dbTable;\n            local.modeImport = true;\n            setTimeout(function () {\n                local.modeImport = null;\n            });\n            text.replace((/^(\\w\\S*?) (\\S+?) (\\S.*?)$/gm), function (\n                match0,\n                match1,\n                match2,\n                match3\n            ) {\n                // jslint-hack\n                local.nop(match0);\n                switch (match2) {\n                case 'dbRowSet':\n                    dbTable = local.dbTableCreateOne({ isLoaded: true, name: match1 });\n                    dbTable.crudSetOneById(JSON.parse(match3));\n                    break;\n                case 'idIndexCreate':\n                    dbTable = local.dbTableCreateOne({ isLoaded: true, name: match1 });\n                    dbTable.idIndexCreate(JSON.parse(match3));\n                    break;\n                case 'sizeLimit':\n                    dbTable = local.dbTableCreateOne({ isLoaded: true, name: match1 });\n                    dbTable.sizeLimit = JSON.parse(match3);\n                    break;\n                case 'sortDefault':\n                    dbTable = local.dbTableCreateOne({ isLoaded: true, name: match1 });\n                    break;\n                default:\n                    local.onErrorDefault(new Error('dbImport - invalid operation - ' + match0));\n                }\n            });\n            local.modeImport = null;\n            return local.setTimeoutOnError(onError);\n        };\n\n        local.dbLoad = function (onError) {\n        /*\n         * this function will load the db from storage\n         */\n            var onParallel;\n            onParallel = local.onParallel(function (error) {\n                local.setTimeoutOnError(onError, 0, error);\n            });\n            local.storageKeys(function (error, data) {\n                onParallel.counter += 1;\n                onParallel.counter += 1;\n                onParallel(error);\n                local.normalizeValue('list', data)\n                    .filter(function (key) {\n                        return key.indexOf('dbTable.') === 0;\n                    })\n                    .forEach(function (key) {\n                        onParallel.counter += 1;\n                        local.storageGetItem(key, function (error, data) {\n                            onParallel.counter += 1;\n                            onParallel(error);\n                            local.dbImport(data, onParallel);\n                        });\n                    });\n                onParallel();\n            });\n        };\n\n        local.dbRowGetItem = function (dbRow, key) {\n        /*\n         * this function will get the item with the given key from dbRow\n         */\n            var ii, value;\n            value = dbRow;\n            key = String(key).split('.');\n            // optimization - for-loop\n            for (ii = 0; ii < key.length && typeof value === 'object' && value; ii += 1) {\n                value = value[key[ii]];\n            }\n            return value === undefined\n                ? null\n                : value;\n        };\n\n        local.dbRowListGetManyByOperator = function (dbRowList, fieldName, operator, bb, not) {\n        /*\n         * this function will get the dbRow's in dbRowList with the given operator\n         */\n            var ii, jj, result, fieldValue, test, typeof2;\n            result = [];\n            typeof2 = typeof bb;\n            if (bb && typeof2 === 'object') {\n                switch (operator) {\n                case '$in':\n                case '$nin':\n                case '$regex':\n                    break;\n                default:\n                    return result;\n                }\n            }\n            switch (operator) {\n            case '$eq':\n                test = function (aa, bb) {\n                    return aa === bb;\n                };\n                break;\n            case '$exists':\n                bb = !bb;\n                test = function (aa, bb) {\n                    return !((aa === null) ^ bb);\n                };\n                break;\n            case '$gt':\n                test = function (aa, bb, typeof1, typeof2) {\n                    return typeof1 === typeof2 && aa > bb;\n                };\n                break;\n            case '$gte':\n                test = function (aa, bb, typeof1, typeof2) {\n                    return typeof1 === typeof2 && aa >= bb;\n                };\n                break;\n            case '$in':\n                if (bb && typeof bb.indexOf === 'function') {\n                    if (typeof2 === 'string') {\n                        test = function (aa, bb, typeof1, typeof2) {\n                            return typeof1 === typeof2 && bb.indexOf(aa) >= 0;\n                        };\n                    } else {\n                        test = function (aa, bb) {\n                            return bb.indexOf(aa) >= 0;\n                        };\n                    }\n                }\n                break;\n            case '$lt':\n                test = function (aa, bb, typeof1, typeof2) {\n                    return typeof1 === typeof2 && aa < bb;\n                };\n                break;\n            case '$lte':\n                test = function (aa, bb, typeof1, typeof2) {\n                    return typeof1 === typeof2 && aa <= bb;\n                };\n                break;\n            case '$ne':\n                test = function (aa, bb) {\n                    return aa !== bb;\n                };\n                break;\n            case '$nin':\n                if (bb && typeof bb.indexOf === 'function') {\n                    if (typeof2 === 'string') {\n                        test = function (aa, bb, typeof1, typeof2) {\n                            return typeof1 === typeof2 && bb.indexOf(aa) < 0;\n                        };\n                    } else {\n                        test = function (aa, bb) {\n                            return bb.indexOf(aa) < 0;\n                        };\n                    }\n                }\n                break;\n            case '$regex':\n                if (bb && typeof bb.test === 'function') {\n                    test = function (aa, bb) {\n                        return bb.test(aa);\n                    };\n                }\n                break;\n            case '$typeof':\n                test = function (aa, bb, typeof1) {\n                    // jslint-hack\n                    local.nop(aa);\n                    return typeof1 === bb;\n                };\n                break;\n            }\n            if (!test) {\n                return result;\n            }\n            // optimization - for-loop\n            for (ii = dbRowList.length - 1; ii >= 0; ii -= 1) {\n                fieldValue = local.dbRowGetItem(dbRowList[ii], fieldName);\n                // normalize to list\n                if (!Array.isArray(fieldValue)) {\n                    fieldValue = [fieldValue];\n                }\n                // optimization - for-loop\n                for (jj = fieldValue.length - 1; jj >= 0; jj -= 1) {\n                    if (not ^ test(fieldValue[jj], bb, typeof fieldValue[jj], typeof2)) {\n                        result.push(dbRowList[ii]);\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n\n        local.dbRowListGetManyByQuery = function (dbRowList, query, fieldName, not) {\n        /*\n         * this function will get the dbRow's in dbRowList with the given query\n         */\n            var bb, dbRowDict, result;\n            // optimization - convert to boolean\n            not = !!not;\n            result = dbRowList;\n            if (!(typeof query === 'object' && query)) {\n                result = local.dbRowListGetManyByOperator(result, fieldName, '$eq', query, not);\n                return result;\n            }\n            Object.keys(query).some(function (key) {\n                bb = query[key];\n                switch (key) {\n                case '$not':\n                    key = fieldName;\n                    not = !not;\n                    break;\n                case '$or':\n                    if (!Array.isArray(bb)) {\n                        break;\n                    }\n                    dbRowDict = {};\n                    bb.forEach(function (query) {\n                        // recurse\n                        local.dbRowListGetManyByQuery(result, query).forEach(function (dbRow) {\n                            dbRowDict[dbRow._id] = dbRow;\n                        });\n                    });\n                    result = Object.keys(dbRowDict).map(function (id) {\n                        return dbRowDict[id];\n                    });\n                    return !result.length;\n                }\n                if (key[0] === '$') {\n                    result = local.dbRowListGetManyByOperator(result, fieldName, key, bb, not);\n                    return !result.length;\n                }\n                // recurse\n                result = local.dbRowListGetManyByQuery(result, bb, key, not);\n                return !result.length;\n            });\n            return result;\n        };\n\n        local.dbRowProject = function (dbRow, fieldList) {\n        /*\n         * this function will deepcopy and project the dbRow with the given fieldList\n         */\n            var result;\n            if (!dbRow) {\n                return null;\n            }\n            // handle list-case\n            if (Array.isArray(dbRow)) {\n                return dbRow.map(function (dbRow) {\n                    // recurse\n                    return local.dbRowProject(dbRow, fieldList);\n                });\n            }\n            // normalize to list\n            if (!(Array.isArray(fieldList) && fieldList.length)) {\n                fieldList = Object.keys(dbRow);\n            }\n            result = {};\n            fieldList.forEach(function (key) {\n                if (key[0] !== '$') {\n                    result[key] = dbRow[key];\n                }\n            });\n            return JSON.parse(local.jsonStringifyOrdered(result));\n        };\n\n        local.dbRowSetId = function (dbRow, idIndex) {\n        /*\n         * this function will set a random and unique id into dbRow for the given idIndex,\n         * if it does not exist\n         */\n            var id;\n            id = dbRow[idIndex.name];\n            if (typeof id !== 'number' && typeof id !== 'string') {\n                do {\n                    id = idIndex.isInteger\n                        ? (1 + Math.random()) * 0x10000000000000\n                        : 'a' + ((1 + Math.random()) * 0x10000000000000).toString(36).slice(1);\n                // optimization - hasOwnProperty\n                } while (idIndex.dict.hasOwnProperty(id));\n                dbRow[idIndex.name] = id;\n            }\n            return id;\n        };\n\n        local.dbSave = function (onError) {\n        /*\n         * this function will save the db to storage\n         */\n            var onParallel;\n            onParallel = local.onParallel(function (error) {\n                local.setTimeoutOnError(onError, 0, error);\n            });\n            onParallel.counter += 1;\n            Object.keys(local.dbTableDict).forEach(function (key) {\n                onParallel.counter += 1;\n                local.dbTableDict[key].save(onParallel);\n            });\n            onParallel();\n        };\n\n        local.dbTableCreateMany = function (optionsList, onError) {\n        /*\n         * this function will set the optionsList into the db\n         */\n            var onParallel, result;\n            onParallel = local.onParallel(function (error) {\n                local.setTimeoutOnError(onError, 0, error, result);\n            });\n            onParallel.counter += 1;\n            result = local.normalizeValue('list', optionsList).map(function (options) {\n                onParallel.counter += 1;\n                return local.dbTableCreateOne(options, onParallel);\n            });\n            return local.setTimeoutOnError(onParallel, 0, null, result);\n        };\n\n        local.dbTableCreateOne = function (options, onError) {\n        /*\n         * this function will create a dbTable with the given options\n         */\n            var self;\n            options = local.objectSetOverride(options);\n            // register dbTable\n            self = local.dbTableDict[options.name] =\n                local.dbTableDict[options.name] || new local._DbTable(options);\n            self.sortDefault = options.sortDefault ||\n                self.sortDefault ||\n                [{ fieldName: '_timeUpdated', isDescending: true }];\n            // remove idIndex\n            local.normalizeValue('list', options.idIndexRemoveList).forEach(function (idIndex) {\n                self.idIndexRemove(idIndex);\n            });\n            // create idIndex\n            local.normalizeValue('list', options.idIndexCreateList).forEach(function (idIndex) {\n                self.idIndexCreate(idIndex);\n            });\n            // upsert dbRow\n            self.crudSetManyById(options.dbRowList);\n            // restore dbTable from persistent-storage\n            self.isLoaded = self.isLoaded || options.isLoaded;\n            if (!self.isLoaded) {\n                local.storageGetItem('dbTable.' + self.name + '.json', function (error, data) {\n                    // validate no error occurred\n                    local.assert(!error, error);\n                    if (!self.isLoaded) {\n                        local.dbImport(data);\n                    }\n                    self.isLoaded = true;\n                    local.setTimeoutOnError(onError, 0, null, self);\n                });\n                return self;\n            }\n            return local.setTimeoutOnError(onError, 0, null, self);\n        };\n\n        local.dbTableDict = {};\n\n        local.sortCompare = function (aa, bb, ii, jj) {\n        /*\n         * this function will compare aa vs bb and return:\n         * -1 if aa < bb\n         *  0 if aa === bb\n         *  1 if aa > bb\n         * the priority for comparing different typeof's is:\n         * null < boolean < number < string < object < undefined\n         */\n            var typeof1, typeof2;\n            if (aa === bb) {\n                return ii < jj\n                    ? -1\n                    : 1;\n            }\n            if (aa === null) {\n                return -1;\n            }\n            if (bb === null) {\n                return 1;\n            }\n            typeof1 = typeof aa;\n            typeof2 = typeof bb;\n            if (typeof1 === typeof2) {\n                return typeof1 === 'object'\n                    ? 0\n                    : aa > bb\n                    ? 1\n                    : -1;\n            }\n            if (typeof1 === 'boolean') {\n                return -1;\n            }\n            if (typeof2 === 'boolean') {\n                return 1;\n            }\n            if (typeof1 === 'number') {\n                return -1;\n            }\n            if (typeof2 === 'number') {\n                return 1;\n            }\n            if (typeof1 === 'string') {\n                return -1;\n            }\n            if (typeof2 === 'string') {\n                return 1;\n            }\n            return 0;\n        };\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // init cli\n        if (module !== require.main || local.global.utility2_rollup) {\n            break;\n        }\n        local.cliDict = {};\n        local.cliDict.dbTableCrudGetManyByQuery = function () {\n        /*\n         * dbTable query\n         * query dbRowList from dbTable\n         */\n            local.dbTableCreateOne({ name: process.argv[3] }, function (error, self) {\n                // validate no error occurred\n                local.assert(!error, error);\n                console.log(JSON.stringify(self.crudGetManyByQuery(\n                    JSON.parse(process.argv[4] || '{}')\n                ), null, 4));\n            });\n        };\n        local.cliDict.dbTableCrudRemoveManyByQuery = function () {\n        /*\n         * dbTable query\n         * query and remove dbRowList from dbTable\n         */\n            local.dbTableCreateOne({ name: process.argv[3] }, function (error, self) {\n                // validate no error occurred\n                local.assert(!error, error);\n                console.log(JSON.stringify(self.crudRemoveManyByQuery(\n                    JSON.parse(process.argv[4])\n                ), null, 4));\n            });\n        };\n        local.cliDict.dbTableCrudSetManyById = function () {\n        /*\n         * dbTable dbRowList\n         * set dbRowList into dbTable\n         */\n            local.dbTableCreateOne({ name: process.argv[3] }, function (error, self) {\n                // validate no error occurred\n                local.assert(!error, error);\n                self.crudSetManyById(JSON.parse(process.argv[4]));\n            });\n        };\n        local.cliDict.dbTableHeaderDictGet = function () {\n        /*\n         * dbTable\n         * get headerDict from dbTable\n         */\n            local.dbTableCreateOne({ name: process.argv[3] }, function (error, self) {\n                // validate no error occurred\n                local.assert(!error, error);\n                var tmp;\n                tmp = [];\n                self.idIndexList.forEach(function (idIndex) {\n                    tmp.push({ isInteger: idIndex.isInteger, name: idIndex.name });\n                });\n                console.log(JSON.stringify({\n                    idIndexList: tmp,\n                    sizeLimit: self.sizeLimit,\n                    sortDefault: self.sortDefault\n                }, null, 4));\n            });\n        };\n        local.cliDict.dbTableHeaderDictSet = function () {\n        /*\n         * dbTable\n         * set headerDict into dbTable\n         */\n            local.dbTableCreateOne({ name: process.argv[3] }, function (error, self) {\n                // validate no error occurred\n                local.assert(!error, error);\n                local.tmp = JSON.parse(process.argv[4]);\n                self.sizeLimit = local.tmp.sizeLimit || self.sizeLimit;\n                self.sortDefault = local.tmp.sortDefault || self.sortDefault;\n                self.save();\n                local.tmp = [];\n                self.idIndexList.forEach(function (idIndex) {\n                    local.tmp.push({ isInteger: idIndex.isInteger, name: idIndex.name });\n                });\n                local.cliDict.dbTableHeaderDictGet();\n            });\n        };\n        local.cliDict.dbTableIdIndexCreate = function () {\n        /*\n         * dbTable idIndex\n         * create idIndex in dbTable\n         */\n            local.dbTableCreateOne({ name: process.argv[3] }, function (error, self) {\n                // validate no error occurred\n                local.assert(!error, error);\n                self.idIndexCreate(JSON.parse(process.argv[4]));\n                self.save();\n                local.tmp = [];\n                self.idIndexList.forEach(function (idIndex) {\n                    local.tmp.push({ isInteger: idIndex.isInteger, name: idIndex.name });\n                });\n                local.cliDict.dbTableHeaderDictGet();\n            });\n        };\n        local.cliDict.dbTableIdIndexRemove = function () {\n        /*\n         * dbTable idIndex\n         * remove idIndex from dbTable\n         */\n            local.dbTableCreateOne({ name: process.argv[3] }, function (error, self) {\n                // validate no error occurred\n                local.assert(!error, error);\n                self.idIndexRemove(JSON.parse(process.argv[4]));\n                self.save();\n                local.cliDict.dbTableHeaderDictGet();\n            });\n        };\n        local.cliDict.dbTableList = function () {\n        /*\n         * [none]\n         * list dbTable's in db\n         */\n            local.storageKeys(function (error, data) {\n                // validate no error occurred\n                local.assert(!error, error);\n                console.log(JSON.stringify(data.map(function (element) {\n                    return element.split('.').slice(1, -1).join('.');\n                }), null, 4));\n            });\n        };\n        local.cliDict.dbTableRemove = function () {\n        /*\n         * dbTable\n         * remove dbTable from db\n         */\n            local.storageRemoveItem('dbTable.' + process.argv[3] + '.json', function (error) {\n                // validate no error occurred\n                local.assert(!error, error);\n                local.cliDict.dbTableList();\n            });\n        };\n        local.cliRun();\n        break;\n    }\n}());\n","/home/travis/build/kaizhu256/node-db-lite/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will run a web-demo of db-lite\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install db-lite && PORT=8081 node example.js\n    3. open a browser to http://127.0.0.1:8081 and play with the web-demo\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package db */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_db\n            : global.utility2_moduleExports);\n        // init exports\n        local.global.local = local;\n        // load db\n        local.db.dbLoad(function () {\n            console.log('db loaded from ' + local.storageDir);\n        });\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-test\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            var reader, tmp;\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.maxHeight === '0px') {\n                    local.uiAnimateSlideDown(document.querySelector('#testReportDiv1'));\n                    document.querySelector('#testRunButton1').textContent = 'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    local.uiAnimateSlideUp(document.querySelector('#testReportDiv1'));\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            case 'dbExportButton1':\n                tmp = window.URL.createObjectURL(new window.Blob([local.db.dbExport()]));\n                document.querySelector('#dbExportA1').href = tmp;\n                document.querySelector('#dbExportA1').click();\n                setTimeout(function () {\n                    window.URL.revokeObjectURL(tmp);\n                }, 30000);\n                break;\n            case 'dbImportButton1':\n                document.querySelector('#dbImportInput1').click();\n                break;\n            case 'dbImportInput1':\n                console.log('importing db-lite database ...');\n                reader = new window.FileReader();\n                tmp = document.querySelector('#dbImportInput1').files[0];\n                if (!tmp) {\n                    return;\n                }\n                reader.addEventListener('load', function () {\n                    local.db.dbImport(reader.result);\n                    console.log('... imported db-lite database');\n                });\n                reader.readAsText(tmp);\n                break;\n            case 'dbResetButton1':\n                console.log('resetting db-lite database ...');\n                local.db.dbDrop(function () {\n                    console.log('... resetted db-lite database');\n                });\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-test\n    /* istanbul ignore next */\n    case 'node':\n        // init exports\n        module.exports = local;\n        // require builtins\n        // local.assert = require('assert');\n        local.buffer = require('buffer');\n        local.child_process = require('child_process');\n        local.cluster = require('cluster');\n        local.console = require('console');\n        local.constants = require('constants');\n        local.crypto = require('crypto');\n        local.dgram = require('dgram');\n        local.dns = require('dns');\n        local.domain = require('domain');\n        local.events = require('events');\n        local.fs = require('fs');\n        local.http = require('http');\n        local.https = require('https');\n        local.module = require('module');\n        local.net = require('net');\n        local.os = require('os');\n        local.path = require('path');\n        local.process = require('process');\n        local.punycode = require('punycode');\n        local.querystring = require('querystring');\n        local.readline = require('readline');\n        local.repl = require('repl');\n        local.stream = require('stream');\n        local.string_decoder = require('string_decoder');\n        local.timers = require('timers');\n        local.tls = require('tls');\n        local.tty = require('tty');\n        local.url = require('url');\n        local.util = require('util');\n        local.v8 = require('v8');\n        local.vm = require('vm');\n        local.zlib = require('zlib');\n/* validateLineSortedReset */\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<!-- \"assets.index.default.template.html\" -->\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/* jslint-utility2 */\\n\\\n/*csslint\\n\\\n*/\\n\\\n/* jslint-ignore-begin */\\n\\\n*,\\n\\\n*:after,\\n\\\n*:before {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\n/* jslint-ignore-end */\\n\\\n@keyframes uiAnimateShake {\\n\\\n    0%, 50% {\\n\\\n        transform: translateX(10px);\\n\\\n    }\\n\\\n    25%, 75% {\\n\\\n        transform: translateX(-10px);\\n\\\n    }\\n\\\n    100% {\\n\\\n        transform: translateX(0);\\n\\\n    }\\n\\\n}\\n\\\n@keyframes uiAnimateSpin {\\n\\\n    0% {\\n\\\n        transform: rotate(0deg);\\n\\\n    }\\n\\\n    100% {\\n\\\n        transform: rotate(360deg);\\n\\\n    }\\n\\\n}\\n\\\na {\\n\\\n    overflow-wrap: break-word;\\n\\\n}\\n\\\nbody > div,\\n\\\nbody > pre,\\n\\\nbody > textarea,\\n\\\nbody > .button {\\n\\\n    margin-bottom: 20px;\\n\\\n}\\n\\\nbody > textarea {\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\nbody > textarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\nbody > .button {\\n\\\n    width: 20rem;\\n\\\n}\\n\\\ncode,\\n\\\npre,\\n\\\ntextarea {\\n\\\n    font-family: Consolas, Menlo, monospace;\\n\\\n    font-size: small;\\n\\\n}\\n\\\npre {\\n\\\n    overflow-wrap: break-word;\\n\\\n    white-space: pre-wrap;\\n\\\n}\\n\\\ntextarea {\\n\\\n    overflow: auto;\\n\\\n    white-space: pre;\\n\\\n}\\n\\\n.button {\\n\\\n    background-color: #fff;\\n\\\n    border: 1px solid;\\n\\\n    border-bottom-color: rgb(186, 186, 186);\\n\\\n    border-left-color: rgb(209, 209, 209);\\n\\\n    border-radius: 4px;\\n\\\n    border-right-color: rgb(209, 209, 209);\\n\\\n    border-top-color: rgb(216, 216, 216);\\n\\\n    color: #00d;\\n\\\n    cursor: pointer;\\n\\\n    display: inline-block;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    font-size: 12px;\\n\\\n    font-style: normal;\\n\\\n    font-weight: normal;\\n\\\n    margin: 0;\\n\\\n    padding: 2px 7px 3px 7px;\\n\\\n    text-align: center;\\n\\\n    text-decoration: underline;\\n\\\n}\\n\\\n.colorError {\\n\\\n    color: #d00;\\n\\\n}\\n\\\n.uiAnimateShake {\\n\\\n    animation-duration: 500ms;\\n\\\n    animation-name: uiAnimateShake;\\n\\\n}\\n\\\n.uiAnimateSlide {\\n\\\n    overflow-y: hidden;\\n\\\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    text-align: center;\\n\\\n}\\n\\\n.zeroPixel {\\n\\\n    border: 0;\\n\\\n    height: 0;\\n\\\n    margin: 0;\\n\\\n    padding: 0;\\n\\\n    width: 0;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body style=\"background: #eef; font-family: Arial, Helvetica, sans-serif; margin: 0 40px;\">\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 500ms, width 1500ms; width: 0%; z-index: 1;\"></div>\\n\\\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\\n\\\n<code style=\"display: none;\"></code><div class=\"button uiAnimateShake uiAnimateSlide utility2FooterDiv zeroPixel\" style=\"display: none;\"></div><pre style=\"display: none;\"></pre><textarea readonly style=\"display: none;\"></textarea>\\n\\\n<script>\\n\\\n/* jslint-utility2 */\\n\\\n/*jslint\\n\\\n    bitwise: true,\\n\\\n    browser: true,\\n\\\n    maxerr: 4,\\n\\\n    maxlen: 100,\\n\\\n    node: true,\\n\\\n    nomen: true,\\n\\\n    regexp: true,\\n\\\n    stupid: true\\n\\\n*/\\n\\\n(function () {\\n\\\n    \"use strict\";\\n\\\n    var ajaxProgressDiv1,\\n\\\n        ajaxProgressState,\\n\\\n        ajaxProgressUpdate,\\n\\\n        timerIntervalAjaxProgressUpdate;\\n\\\n    ajaxProgressDiv1 = document.querySelector(\"#ajaxProgressDiv1\");\\n\\\n    setTimeout(function () {\\n\\\n        ajaxProgressDiv1.style.width = \"25%\";\\n\\\n    });\\n\\\n    ajaxProgressState = 0;\\n\\\n    ajaxProgressUpdate = (window.local &&\\n\\\n        window.local.ajaxProgressUpdate) || function () {\\n\\\n        ajaxProgressDiv1.style.width = \"100%\";\\n\\\n        setTimeout(function () {\\n\\\n            ajaxProgressDiv1.style.background = \"transparent\";\\n\\\n            setTimeout(function () {\\n\\\n                ajaxProgressDiv1.style.width = \"0%\";\\n\\\n            }, 500);\\n\\\n        }, 1500);\\n\\\n    };\\n\\\n    timerIntervalAjaxProgressUpdate = setInterval(function () {\\n\\\n        ajaxProgressState += 1;\\n\\\n        ajaxProgressDiv1.style.width = Math.max(\\n\\\n            100 - 75 * Math.exp(-0.125 * ajaxProgressState),\\n\\\n            Number(ajaxProgressDiv1.style.width.slice(0, -1)) || 0\\n\\\n        ) + \"%\";\\n\\\n    }, 1000);\\n\\\n    window.addEventListener(\"load\", function () {\\n\\\n        clearInterval(timerIntervalAjaxProgressUpdate);\\n\\\n        ajaxProgressUpdate();\\n\\\n    });\\n\\\n}());\\n\\\n</script>\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<a class=\"button\" download href=\"assets.app.js\">download standalone app</a><br>\\n\\\n<button class=\"button onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div class=\"uiAnimateSlide\" id=\"testReportDiv1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<button class=\"button onclick onreset\" id=\"dbResetButton1\">reset database</button><br>\\n\\\n<button class=\"button onclick\" id=\"dbExportButton1\">export database -&gt; file</button><br>\\n\\\n<a download=\"db.persistence.json\" href=\"\" id=\"dbExportA1\"></a>\\n\\\n<button class=\"button onclick\" id=\"dbImportButton1\">import database &lt;- file</button><br>\\n\\\n<input class=\"onchange onreset zeroPixel\" type=\"file\" id=\"dbImportInput1\">\\n\\\n<label>edit or paste script below to\\n\\\n    <a\\n\\\n        href=\"https://kaizhu256.github.io/node-db-lite/build..beta..travis-ci.org/apidoc.html\"\\n\\\n        target=\"_blank\"\\n\\\n    >eval</a>\\n\\\n</label>\\n\\\n<textarea id=\"inputTextareaEval1\">\\n\\\n/*jslint browser: true, node: true*/\\n\\\n\"use strict\";\\n\\\nvar dbTable1, modeNext, onNext;\\n\\\nmodeNext = 0;\\n\\\nonNext = function (error, data) {\\n\\\n    modeNext = error\\n\\\n        ? Infinity\\n\\\n        : modeNext + 1;\\n\\\n    switch (modeNext) {\\n\\\n    case 1:\\n\\\n        dbTable1 = window.dbTable1 = window.utility2_db.dbTableCreateOne({\\n\\\n            name: \"dbTable1\"\\n\\\n        }, onNext);\\n\\\n        break;\\n\\\n    case 2:\\n\\\n        dbTable1.idIndexCreate({ name: \"field1\" }, onNext);\\n\\\n        break;\\n\\\n    case 3:\\n\\\n        dbTable1.crudSetOneById({ field1: \"aa\", field2: 1, field3: \"foo\" }, onNext);\\n\\\n        break;\\n\\\n    case 4:\\n\\\n        dbTable1.crudSetOneById({ field1: \"bb\", field2: 2, field3: \"bar\" }, onNext);\\n\\\n        break;\\n\\\n    case 5:\\n\\\n        dbTable1.crudSetOneById({ field1: \"cc\", field2: 3, field3: \"baz\" }, onNext);\\n\\\n        break;\\n\\\n    case 6:\\n\\\n        dbTable1.crudRemoveOneById({ field1: \"aa\" }, onNext);\\n\\\n        break;\\n\\\n    case 7:\\n\\\n        dbTable1.crudUpdateOneById({ field1: \"bb\", field2: -1 }, onNext);\\n\\\n        break;\\n\\\n    case 8:\\n\\\n        dbTable1.crudSetOneById({ field2: Math.random() }, onNext);\\n\\\n        break;\\n\\\n    case 9:\\n\\\n        dbTable1.crudGetManyByQuery({\\n\\\n            limit: Infinity,\\n\\\n            query: { field2: { $gte: -Infinity, $lte: Infinity } },\\n\\\n            skip: 0,\\n\\\n            sort: [{ fieldName: \"_timeUpdated\", idDescending: true }]\\n\\\n        }, onNext);\\n\\\n        break;\\n\\\n    case 10:\\n\\\n        console.log(data);\\n\\\n        dbTable1.crudCountAll(onNext);\\n\\\n        break;\\n\\\n    case 11:\\n\\\n        console.log(\"number of rows: \" + data);\\n\\\n        break;\\n\\\n    default:\\n\\\n        console.error(error.stack);\\n\\\n    }\\n\\\n};\\n\\\nonNext();\\n\\\n</textarea>\\n\\\n<button class=\"button onclick oneval onreset\" id=\"dbEvalButton1\">eval script</button><br>\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script>window.utility2.onResetBefore.counter += 1;</script>\\n\\\n<script src=\"jsonp.utility2.stateInit?callback=window.utility2.stateInit\"></script>\\n\\\n<script src=\"assets.db.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<script>window.utility2.onResetBefore();</script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        [\n            'assets.index.css',\n            'assets.index.template.html',\n            'assets.swgg.swagger.json',\n            'assets.swgg.swagger.server.json'\n        ].forEach(function (file) {\n            file = '/' + file;\n            local.assetsDict[file] = local.assetsDict[file] || '';\n            if (local.fs.existsSync(local.__dirname + file)) {\n                local.assetsDict[file] = local.fs.readFileSync(\n                    local.__dirname + file,\n                    'utf8'\n                );\n            }\n        });\n/* validateLineSortedReset */\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.db.js'] = local.assetsDict['/assets.db.js'] ||\n            local.fs.readFileSync(local.__dirname + '/lib.db.js', 'utf8'\n        ).replace((/^#!/), '//');\n/* validateLineSortedReset */\n        local.assetsDict['/'] =\n            local.assetsDict['/assets.example.html'] =\n            local.assetsDict['/assets.index.template.html']\n            .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                switch (match1) {\n                case 'npm_package_description':\n                    return 'the greatest app in the world!';\n                case 'npm_package_name':\n                    return 'db-lite';\n                case 'npm_package_nameLib':\n                    return 'db';\n                case 'npm_package_version':\n                    return '0.0.1';\n                default:\n                    return match0;\n                }\n            });\n        // init cli\n        if (module !== require.main || local.global.utility2_rollup) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());"}